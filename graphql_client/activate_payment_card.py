# Generated by ariadne-codegen
# Source: queries.gql

from typing import Annotated, List, Literal, Optional, Union

from pydantic import Field

from .base_model import BaseModel
from .enums import PaymentCardStatus


class ActivatePaymentCard(BaseModel):
    activate_payment_card: Optional[
        Annotated[
            Union[
                "ActivatePaymentCardActivatePaymentCardPaymentCard",
                "ActivatePaymentCardActivatePaymentCardUserError",
                "ActivatePaymentCardActivatePaymentCardAccessDeniedError",
            ],
            Field(discriminator="typename__"),
        ]
    ] = Field(alias="activatePaymentCard")


class ActivatePaymentCardActivatePaymentCardPaymentCard(BaseModel):
    typename__: Literal["PaymentCard"] = Field(alias="__typename")
    status: Optional[PaymentCardStatus]


class ActivatePaymentCardActivatePaymentCardUserError(BaseModel):
    typename__: Literal["UserError"] = Field(alias="__typename")
    errors: Optional[List["ActivatePaymentCardActivatePaymentCardUserErrorErrors"]]


class ActivatePaymentCardActivatePaymentCardUserErrorErrors(BaseModel):
    code: Optional[str]
    path: Optional[List[str]]


class ActivatePaymentCardActivatePaymentCardAccessDeniedError(BaseModel):
    typename__: Literal["AccessDeniedError"] = Field(alias="__typename")


ActivatePaymentCard.model_rebuild()
ActivatePaymentCardActivatePaymentCardUserError.model_rebuild()
