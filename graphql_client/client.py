# Generated by ariadne-codegen
# Source: queries.gql

from typing import Any, Dict, Optional, Union

from .activate_payment_card import ActivatePaymentCard
from .base_client import BaseClient
from .base_model import UNSET, UnsetType
from .create_account_holder_card_product_application import (
    CreateAccountHolderCardProductApplication,
)
from .create_card_product import CreateCardProduct
from .create_us_person_account_holder import CreateUSPersonAccountHolder
from .find_financial_account import FindFinancialAccount
from .get_all_organizations import GetAllOrganizations
from .get_financial_account_by_id import GetFinancialAccountByID
from .get_us_account_holder import GetUSAccountHolder
from .input_types import (
    ActivatePaymentCardInput,
    CreateAccountHolderCardProductApplicationInput,
    CreateCardProductInput,
    CreateUSPersonAccountHolderInput,
    IssueFinancialAccountForApplicationInput,
    IssuePaymentCardForFinancialAccountInput,
    SimulateDepositInput,
    SimulateSingleStepAuthAndClearInput,
)
from .issue_financial_account_for_application import IssueFinancialAccountForApplication
from .issue_payment_card_for_financial_account import (
    IssuePaymentCardForFinancialAccount,
)
from .lookup_application import LookupApplication
from .payment_transaction import PaymentTransaction
from .ping import Ping
from .report_usage import ReportUsage
from .simulate_deposit import SimulateDeposit
from .simulate_single_step_auth_and_clear import SimulateSingleStepAuthAndClear


def gql(q: str) -> str:
    return q


class Client(BaseClient):
    def simulate_deposit(
        self, input: SimulateDepositInput, **kwargs: Any
    ) -> SimulateDeposit:
        query = gql(
            """
            mutation SimulateDeposit($input: SimulateDepositInput!) {
              simulateDeposit(input: $input) {
                __typename
                ... on UserError {
                  errors {
                    path
                    code
                    description
                  }
                }
                ... on Transfer {
                  id
                  status
                }
                ... on AccessDeniedError {
                  message
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query, operation_name="SimulateDeposit", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return SimulateDeposit.model_validate(data)

    def create_card_product(
        self, input: CreateCardProductInput, **kwargs: Any
    ) -> CreateCardProduct:
        query = gql(
            """
            mutation CreateCardProduct($input: CreateCardProductInput!) {
              createCardProduct(input: $input) {
                __typename
                ... on CardProduct {
                  id
                  name
                  usage
                  vertical
                }
                ... on UserError {
                  errors {
                    path
                    code
                    description
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="CreateCardProduct",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateCardProduct.model_validate(data)

    def get_all_organizations(self, **kwargs: Any) -> GetAllOrganizations:
        query = gql(
            """
            query GetAllOrganizations {
              organizations {
                id
                profile {
                  displayName
                  environment
                  region
                }
                cardProducts(first: 20) {
                  edges {
                    cursor
                    node {
                      __typename
                      id
                      name
                      usage
                      vertical
                      accounts {
                        edges {
                          node {
                            id
                            name
                            features {
                              __typename
                              ... on DirectDepositFinancialAccountFeature {
                                __typename
                                enabled
                              }
                              ... on PrePaidPaymentCardFinancialAccountFeature {
                                __typename
                                enabled
                              }
                              ... on DebitPaymentCardFinancialAccountFeature {
                                __typename
                                enabled
                              }
                              ... on CreditPaymentCardFinancialAccountFeature {
                                __typename
                                enabled
                              }
                              ... on PayrollAdvanceFinancialAccountFeature {
                                __typename
                                enabled
                              }
                              ... on PayrollEmployerAdvanceFinancialAccountFeature {
                                __typename
                                enabled
                              }
                              ... on NegativeBalanceReserveFinancialAccountFeature {
                                __typename
                                enabled
                              }
                              ... on ProductReserveFinancialAccountFeature {
                                __typename
                                enabled
                              }
                              ... on JustInTimeFundingFinancialAccountFeature {
                                __typename
                                enabled
                              }
                              ... on ProductFundingFinancialAccountFeature {
                                enabled
                              }
                              ... on SecuredCreditPaymentCardFinancialAccountFeature {
                                __typename
                                enabled
                              }
                              ... on FleetCardAccountFeature {
                                __typename
                                enabled
                              }
                              ... on CommercialCreditPayInFullCardAccountFeature {
                                __typename
                                enabled
                              }
                              ... on VendorProvidedBankFinancialAccountFeature {
                                __typename
                                enabled
                              }
                              ... on AchCapableFinancialAccountFeature {
                                __typename
                                enabled
                              }
                              ... on NonVerifiedFinancialAccountFeature {
                                __typename
                                enabled
                              }
                              ... on PointRewardFinancialAccountFeature {
                                __typename
                                enabled
                              }
                              ... on CardFundingFinancialAccountFeature {
                                __typename
                                enabled
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  pageInfo {
                    startCursor
                    endCursor
                    hasNextPage
                    hasPreviousPage
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {}
        response = self.execute(
            query=query,
            operation_name="GetAllOrganizations",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetAllOrganizations.model_validate(data)

    def ping(self, **kwargs: Any) -> Ping:
        query = gql(
            """
            query Ping {
              ping
              organizations {
                id
                profile {
                  displayName
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {}
        response = self.execute(
            query=query, operation_name="Ping", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return Ping.model_validate(data)

    def get_us_account_holder(self, node_id: str, **kwargs: Any) -> GetUSAccountHolder:
        query = gql(
            """
            query GetUSAccountHolder($nodeId: ID!) {
              node(id: $nodeId) {
                __typename
                ... on USBusinessAccountHolder {
                  __typename
                  businessProfile {
                    name {
                      legalBusinessName
                    }
                  }
                }
                ... on USPersonAccountHolder {
                  __typename
                  id
                  name {
                    familyName
                    givenName
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"nodeId": node_id}
        response = self.execute(
            query=query,
            operation_name="GetUSAccountHolder",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetUSAccountHolder.model_validate(data)

    def create_us_person_account_holder(
        self, input: CreateUSPersonAccountHolderInput, **kwargs: Any
    ) -> CreateUSPersonAccountHolder:
        query = gql(
            """
            mutation CreateUSPersonAccountHolder($input: CreateUSPersonAccountHolderInput!) {
              createUSPersonAccountHolder(input: $input) {
                __typename
                ... on USPersonAccountHolder {
                  id
                  externalId
                }
                ... on UserError {
                  errors {
                    code
                    path
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="CreateUSPersonAccountHolder",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateUSPersonAccountHolder.model_validate(data)

    def get_financial_account_by_id(
        self, id: str, **kwargs: Any
    ) -> GetFinancialAccountByID:
        query = gql(
            """
            query GetFinancialAccountByID($id: ID!) {
              node(id: $id) {
                __typename
                ... on FinancialAccount {
                  __typename
                  id
                  createdAt
                  name
                  owner {
                    __typename
                  }
                  cardProduct {
                    id
                  }
                  ledgers {
                    id
                    name
                    normalBalance
                    creditBalance {
                      value
                    }
                    debitBalance {
                      value
                    }
                    ledgerEntries {
                      edges {
                        node {
                          __typename
                          id
                          createdAt
                          amount {
                            value
                            currencyCode
                          }
                          financialEvent {
                            __typename
                            ... on Transfer {
                              amount {
                                value
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  features {
                    __typename
                    enabled
                    createdAt
                    updatedAt
                  }
                  directDepositDetails {
                    id
                    restrictedDetails {
                      __typename
                      ... on DirectDepositDetailRestrictedDetails {
                        number
                        routingNumber
                        bank {
                          name
                          address {
                            streetAddress
                            postalCode
                          }
                        }
                      }
                      ... on AccessDeniedError {
                        message
                      }
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = self.execute(
            query=query,
            operation_name="GetFinancialAccountByID",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetFinancialAccountByID.model_validate(data)

    def payment_transaction(
        self, first: Union[Optional[int], UnsetType] = UNSET, **kwargs: Any
    ) -> PaymentTransaction:
        query = gql(
            """
            query PaymentTransaction($first: Int) {
              paymentTransactions(first: $first) {
                __typename
                pageInfo {
                  hasNextPage
                  hasPreviousPage
                  startCursor
                  endCursor
                }
                edges {
                  cursor
                  node {
                    __typename
                    id
                    createdAt
                    updatedAt
                    steps {
                      __typename
                      createdAt
                      amount {
                        value
                        currencyCode
                      }
                      events {
                        __typename
                        createdAt
                        updatedAt
                        amount {
                          value
                          currencyCode
                        }
                      }
                    }
                    status
                    accountingDirection
                    authorizedAmount {
                      value
                      currencyCode
                    }
                    authorizedAmount {
                      value
                      currencyCode
                    }
                    settledAmount {
                      value
                      currencyCode
                    }
                    disbursedAmount {
                      value
                      currencyCode
                    }
                    canceledAmount {
                      value
                      currencyCode
                    }
                    refundedAmount {
                      value
                      currencyCode
                    }
                    responseCode {
                      processorResponseCode
                      addressCode
                      postalCode
                      securityCode
                    }
                    instrument {
                      __typename
                      ... on PaymentCardInstrument {
                        createdAt
                        last4
                        expiryYear
                        expiryMonth
                        brand
                      }
                    }
                    ... on PaymentCreditTransaction {
                      originatedPaymentTransaction {
                        __typename
                        id
                        createdAt
                        updatedAt
                      }
                    }
                    ... on PaymentDebitTransaction {
                      refunds {
                        __typename
                        id
                        createdAt
                        updatedAt
                      }
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"first": first}
        response = self.execute(
            query=query,
            operation_name="PaymentTransaction",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return PaymentTransaction.model_validate(data)

    def report_usage(self, **kwargs: Any) -> ReportUsage:
        query = gql(
            """
            query ReportUsage {
              reportUsage {
                ... on ReportUsage {
                  reportType
                  limit
                  limitRemaining
                  periodEnd
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {}
        response = self.execute(
            query=query, operation_name="ReportUsage", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return ReportUsage.model_validate(data)

    def find_financial_account(
        self,
        id: str,
        first_activities: Union[Optional[int], UnsetType] = UNSET,
        activities_after_cursor: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> FindFinancialAccount:
        query = gql(
            """
            query FindFinancialAccount($id: ID!, $firstActivities: Int, $activitiesAfterCursor: String) {
              node(id: $id) {
                __typename
                ... on FinancialAccount {
                  __typename
                  id
                  financialAccountActivities(
                    first: $firstActivities
                    after: $activitiesAfterCursor
                  ) {
                    pageInfo {
                      hasNextPage
                      hasPreviousPage
                      startCursor
                      endCursor
                    }
                    edges {
                      cursor
                      node {
                        __typename
                        sign
                        isComplete
                        pendingAmount {
                          value
                          currencyCode
                        }
                        postedAmount {
                          value
                          currencyCode
                        }
                        createdAt
                        source {
                          __typename
                          ... on DebitTransaction {
                            __typename
                            id
                            transactionEvents {
                              __typename
                              ... on Node {
                                id
                              }
                              ... on AuthorizationEvent {
                                merchantDetails {
                                  category
                                  name
                                }
                              }
                              ... on IssuerPreliminaryAuthorizationEvent {
                                merchantDetails {
                                  category
                                  name
                                }
                              }
                              ... on ClearingEvent {
                                merchantDetails {
                                  category
                                  name
                                }
                              }
                              ... on BalanceInquiryEvent {
                                merchantDetails {
                                  category
                                  name
                                }
                              }
                              ... on VerificationEvent {
                                merchantDetails {
                                  category
                                  name
                                }
                              }
                              ... on AuthorizationAndClearEvent {
                                id
                                responseCode
                                postalCodeResponseCode
                                cvvResponseCode
                                transactionProcessingType
                                approvedAmount {
                                  value
                                  currencyCode
                                }
                                merchantDetails {
                                  countryCodeAlpha3
                                  category
                                  name
                                  description
                                  merchantId
                                  categoryCode
                                  address {
                                    postalCode
                                    streetAddress
                                    region
                                    locality
                                    countryCodeAlpha3
                                  }
                                }
                              }
                              ... on ReversalEvent {
                                merchantDetails {
                                  category
                                  name
                                }
                              }
                            }
                          }
                          ... on CreditTransaction {
                            __typename
                            id
                            transactionEvents {
                              __typename
                              ... on Node {
                                id
                              }
                              ... on AuthorizationEvent {
                                merchantDetails {
                                  category
                                  name
                                }
                              }
                              ... on IssuerPreliminaryAuthorizationEvent {
                                merchantDetails {
                                  category
                                  name
                                }
                              }
                              ... on ClearingEvent {
                                merchantDetails {
                                  category
                                  name
                                }
                              }
                              ... on BalanceInquiryEvent {
                                merchantDetails {
                                  category
                                  name
                                }
                              }
                              ... on VerificationEvent {
                                merchantDetails {
                                  category
                                  name
                                }
                              }
                              ... on AuthorizationAndClearEvent {
                                id
                                responseCode
                                postalCodeResponseCode
                                cvvResponseCode
                                merchantDetails {
                                  countryCodeAlpha3
                                  category
                                  name
                                  description
                                  merchantId
                                  categoryCode
                                  address {
                                    postalCode
                                    region
                                    locality
                                    countryCodeAlpha3
                                  }
                                }
                                pointOfServiceDetails {
                                  category
                                  cardDataInputCapability
                                  panEntryMode
                                  pinEntryMode
                                  terminalAttendance
                                  isCardHolderPresent
                                  isCardPresent
                                  terminalSupportsPartialApproval
                                  isRecurring
                                }
                              }
                              ... on ReversalEvent {
                                merchantDetails {
                                  category
                                  name
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "id": id,
            "firstActivities": first_activities,
            "activitiesAfterCursor": activities_after_cursor,
        }
        response = self.execute(
            query=query,
            operation_name="FindFinancialAccount",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return FindFinancialAccount.model_validate(data)

    def simulate_single_step_auth_and_clear(
        self, input: SimulateSingleStepAuthAndClearInput, **kwargs: Any
    ) -> SimulateSingleStepAuthAndClear:
        query = gql(
            """
            mutation SimulateSingleStepAuthAndClear($input: SimulateSingleStepAuthAndClearInput!) {
              simulateSingleStepAuthAndClear(input: $input) {
                __typename
                ... on AuthorizationAndClearEvent {
                  id
                  transaction {
                    ... on Node {
                      __typename
                      id
                    }
                  }
                  originalAmount {
                    value
                    currencyCode
                  }
                  requestedAmount {
                    value
                    currencyCode
                  }
                  approvedAmount {
                    value
                    currencyCode
                  }
                  responseCode
                  partial
                  merchantDetails {
                    address {
                      locality
                      region
                      countryCodeAlpha3
                      postalCode
                    }
                    countryCodeAlpha3
                    category
                    categoryCode
                    name
                    merchantId
                    description
                  }
                  currentFinancialAccountMaximumBalanceAmount {
                    value
                    currencyCode
                  }
                  currentFinancialAccountAvailableToSpendAmount {
                    value
                    currencyCode
                  }
                  transactionProcessingType
                  pointOfServiceDetails {
                    category
                    panEntryMode
                    pinEntryMode
                    terminalAttendance
                    isCardHolderPresent
                    isCardPresent
                    isRecurring
                    terminalSupportsPartialApproval
                  }
                  additionalNetworkData {
                    __typename
                    ... on VisaData {
                      transactionIdentifier
                    }
                  }
                  paymentCardSnapshot {
                    createdAt
                    status
                    paymentCardCurrent {
                      id
                      expirationDate
                      last4
                    }
                  }
                }
                ... on UserError {
                  errors {
                    path
                    code
                    description
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="SimulateSingleStepAuthAndClear",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return SimulateSingleStepAuthAndClear.model_validate(data)

    def create_us_person_account_holder(
        self, input: CreateUSPersonAccountHolderInput, **kwargs: Any
    ) -> CreateUSPersonAccountHolder:
        query = gql(
            """
            mutation createUSPersonAccountHolder($input: CreateUSPersonAccountHolderInput!) {
              createUSPersonAccountHolder(input: $input) {
                __typename
                ... on UserError {
                  errors {
                    path
                    code
                    description
                  }
                }
                ... on USPersonAccountHolder {
                  id
                  email
                  dateOfBirth
                  externalId
                  updatedAt
                  createdAt
                  name {
                    givenName
                    familyName
                    title
                    suffix
                    middleName
                  }
                  billingAddress {
                    streetAddress
                    extendedAddress
                    postalCode
                    region
                    locality
                    countryCodeAlpha3
                  }
                  phoneNumbers {
                    countryCode
                    number
                    label
                  }
                  identificationDocument {
                    socialSecurityNumber {
                      numberHash
                      countryCodeAlpha3
                    }
                  }
                  personCreditRiskAttributes {
                    totalAnnualIncome {
                      value
                      currencyCode
                    }
                    currentDebtObligations {
                      value
                      currencyCode
                    }
                    employmentStatus
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="createUSPersonAccountHolder",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateUSPersonAccountHolder.model_validate(data)

    def create_account_holder_card_product_application(
        self, input: CreateAccountHolderCardProductApplicationInput, **kwargs: Any
    ) -> CreateAccountHolderCardProductApplication:
        query = gql(
            """
            mutation createAccountHolderCardProductApplication($input: CreateAccountHolderCardProductApplicationInput!) {
              createAccountHolderCardProductApplication(input: $input) {
                __typename
                ... on AccountHolderCardProductApplication {
                  id
                  applicationState {
                    status
                  }
                  updatedAt
                  createdAt
                }
                ... on UserError {
                  errors {
                    path
                    code
                    description
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="createAccountHolderCardProductApplication",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateAccountHolderCardProductApplication.model_validate(data)

    def lookup_application(self, id: str, **kwargs: Any) -> LookupApplication:
        query = gql(
            """
            query LookupApplication($id: ID!) {
              node(id: $id) {
                __typename
                ... on AccountHolderCardProductApplication {
                  __typename
                  applicationState {
                    status
                  }
                  accountHolderSnapshot {
                    __typename
                    ... on USPersonAccountHolderSnapshot {
                      __typename
                      currentVerification {
                        status
                        reason
                        results {
                          code
                          description
                        }
                      }
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = self.execute(
            query=query,
            operation_name="LookupApplication",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return LookupApplication.model_validate(data)

    def issue_financial_account_for_application(
        self, input: IssueFinancialAccountForApplicationInput, **kwargs: Any
    ) -> IssueFinancialAccountForApplication:
        query = gql(
            """
            mutation IssueFinancialAccountForApplication($input: IssueFinancialAccountForApplicationInput!) {
              issueFinancialAccountForApplication(input: $input) {
                __typename
                ... on FinancialAccount {
                  id
                  externalId
                  name
                  createdAt
                  updatedAt
                  application {
                    id
                    createdAt
                  }
                  cardProduct {
                    id
                    vertical
                  }
                  features {
                    __typename
                    enabled
                    createdAt
                    updatedAt
                  }
                  directDepositDetails {
                    id
                    restrictedDetails {
                      __typename
                      ... on DirectDepositDetailRestrictedDetails {
                        number
                        routingNumber
                        bank {
                          name
                        }
                      }
                    }
                  }
                  owner {
                    __typename
                    ... on USPersonAccountHolder {
                      id
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="IssueFinancialAccountForApplication",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return IssueFinancialAccountForApplication.model_validate(data)

    def issue_payment_card_for_financial_account(
        self, input: IssuePaymentCardForFinancialAccountInput, **kwargs: Any
    ) -> IssuePaymentCardForFinancialAccount:
        query = gql(
            """
            mutation IssuePaymentCardForFinancialAccount($input: IssuePaymentCardForFinancialAccountInput!) {
              issuePaymentCardForFinancialAccount(input: $input) {
                __typename
                ... on PaymentCard {
                  id
                  bin
                  last4
                  expirationDate
                  network
                  status
                }
                ... on UserError {
                  errors {
                    path
                    code
                    description
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="IssuePaymentCardForFinancialAccount",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return IssuePaymentCardForFinancialAccount.model_validate(data)

    def activate_payment_card(
        self, input: ActivatePaymentCardInput, **kwargs: Any
    ) -> ActivatePaymentCard:
        query = gql(
            """
            mutation ActivatePaymentCard($input: ActivatePaymentCardInput!) {
              activatePaymentCard(input: $input) {
                __typename
                ... on PaymentCard {
                  status
                }
                ... on UserError {
                  errors {
                    code
                    path
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="ActivatePaymentCard",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return ActivatePaymentCard.model_validate(data)
