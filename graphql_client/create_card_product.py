# Generated by ariadne-codegen
# Source: queries.gql

from typing import Annotated, List, Literal, Optional, Union

from pydantic import Field

from .base_model import BaseModel
from .enums import CardProductVertical, CardUsage


class CreateCardProduct(BaseModel):
    create_card_product: Optional[
        Annotated[
            Union[
                "CreateCardProductCreateCardProductCardProduct",
                "CreateCardProductCreateCardProductUserError",
                "CreateCardProductCreateCardProductAccessDeniedError",
            ],
            Field(discriminator="typename__"),
        ]
    ] = Field(alias="createCardProduct")


class CreateCardProductCreateCardProductCardProduct(BaseModel):
    typename__: Literal["CardProduct"] = Field(alias="__typename")
    id: str
    name: Optional[str]
    usage: Optional[CardUsage]
    vertical: Optional[CardProductVertical]


class CreateCardProductCreateCardProductUserError(BaseModel):
    typename__: Literal["UserError"] = Field(alias="__typename")
    errors: Optional[List["CreateCardProductCreateCardProductUserErrorErrors"]]


class CreateCardProductCreateCardProductUserErrorErrors(BaseModel):
    path: Optional[List[str]]
    code: Optional[str]
    description: Optional[str]


class CreateCardProductCreateCardProductAccessDeniedError(BaseModel):
    typename__: Literal["AccessDeniedError"] = Field(alias="__typename")


CreateCardProduct.model_rebuild()
CreateCardProductCreateCardProductUserError.model_rebuild()
