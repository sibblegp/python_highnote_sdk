# Generated by ariadne-codegen
# Source: queries.gql

from typing import Annotated, Any, List, Literal, Optional, Union

from pydantic import Field

from .base_model import BaseModel
from .enums import (
    CardDataInputCapability,
    CardTransactionProcessingType,
    CVVResponseCode,
    FinancialAccountActivitySign,
    ISO3166Alpha3Country,
    MerchantCategory,
    PanEntryMode,
    PinEntryMode,
    PointOfServiceCategory,
    PostalCodeResponseCode,
    TerminalAttendance,
    TransactionEventResponseCode,
)


class FindFinancialAccount(BaseModel):
    node: Optional[
        Annotated[
            Union[
                "FindFinancialAccountNodeNode",
                "FindFinancialAccountNodeFinancialAccount",
            ],
            Field(discriminator="typename__"),
        ]
    ]


class FindFinancialAccountNodeNode(BaseModel):
    typename__: Literal[
        "APIKey",
        "AccountHolderApplicationDocument",
        "AccountHolderCardProductApplication",
        "AccountHolderCardProductApplicationOffer",
        "AccountHolderProvisioning",
        "AccountHolderProvisioningWorkflowAction",
        "AccountStatusActiveEvent",
        "AccountStatusClosedEvent",
        "AccountStatusPendingClosureEvent",
        "AccountStatusSuspendedEvent",
        "AccountStatusUnderReviewEvent",
        "AchExternallyInitatedDepositFailedEvent",
        "AchExternallyInitatedDepositProcessedEvent",
        "AchExternallyInitatedDepositReceivedEvent",
        "AchExternallyInitiatedWithdrawalFailedEvent",
        "AchExternallyInitiatedWithdrawalProcessedEvent",
        "AchExternallyInitiatedWithdrawalReceivedEvent",
        "AchHoldAddedEvent",
        "AchHoldRemovedEvent",
        "AchTransferHoldAddedEvent",
        "AchTransferHoldRemovedEvent",
        "AdminAgentOrganization",
        "AmountLimitInterFinancialAccountTransferRule",
        "AmountLimitSpendRule",
        "AuthorizationAndClearEvent",
        "AuthorizationEvent",
        "AuthorizedUserCardProductApplication",
        "BalanceInquiryEvent",
        "CVVSpendRule",
        "CardArtDocument",
        "CardDataInputCapabilitySpendRule",
        "CardDigitalWalletToken",
        "CardDigitalWalletTokenActivatedEvent",
        "CardDigitalWalletTokenSuspendedEvent",
        "CardDigitalWalletTokenTerminatedEvent",
        "CardProduct",
        "CardProfileDocumentUploadSession",
        "CardProfileSet",
        "CardProfileSetRestricted",
        "CardTransactionProcessingTypeConditionSpendRule",
        "ClearingEvent",
        "CollaborativeAuthorizationEndpoint",
        "CommercialChargeCardFinancialAccountStatement",
        "CommercialRevolvingCardFinancialAccountStatement",
        "ConditionalRuleSetSpendRule",
        "ConsumerChargeCardFinancialAccountStatement",
        "ConsumerRevolvingCardFinancialAccountStatement",
        "CountLimitInterFinancialAccountTransferRule",
        "CountLimitSpendRule",
        "CreditCardTransferEvent",
        "CreditFunds",
        "CreditFundsACHTransferEvent",
        "CreditLedgerEntry",
        "CreditLimitChangeRequest",
        "CreditPayInFullCardFinancialAccountStatement",
        "CreditPlan",
        "CreditPlanTemplate",
        "CreditTransaction",
        "DebitFunds",
        "DebitFundsACHTransferEvent",
        "DebitLedgerEntry",
        "DebitTransaction",
        "DeliveryAttempt",
        "DepositAmountLimitSpendRule",
        "DepositCountLimitSpendRule",
        "DepositProcessingNetworkSpendRule",
        "DigitalCardProfile",
        "DirectDepositDetail",
        "DisbursementTransferEvent",
        "DocumentUploadLink",
        "EmployerFinancialAccount",
        "EnhancedDataEvent",
        "ExternalBankAccountAddedEvent",
        "ExternalBankAccountDetail",
        "ExternalBankAccountRemovedEvent",
        "ExternalFinancialBankAccount",
        "ExternallyInitiatedAchReleaseHoldTransfer",
        "ExternallyInitiatedWireTransfer",
        "FeeChargeRule",
        "FeeSchedule",
        "FeeTransferEvent",
        "FinancialAccountCreditLimitUpdateFromProductFunding",
        "FinancialAccountPseudoBalanceUpdate",
        "FinancialAccountSnapshot",
        "FinancialAccountStatementReadyEvent",
        "FundsDepositCanceledEvent",
        "FundsDepositFailedEvent",
        "FundsDepositInitiatedEvent",
        "FundsDepositProcessedEvent",
        "FundsDepositProcessingEvent",
        "FundsDepositReturnedEvent",
        "FundsWithdrawalCanceledEvent",
        "FundsWithdrawalFailedEvent",
        "FundsWithdrawalInitiatedEvent",
        "FundsWithdrawalProcessedEvent",
        "FundsWithdrawalProcessingEvent",
        "FundsWithdrawalReturnedEvent",
        "IdentityVerificationDocumentUploadSession",
        "IntegratorInitiatedFundsDepositACHTransfer",
        "IntegratorInitiatedFundsDepositACHTransferEvent",
        "IntegratorInitiatedFundsWithdrawalACHTransfer",
        "IntegratorInitiatedFundsWithdrawalACHTransferEvent",
        "InterFinancialAccountTransfer",
        "InternalTransferFromFundingFinancialAccountToPaymentCardFinancialAccountCompletedEvent",
        "InternalTransferFromFundingFinancialAccountToPaymentCardFinancialAccountFailedEvent",
        "InternalTransferFromFundingFinancialAccountToPaymentCardFinancialAccountPendingEvent",
        "InternalTransferFromPaymentCardFinancialAccountToFundingFinancialAccountCompletedEvent",
        "InternalTransferFromPaymentCardFinancialAccountToFundingFinancialAccountFailedEvent",
        "InternalTransferFromPaymentCardFinancialAccountToFundingFinancialAccountPendingEvent",
        "IssuerPreliminaryAuthorizationEvent",
        "JournalEntry",
        "Ledger",
        "ManualAdjustmentEvent",
        "MastercardFleetAuthorizationData",
        "MastercardFleetEnhancedData",
        "MerchantCategorySpendRule",
        "MerchantCountrySpendRule",
        "MerchantIdentifierSpendRule",
        "Node",
        "NonOriginatedAchTransfer",
        "NonOriginatedAchTransferFailedEvent",
        "NonOriginatedAchTransferProcessedEvent",
        "NonOriginatedAchTransferReceivedEvent",
        "NonOriginatedAchTransferReturnedEvent",
        "NonVerifiedExternalUSFinancialBankAccount",
        "NonVerifiedExternalUSFinancialBankAccountDetail",
        "NotificationEvent",
        "OnboardingBusinessOrganizationInformation",
        "OnboardingPreliminaryBusinessInformation",
        "OneTimeACHTransfer",
        "Organization",
        "OriginatedAchTransfer",
        "OriginatedAchTransferCanceledEvent",
        "OriginatedAchTransferFailedEvent",
        "OriginatedAchTransferInitiatedEvent",
        "OriginatedAchTransferPendingEvent",
        "OriginatedAchTransferProcessedEvent",
        "OriginatedAchTransferProcessingEvent",
        "OriginatedAchTransferReturnedEvent",
        "PanEntryModeSpendRule",
        "PaymentCard",
        "PaymentCardActivatedEvent",
        "PaymentCardAuthorizationAndClearApprovedEvent",
        "PaymentCardAuthorizationAndClearDeclinedEvent",
        "PaymentCardAuthorizationApprovedEvent",
        "PaymentCardAuthorizationCreatedEvent",
        "PaymentCardAuthorizationDeclinedEvent",
        "PaymentCardAuthorizationReversedEvent",
        "PaymentCardBinRange",
        "PaymentCardClearedEvent",
        "PaymentCardClosedEvent",
        "PaymentCardEnhancedDataEvent",
        "PaymentCardSnapshot",
        "PaymentCardSuspendedEvent",
        "PaymentCardTransactionChargeback",
        "PaymentCardTransactionDispute",
        "PaymentCardUnsuspendedEvent",
        "PaymentCardVerificationApprovedEvent",
        "PaymentCardVerificationDeclinedEvent",
        "PaymentCreditTransaction",
        "PaymentDebitTransaction",
        "PaymentMethodToken",
        "PaymentOrder",
        "PayrollACHTransferEvent",
        "PayrollAdvance",
        "PayrollAdvanceRepaymentCompletedEvent",
        "PayrollAdvanceRepaymentTransfer",
        "PayrollAdvanceWriteOffCompletedEvent",
        "PayrollAdvanceWriteoffTransfer",
        "PayrollTransfer",
        "PhysicalCardGroupOrder",
        "PhysicalCardProfile",
        "PhysicalPaymentCardGroupOrderShipFailedEvent",
        "PhysicalPaymentCardGroupOrderShippedEvent",
        "PhysicalPaymentCardOrder",
        "PhysicalPaymentCardShipFailedEvent",
        "PhysicalPaymentCardShippedEvent",
        "PointOfServiceCategorySpendRule",
        "PostalCodeVerificationSpendRule",
        "RecurringACHTransfer",
        "RepaymentFailedEvent",
        "RepaymentProcessedEvent",
        "RepaymentProcessingEvent",
        "RepaymentReturnedEvent",
        "Report",
        "RequestedIdentityUpdate",
        "RestrictedAccountHolderSpendRule",
        "ReversalEvent",
        "RewardDefaultEarnRule",
        "RewardMerchantCategoryEarnRule",
        "RewardPointsTransfer",
        "RewardRedemptionConfiguration",
        "RiskApplicationSDK",
        "RiskApplicationSDKRevision",
        "RuleCollection",
        "ScheduledTransferAchEvent",
        "SecureCardBalanceRepaymentACHTransfer",
        "SecureCardBalanceRepaymentACHTransferEvent",
        "SecureDeposit",
        "SecureDepositACHTransfer",
        "SecureDepositACHTransferEvent",
        "SecureDepositCanceledEvent",
        "SecureDepositFailedEvent",
        "SecureDepositInitiatedEvent",
        "SecureDepositProcessedEvent",
        "SecureDepositProcessingEvent",
        "SecureDepositReturnedEvent",
        "SecureDepositTransferEvent",
        "SecuredDepositCommercialCreditCardFinancialAccountStatement",
        "SigningKey",
        "StreetAddressSpendRule",
        "Transfer",
        "TransferPurposeInterFinancialAccountTransferRule",
        "USAccountHolderApplicationDocumentUploadSession",
        "USBusinessAccountHolder",
        "USPersonAccountHolder",
        "USPersonAuthorizedUser",
        "User",
        "ValidatedAddress",
        "VelocityInterFinancialAccountTransferRule",
        "VelocityRule",
        "VerificationEvent",
        "VirtualCardProfile",
        "VisaFleetAuthorizationData",
        "VisaFleetL2TransactionData",
        "VisaFleetL3EnhancedData",
        "WatchlistInterFinancialAccountTransferRule",
        "WebhookNotificationTarget",
        "WireTransfer",
    ] = Field(alias="__typename")


class FindFinancialAccountNodeFinancialAccount(BaseModel):
    typename__: Literal["FinancialAccount"] = Field(alias="__typename")
    typename__: Literal["FinancialAccount"] = Field(alias="__typename")
    id: str
    financial_account_activities: Optional[
        "FindFinancialAccountNodeFinancialAccountFinancialAccountActivities"
    ] = Field(alias="financialAccountActivities")


class FindFinancialAccountNodeFinancialAccountFinancialAccountActivities(BaseModel):
    page_info: (
        "FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesPageInfo"
    ) = Field(alias="pageInfo")
    edges: Optional[
        List["FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdges"]
    ]


class FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesPageInfo(
    BaseModel
):
    has_next_page: bool = Field(alias="hasNextPage")
    has_previous_page: bool = Field(alias="hasPreviousPage")
    start_cursor: str = Field(alias="startCursor")
    end_cursor: str = Field(alias="endCursor")


class FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdges(
    BaseModel
):
    cursor: str
    node: Optional[
        "FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNode"
    ]


class FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNode(
    BaseModel
):
    typename__: Literal["FinancialAccountActivity"] = Field(alias="__typename")
    sign: Optional[FinancialAccountActivitySign]
    is_complete: Optional[bool] = Field(alias="isComplete")
    pending_amount: Optional[
        "FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodePendingAmount"
    ] = Field(alias="pendingAmount")
    posted_amount: Optional[
        "FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodePostedAmount"
    ] = Field(alias="postedAmount")
    created_at: Optional[str] = Field(alias="createdAt")
    source: Optional[
        Annotated[
            Union[
                "FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceDebitTransaction",
                "FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceCreditTransaction",
                "FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourcePayrollTransfer",
                "FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceCreditFunds",
                "FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceDebitFunds",
                "FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceSecureDeposit",
                "FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceSecureDepositACHTransfer",
                "FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceSecureCardBalanceRepaymentACHTransfer",
                "FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceIntegratorInitiatedFundsWithdrawalACHTransfer",
                "FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceIntegratorInitiatedFundsDepositACHTransfer",
                "FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceFeeTransferEvent",
                "FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceInterFinancialAccountTransfer",
            ],
            Field(discriminator="typename__"),
        ]
    ]


class FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodePendingAmount(
    BaseModel
):
    value: Optional[Any]
    currency_code: Optional[str] = Field(alias="currencyCode")


class FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodePostedAmount(
    BaseModel
):
    value: Optional[Any]
    currency_code: Optional[str] = Field(alias="currencyCode")


class FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceDebitTransaction(
    BaseModel
):
    typename__: Literal["DebitTransaction"] = Field(alias="__typename")
    id: str
    transaction_events: Optional[
        List[
            Annotated[
                Union[
                    "FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceDebitTransactionTransactionEventsTransactionEvent",
                    "FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceDebitTransactionTransactionEventsAuthorizationAndClearEvent",
                    "FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceDebitTransactionTransactionEventsAuthorizationEvent",
                    "FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceDebitTransactionTransactionEventsBalanceInquiryEvent",
                    "FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceDebitTransactionTransactionEventsClearingEvent",
                    "FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceDebitTransactionTransactionEventsIssuerPreliminaryAuthorizationEvent",
                    "FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceDebitTransactionTransactionEventsNode",
                    "FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceDebitTransactionTransactionEventsReversalEvent",
                    "FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceDebitTransactionTransactionEventsVerificationEvent",
                ],
                Field(discriminator="typename__"),
            ]
        ]
    ] = Field(alias="transactionEvents")


class FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceDebitTransactionTransactionEventsTransactionEvent(
    BaseModel
):
    typename__: Literal["EnhancedDataEvent", "TransactionEvent"] = Field(
        alias="__typename"
    )


class FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceDebitTransactionTransactionEventsAuthorizationAndClearEvent(
    BaseModel
):
    typename__: Literal["AuthorizationAndClearEvent"] = Field(alias="__typename")
    id: str
    id: str
    response_code: Optional[TransactionEventResponseCode] = Field(alias="responseCode")
    postal_code_response_code: Optional[PostalCodeResponseCode] = Field(
        alias="postalCodeResponseCode"
    )
    cvv_response_code: Optional[CVVResponseCode] = Field(alias="cvvResponseCode")
    transaction_processing_type: Optional[CardTransactionProcessingType] = Field(
        alias="transactionProcessingType"
    )
    approved_amount: Optional[
        "FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceDebitTransactionTransactionEventsAuthorizationAndClearEventApprovedAmount"
    ] = Field(alias="approvedAmount")
    merchant_details: Optional[
        "FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceDebitTransactionTransactionEventsAuthorizationAndClearEventMerchantDetails"
    ] = Field(alias="merchantDetails")


class FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceDebitTransactionTransactionEventsAuthorizationAndClearEventApprovedAmount(
    BaseModel
):
    value: Optional[Any]
    currency_code: Optional[str] = Field(alias="currencyCode")


class FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceDebitTransactionTransactionEventsAuthorizationAndClearEventMerchantDetails(
    BaseModel
):
    country_code_alpha_3: Optional[ISO3166Alpha3Country] = Field(
        alias="countryCodeAlpha3"
    )
    category: Optional[MerchantCategory]
    name: Optional[str]
    description: Optional[str]
    merchant_id: Optional[str] = Field(alias="merchantId")
    category_code: Optional[str] = Field(alias="categoryCode")
    address: Optional[
        "FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceDebitTransactionTransactionEventsAuthorizationAndClearEventMerchantDetailsAddress"
    ]


class FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceDebitTransactionTransactionEventsAuthorizationAndClearEventMerchantDetailsAddress(
    BaseModel
):
    postal_code: Optional[str] = Field(alias="postalCode")
    street_address: Optional[str] = Field(alias="streetAddress")
    region: Optional[str]
    locality: Optional[str]
    country_code_alpha_3: Optional[str] = Field(alias="countryCodeAlpha3")


class FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceDebitTransactionTransactionEventsAuthorizationEvent(
    BaseModel
):
    typename__: Literal["AuthorizationEvent"] = Field(alias="__typename")
    id: str
    merchant_details: Optional[
        "FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceDebitTransactionTransactionEventsAuthorizationEventMerchantDetails"
    ] = Field(alias="merchantDetails")


class FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceDebitTransactionTransactionEventsAuthorizationEventMerchantDetails(
    BaseModel
):
    category: Optional[MerchantCategory]
    name: Optional[str]


class FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceDebitTransactionTransactionEventsBalanceInquiryEvent(
    BaseModel
):
    typename__: Literal["BalanceInquiryEvent"] = Field(alias="__typename")
    id: str
    merchant_details: Optional[
        "FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceDebitTransactionTransactionEventsBalanceInquiryEventMerchantDetails"
    ] = Field(alias="merchantDetails")


class FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceDebitTransactionTransactionEventsBalanceInquiryEventMerchantDetails(
    BaseModel
):
    category: Optional[MerchantCategory]
    name: Optional[str]


class FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceDebitTransactionTransactionEventsClearingEvent(
    BaseModel
):
    typename__: Literal["ClearingEvent"] = Field(alias="__typename")
    id: str
    merchant_details: Optional[
        "FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceDebitTransactionTransactionEventsClearingEventMerchantDetails"
    ] = Field(alias="merchantDetails")


class FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceDebitTransactionTransactionEventsClearingEventMerchantDetails(
    BaseModel
):
    category: Optional[MerchantCategory]
    name: Optional[str]


class FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceDebitTransactionTransactionEventsIssuerPreliminaryAuthorizationEvent(
    BaseModel
):
    typename__: Literal["IssuerPreliminaryAuthorizationEvent"] = Field(
        alias="__typename"
    )
    id: str
    merchant_details: Optional[
        "FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceDebitTransactionTransactionEventsIssuerPreliminaryAuthorizationEventMerchantDetails"
    ] = Field(alias="merchantDetails")


class FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceDebitTransactionTransactionEventsIssuerPreliminaryAuthorizationEventMerchantDetails(
    BaseModel
):
    category: Optional[MerchantCategory]
    name: Optional[str]


class FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceDebitTransactionTransactionEventsNode(
    BaseModel
):
    typename__: Literal["Node"] = Field(alias="__typename")
    id: str


class FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceDebitTransactionTransactionEventsReversalEvent(
    BaseModel
):
    typename__: Literal["ReversalEvent"] = Field(alias="__typename")
    id: str
    merchant_details: Optional[
        "FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceDebitTransactionTransactionEventsReversalEventMerchantDetails"
    ] = Field(alias="merchantDetails")


class FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceDebitTransactionTransactionEventsReversalEventMerchantDetails(
    BaseModel
):
    category: Optional[MerchantCategory]
    name: Optional[str]


class FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceDebitTransactionTransactionEventsVerificationEvent(
    BaseModel
):
    typename__: Literal["VerificationEvent"] = Field(alias="__typename")
    id: str
    merchant_details: Optional[
        "FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceDebitTransactionTransactionEventsVerificationEventMerchantDetails"
    ] = Field(alias="merchantDetails")


class FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceDebitTransactionTransactionEventsVerificationEventMerchantDetails(
    BaseModel
):
    category: Optional[MerchantCategory]
    name: Optional[str]


class FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceCreditTransaction(
    BaseModel
):
    typename__: Literal["CreditTransaction"] = Field(alias="__typename")
    id: str
    transaction_events: Optional[
        List[
            Annotated[
                Union[
                    "FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceCreditTransactionTransactionEventsTransactionEvent",
                    "FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceCreditTransactionTransactionEventsAuthorizationAndClearEvent",
                    "FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceCreditTransactionTransactionEventsAuthorizationEvent",
                    "FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceCreditTransactionTransactionEventsBalanceInquiryEvent",
                    "FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceCreditTransactionTransactionEventsClearingEvent",
                    "FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceCreditTransactionTransactionEventsIssuerPreliminaryAuthorizationEvent",
                    "FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceCreditTransactionTransactionEventsNode",
                    "FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceCreditTransactionTransactionEventsReversalEvent",
                    "FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceCreditTransactionTransactionEventsVerificationEvent",
                ],
                Field(discriminator="typename__"),
            ]
        ]
    ] = Field(alias="transactionEvents")


class FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceCreditTransactionTransactionEventsTransactionEvent(
    BaseModel
):
    typename__: Literal["EnhancedDataEvent", "TransactionEvent"] = Field(
        alias="__typename"
    )


class FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceCreditTransactionTransactionEventsAuthorizationAndClearEvent(
    BaseModel
):
    typename__: Literal["AuthorizationAndClearEvent"] = Field(alias="__typename")
    id: str
    id: str
    response_code: Optional[TransactionEventResponseCode] = Field(alias="responseCode")
    postal_code_response_code: Optional[PostalCodeResponseCode] = Field(
        alias="postalCodeResponseCode"
    )
    cvv_response_code: Optional[CVVResponseCode] = Field(alias="cvvResponseCode")
    merchant_details: Optional[
        "FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceCreditTransactionTransactionEventsAuthorizationAndClearEventMerchantDetails"
    ] = Field(alias="merchantDetails")
    point_of_service_details: Optional[
        "FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceCreditTransactionTransactionEventsAuthorizationAndClearEventPointOfServiceDetails"
    ] = Field(alias="pointOfServiceDetails")


class FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceCreditTransactionTransactionEventsAuthorizationAndClearEventMerchantDetails(
    BaseModel
):
    country_code_alpha_3: Optional[ISO3166Alpha3Country] = Field(
        alias="countryCodeAlpha3"
    )
    category: Optional[MerchantCategory]
    name: Optional[str]
    description: Optional[str]
    merchant_id: Optional[str] = Field(alias="merchantId")
    category_code: Optional[str] = Field(alias="categoryCode")
    address: Optional[
        "FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceCreditTransactionTransactionEventsAuthorizationAndClearEventMerchantDetailsAddress"
    ]


class FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceCreditTransactionTransactionEventsAuthorizationAndClearEventMerchantDetailsAddress(
    BaseModel
):
    postal_code: Optional[str] = Field(alias="postalCode")
    region: Optional[str]
    locality: Optional[str]
    country_code_alpha_3: Optional[str] = Field(alias="countryCodeAlpha3")


class FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceCreditTransactionTransactionEventsAuthorizationAndClearEventPointOfServiceDetails(
    BaseModel
):
    category: Optional[PointOfServiceCategory]
    card_data_input_capability: Optional[CardDataInputCapability] = Field(
        alias="cardDataInputCapability"
    )
    pan_entry_mode: Optional[PanEntryMode] = Field(alias="panEntryMode")
    pin_entry_mode: Optional[PinEntryMode] = Field(alias="pinEntryMode")
    terminal_attendance: Optional[TerminalAttendance] = Field(
        alias="terminalAttendance"
    )
    is_card_holder_present: Optional[bool] = Field(alias="isCardHolderPresent")
    is_card_present: Optional[bool] = Field(alias="isCardPresent")
    terminal_supports_partial_approval: Optional[bool] = Field(
        alias="terminalSupportsPartialApproval"
    )
    is_recurring: Optional[bool] = Field(alias="isRecurring")


class FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceCreditTransactionTransactionEventsAuthorizationEvent(
    BaseModel
):
    typename__: Literal["AuthorizationEvent"] = Field(alias="__typename")
    id: str
    merchant_details: Optional[
        "FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceCreditTransactionTransactionEventsAuthorizationEventMerchantDetails"
    ] = Field(alias="merchantDetails")


class FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceCreditTransactionTransactionEventsAuthorizationEventMerchantDetails(
    BaseModel
):
    category: Optional[MerchantCategory]
    name: Optional[str]


class FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceCreditTransactionTransactionEventsBalanceInquiryEvent(
    BaseModel
):
    typename__: Literal["BalanceInquiryEvent"] = Field(alias="__typename")
    id: str
    merchant_details: Optional[
        "FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceCreditTransactionTransactionEventsBalanceInquiryEventMerchantDetails"
    ] = Field(alias="merchantDetails")


class FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceCreditTransactionTransactionEventsBalanceInquiryEventMerchantDetails(
    BaseModel
):
    category: Optional[MerchantCategory]
    name: Optional[str]


class FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceCreditTransactionTransactionEventsClearingEvent(
    BaseModel
):
    typename__: Literal["ClearingEvent"] = Field(alias="__typename")
    id: str
    merchant_details: Optional[
        "FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceCreditTransactionTransactionEventsClearingEventMerchantDetails"
    ] = Field(alias="merchantDetails")


class FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceCreditTransactionTransactionEventsClearingEventMerchantDetails(
    BaseModel
):
    category: Optional[MerchantCategory]
    name: Optional[str]


class FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceCreditTransactionTransactionEventsIssuerPreliminaryAuthorizationEvent(
    BaseModel
):
    typename__: Literal["IssuerPreliminaryAuthorizationEvent"] = Field(
        alias="__typename"
    )
    id: str
    merchant_details: Optional[
        "FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceCreditTransactionTransactionEventsIssuerPreliminaryAuthorizationEventMerchantDetails"
    ] = Field(alias="merchantDetails")


class FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceCreditTransactionTransactionEventsIssuerPreliminaryAuthorizationEventMerchantDetails(
    BaseModel
):
    category: Optional[MerchantCategory]
    name: Optional[str]


class FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceCreditTransactionTransactionEventsNode(
    BaseModel
):
    typename__: Literal["Node"] = Field(alias="__typename")
    id: str


class FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceCreditTransactionTransactionEventsReversalEvent(
    BaseModel
):
    typename__: Literal["ReversalEvent"] = Field(alias="__typename")
    id: str
    merchant_details: Optional[
        "FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceCreditTransactionTransactionEventsReversalEventMerchantDetails"
    ] = Field(alias="merchantDetails")


class FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceCreditTransactionTransactionEventsReversalEventMerchantDetails(
    BaseModel
):
    category: Optional[MerchantCategory]
    name: Optional[str]


class FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceCreditTransactionTransactionEventsVerificationEvent(
    BaseModel
):
    typename__: Literal["VerificationEvent"] = Field(alias="__typename")
    id: str
    merchant_details: Optional[
        "FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceCreditTransactionTransactionEventsVerificationEventMerchantDetails"
    ] = Field(alias="merchantDetails")


class FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceCreditTransactionTransactionEventsVerificationEventMerchantDetails(
    BaseModel
):
    category: Optional[MerchantCategory]
    name: Optional[str]


class FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourcePayrollTransfer(
    BaseModel
):
    typename__: Literal["PayrollTransfer"] = Field(alias="__typename")


class FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceCreditFunds(
    BaseModel
):
    typename__: Literal["CreditFunds"] = Field(alias="__typename")


class FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceDebitFunds(
    BaseModel
):
    typename__: Literal["DebitFunds"] = Field(alias="__typename")


class FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceSecureDeposit(
    BaseModel
):
    typename__: Literal["SecureDeposit"] = Field(alias="__typename")


class FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceSecureDepositACHTransfer(
    BaseModel
):
    typename__: Literal["SecureDepositACHTransfer"] = Field(alias="__typename")


class FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceSecureCardBalanceRepaymentACHTransfer(
    BaseModel
):
    typename__: Literal["SecureCardBalanceRepaymentACHTransfer"] = Field(
        alias="__typename"
    )


class FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceIntegratorInitiatedFundsWithdrawalACHTransfer(
    BaseModel
):
    typename__: Literal["IntegratorInitiatedFundsWithdrawalACHTransfer"] = Field(
        alias="__typename"
    )


class FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceIntegratorInitiatedFundsDepositACHTransfer(
    BaseModel
):
    typename__: Literal["IntegratorInitiatedFundsDepositACHTransfer"] = Field(
        alias="__typename"
    )


class FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceFeeTransferEvent(
    BaseModel
):
    typename__: Literal["FeeTransferEvent"] = Field(alias="__typename")


class FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceInterFinancialAccountTransfer(
    BaseModel
):
    typename__: Literal["InterFinancialAccountTransfer"] = Field(alias="__typename")


FindFinancialAccount.model_rebuild()
FindFinancialAccountNodeFinancialAccount.model_rebuild()
FindFinancialAccountNodeFinancialAccountFinancialAccountActivities.model_rebuild()
FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdges.model_rebuild()
FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNode.model_rebuild()
FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceDebitTransaction.model_rebuild()
FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceDebitTransactionTransactionEventsAuthorizationAndClearEvent.model_rebuild()
FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceDebitTransactionTransactionEventsAuthorizationAndClearEventMerchantDetails.model_rebuild()
FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceDebitTransactionTransactionEventsAuthorizationEvent.model_rebuild()
FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceDebitTransactionTransactionEventsBalanceInquiryEvent.model_rebuild()
FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceDebitTransactionTransactionEventsClearingEvent.model_rebuild()
FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceDebitTransactionTransactionEventsIssuerPreliminaryAuthorizationEvent.model_rebuild()
FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceDebitTransactionTransactionEventsReversalEvent.model_rebuild()
FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceDebitTransactionTransactionEventsVerificationEvent.model_rebuild()
FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceCreditTransaction.model_rebuild()
FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceCreditTransactionTransactionEventsAuthorizationAndClearEvent.model_rebuild()
FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceCreditTransactionTransactionEventsAuthorizationAndClearEventMerchantDetails.model_rebuild()
FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceCreditTransactionTransactionEventsAuthorizationEvent.model_rebuild()
FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceCreditTransactionTransactionEventsBalanceInquiryEvent.model_rebuild()
FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceCreditTransactionTransactionEventsClearingEvent.model_rebuild()
FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceCreditTransactionTransactionEventsIssuerPreliminaryAuthorizationEvent.model_rebuild()
FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceCreditTransactionTransactionEventsReversalEvent.model_rebuild()
FindFinancialAccountNodeFinancialAccountFinancialAccountActivitiesEdgesNodeSourceCreditTransactionTransactionEventsVerificationEvent.model_rebuild()
