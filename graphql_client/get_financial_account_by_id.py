# Generated by ariadne-codegen
# Source: queries.gql

from typing import Annotated, Any, List, Literal, Optional, Union

from pydantic import Field

from .base_model import BaseModel
from .enums import BankName, LedgerName, NormalBalance


class GetFinancialAccountByID(BaseModel):
    node: Optional[
        Annotated[
            Union[
                "GetFinancialAccountByIDNodeNode",
                "GetFinancialAccountByIDNodeFinancialAccount",
            ],
            Field(discriminator="typename__"),
        ]
    ]


class GetFinancialAccountByIDNodeNode(BaseModel):
    typename__: Literal[
        "APIKey",
        "AccountHolderApplicationDocument",
        "AccountHolderCardProductApplication",
        "AccountHolderCardProductApplicationOffer",
        "AccountHolderProvisioning",
        "AccountHolderProvisioningWorkflowAction",
        "AccountStatusActiveEvent",
        "AccountStatusClosedEvent",
        "AccountStatusPendingClosureEvent",
        "AccountStatusSuspendedEvent",
        "AccountStatusUnderReviewEvent",
        "AchExternallyInitatedDepositFailedEvent",
        "AchExternallyInitatedDepositProcessedEvent",
        "AchExternallyInitatedDepositReceivedEvent",
        "AchExternallyInitiatedWithdrawalFailedEvent",
        "AchExternallyInitiatedWithdrawalProcessedEvent",
        "AchExternallyInitiatedWithdrawalReceivedEvent",
        "AchHoldAddedEvent",
        "AchHoldRemovedEvent",
        "AchTransferHoldAddedEvent",
        "AchTransferHoldRemovedEvent",
        "AdminAgentOrganization",
        "AmountLimitInterFinancialAccountTransferRule",
        "AmountLimitSpendRule",
        "AuthorizationAndClearEvent",
        "AuthorizationEvent",
        "AuthorizedUserCardProductApplication",
        "BalanceInquiryEvent",
        "CVVSpendRule",
        "CardArtDocument",
        "CardDataInputCapabilitySpendRule",
        "CardDigitalWalletToken",
        "CardDigitalWalletTokenActivatedEvent",
        "CardDigitalWalletTokenSuspendedEvent",
        "CardDigitalWalletTokenTerminatedEvent",
        "CardProduct",
        "CardProfileDocumentUploadSession",
        "CardProfileSet",
        "CardProfileSetRestricted",
        "CardTransactionProcessingTypeConditionSpendRule",
        "ClearingEvent",
        "CollaborativeAuthorizationEndpoint",
        "CommercialChargeCardFinancialAccountStatement",
        "CommercialRevolvingCardFinancialAccountStatement",
        "ConditionalRuleSetSpendRule",
        "ConsumerChargeCardFinancialAccountStatement",
        "ConsumerRevolvingCardFinancialAccountStatement",
        "CountLimitInterFinancialAccountTransferRule",
        "CountLimitSpendRule",
        "CreditCardTransferEvent",
        "CreditFunds",
        "CreditFundsACHTransferEvent",
        "CreditLedgerEntry",
        "CreditLimitChangeRequest",
        "CreditPayInFullCardFinancialAccountStatement",
        "CreditPlan",
        "CreditPlanTemplate",
        "CreditTransaction",
        "DebitFunds",
        "DebitFundsACHTransferEvent",
        "DebitLedgerEntry",
        "DebitTransaction",
        "DeliveryAttempt",
        "DepositAmountLimitSpendRule",
        "DepositCountLimitSpendRule",
        "DepositProcessingNetworkSpendRule",
        "DigitalCardProfile",
        "DirectDepositDetail",
        "DisbursementTransferEvent",
        "DocumentUploadLink",
        "EmployerFinancialAccount",
        "EnhancedDataEvent",
        "ExternalBankAccountAddedEvent",
        "ExternalBankAccountDetail",
        "ExternalBankAccountRemovedEvent",
        "ExternalFinancialBankAccount",
        "ExternallyInitiatedAchReleaseHoldTransfer",
        "ExternallyInitiatedWireTransfer",
        "FeeChargeRule",
        "FeeSchedule",
        "FeeTransferEvent",
        "FinancialAccountCreditLimitUpdateFromProductFunding",
        "FinancialAccountPseudoBalanceUpdate",
        "FinancialAccountSnapshot",
        "FinancialAccountStatementReadyEvent",
        "FundsDepositCanceledEvent",
        "FundsDepositFailedEvent",
        "FundsDepositInitiatedEvent",
        "FundsDepositProcessedEvent",
        "FundsDepositProcessingEvent",
        "FundsDepositReturnedEvent",
        "FundsWithdrawalCanceledEvent",
        "FundsWithdrawalFailedEvent",
        "FundsWithdrawalInitiatedEvent",
        "FundsWithdrawalProcessedEvent",
        "FundsWithdrawalProcessingEvent",
        "FundsWithdrawalReturnedEvent",
        "IdentityVerificationDocumentUploadSession",
        "IntegratorInitiatedFundsDepositACHTransfer",
        "IntegratorInitiatedFundsDepositACHTransferEvent",
        "IntegratorInitiatedFundsWithdrawalACHTransfer",
        "IntegratorInitiatedFundsWithdrawalACHTransferEvent",
        "InterFinancialAccountTransfer",
        "InternalTransferFromFundingFinancialAccountToPaymentCardFinancialAccountCompletedEvent",
        "InternalTransferFromFundingFinancialAccountToPaymentCardFinancialAccountFailedEvent",
        "InternalTransferFromFundingFinancialAccountToPaymentCardFinancialAccountPendingEvent",
        "InternalTransferFromPaymentCardFinancialAccountToFundingFinancialAccountCompletedEvent",
        "InternalTransferFromPaymentCardFinancialAccountToFundingFinancialAccountFailedEvent",
        "InternalTransferFromPaymentCardFinancialAccountToFundingFinancialAccountPendingEvent",
        "IssuerPreliminaryAuthorizationEvent",
        "JournalEntry",
        "Ledger",
        "ManualAdjustmentEvent",
        "MastercardFleetAuthorizationData",
        "MastercardFleetEnhancedData",
        "MerchantCategorySpendRule",
        "MerchantCountrySpendRule",
        "MerchantIdentifierSpendRule",
        "Node",
        "NonOriginatedAchTransfer",
        "NonOriginatedAchTransferFailedEvent",
        "NonOriginatedAchTransferProcessedEvent",
        "NonOriginatedAchTransferReceivedEvent",
        "NonOriginatedAchTransferReturnedEvent",
        "NonVerifiedExternalUSFinancialBankAccount",
        "NonVerifiedExternalUSFinancialBankAccountDetail",
        "NotificationEvent",
        "OnboardingBusinessOrganizationInformation",
        "OnboardingPreliminaryBusinessInformation",
        "OneTimeACHTransfer",
        "Organization",
        "OriginatedAchTransfer",
        "OriginatedAchTransferCanceledEvent",
        "OriginatedAchTransferFailedEvent",
        "OriginatedAchTransferInitiatedEvent",
        "OriginatedAchTransferPendingEvent",
        "OriginatedAchTransferProcessedEvent",
        "OriginatedAchTransferProcessingEvent",
        "OriginatedAchTransferReturnedEvent",
        "PanEntryModeSpendRule",
        "PaymentCard",
        "PaymentCardActivatedEvent",
        "PaymentCardAuthorizationAndClearApprovedEvent",
        "PaymentCardAuthorizationAndClearDeclinedEvent",
        "PaymentCardAuthorizationApprovedEvent",
        "PaymentCardAuthorizationCreatedEvent",
        "PaymentCardAuthorizationDeclinedEvent",
        "PaymentCardAuthorizationReversedEvent",
        "PaymentCardBinRange",
        "PaymentCardClearedEvent",
        "PaymentCardClosedEvent",
        "PaymentCardEnhancedDataEvent",
        "PaymentCardSnapshot",
        "PaymentCardSuspendedEvent",
        "PaymentCardTransactionChargeback",
        "PaymentCardTransactionDispute",
        "PaymentCardUnsuspendedEvent",
        "PaymentCardVerificationApprovedEvent",
        "PaymentCardVerificationDeclinedEvent",
        "PaymentCreditTransaction",
        "PaymentDebitTransaction",
        "PaymentMethodToken",
        "PaymentOrder",
        "PayrollACHTransferEvent",
        "PayrollAdvance",
        "PayrollAdvanceRepaymentCompletedEvent",
        "PayrollAdvanceRepaymentTransfer",
        "PayrollAdvanceWriteOffCompletedEvent",
        "PayrollAdvanceWriteoffTransfer",
        "PayrollTransfer",
        "PhysicalCardGroupOrder",
        "PhysicalCardProfile",
        "PhysicalPaymentCardGroupOrderShipFailedEvent",
        "PhysicalPaymentCardGroupOrderShippedEvent",
        "PhysicalPaymentCardOrder",
        "PhysicalPaymentCardShipFailedEvent",
        "PhysicalPaymentCardShippedEvent",
        "PointOfServiceCategorySpendRule",
        "PostalCodeVerificationSpendRule",
        "RecurringACHTransfer",
        "RepaymentFailedEvent",
        "RepaymentProcessedEvent",
        "RepaymentProcessingEvent",
        "RepaymentReturnedEvent",
        "Report",
        "RequestedIdentityUpdate",
        "RestrictedAccountHolderSpendRule",
        "ReversalEvent",
        "RewardDefaultEarnRule",
        "RewardMerchantCategoryEarnRule",
        "RewardPointsTransfer",
        "RewardRedemptionConfiguration",
        "RiskApplicationSDK",
        "RiskApplicationSDKRevision",
        "RuleCollection",
        "ScheduledTransferAchEvent",
        "SecureCardBalanceRepaymentACHTransfer",
        "SecureCardBalanceRepaymentACHTransferEvent",
        "SecureDeposit",
        "SecureDepositACHTransfer",
        "SecureDepositACHTransferEvent",
        "SecureDepositCanceledEvent",
        "SecureDepositFailedEvent",
        "SecureDepositInitiatedEvent",
        "SecureDepositProcessedEvent",
        "SecureDepositProcessingEvent",
        "SecureDepositReturnedEvent",
        "SecureDepositTransferEvent",
        "SecuredDepositCommercialCreditCardFinancialAccountStatement",
        "SigningKey",
        "StreetAddressSpendRule",
        "Transfer",
        "TransferPurposeInterFinancialAccountTransferRule",
        "USAccountHolderApplicationDocumentUploadSession",
        "USBusinessAccountHolder",
        "USPersonAccountHolder",
        "USPersonAuthorizedUser",
        "User",
        "ValidatedAddress",
        "VelocityInterFinancialAccountTransferRule",
        "VelocityRule",
        "VerificationEvent",
        "VirtualCardProfile",
        "VisaFleetAuthorizationData",
        "VisaFleetL2TransactionData",
        "VisaFleetL3EnhancedData",
        "WatchlistInterFinancialAccountTransferRule",
        "WebhookNotificationTarget",
        "WireTransfer",
    ] = Field(alias="__typename")


class GetFinancialAccountByIDNodeFinancialAccount(BaseModel):
    typename__: Literal["FinancialAccount"] = Field(alias="__typename")
    typename__: Literal["FinancialAccount"] = Field(alias="__typename")
    id: str
    created_at: Optional[str] = Field(alias="createdAt")
    name: Optional[str]
    owner: Optional[
        Annotated[
            Union[
                "GetFinancialAccountByIDNodeFinancialAccountOwnerOrganization",
                "GetFinancialAccountByIDNodeFinancialAccountOwnerPaymentCard",
                "GetFinancialAccountByIDNodeFinancialAccountOwnerUSPersonAccountHolder",
                "GetFinancialAccountByIDNodeFinancialAccountOwnerUSBusinessAccountHolder",
            ],
            Field(discriminator="typename__"),
        ]
    ]
    card_product: Optional["GetFinancialAccountByIDNodeFinancialAccountCardProduct"] = (
        Field(alias="cardProduct")
    )
    ledgers: Optional[List["GetFinancialAccountByIDNodeFinancialAccountLedgers"]]
    features: Optional[List["GetFinancialAccountByIDNodeFinancialAccountFeatures"]]
    direct_deposit_details: Optional[
        "GetFinancialAccountByIDNodeFinancialAccountDirectDepositDetails"
    ] = Field(alias="directDepositDetails")


class GetFinancialAccountByIDNodeFinancialAccountOwnerOrganization(BaseModel):
    typename__: Literal["Organization"] = Field(alias="__typename")


class GetFinancialAccountByIDNodeFinancialAccountOwnerPaymentCard(BaseModel):
    typename__: Literal["PaymentCard"] = Field(alias="__typename")


class GetFinancialAccountByIDNodeFinancialAccountOwnerUSPersonAccountHolder(BaseModel):
    typename__: Literal["USPersonAccountHolder"] = Field(alias="__typename")


class GetFinancialAccountByIDNodeFinancialAccountOwnerUSBusinessAccountHolder(
    BaseModel
):
    typename__: Literal["USBusinessAccountHolder"] = Field(alias="__typename")


class GetFinancialAccountByIDNodeFinancialAccountCardProduct(BaseModel):
    id: str


class GetFinancialAccountByIDNodeFinancialAccountLedgers(BaseModel):
    id: str
    name: Optional[LedgerName]
    normal_balance: Optional[NormalBalance] = Field(alias="normalBalance")
    credit_balance: Optional[
        "GetFinancialAccountByIDNodeFinancialAccountLedgersCreditBalance"
    ] = Field(alias="creditBalance")
    debit_balance: Optional[
        "GetFinancialAccountByIDNodeFinancialAccountLedgersDebitBalance"
    ] = Field(alias="debitBalance")
    ledger_entries: Optional[
        "GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntries"
    ] = Field(alias="ledgerEntries")


class GetFinancialAccountByIDNodeFinancialAccountLedgersCreditBalance(BaseModel):
    value: Optional[Any]


class GetFinancialAccountByIDNodeFinancialAccountLedgersDebitBalance(BaseModel):
    value: Optional[Any]


class GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntries(BaseModel):
    edges: Optional[
        List["GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdges"]
    ]


class GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdges(BaseModel):
    node: Optional[
        "GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNode"
    ]


class GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNode(
    BaseModel
):
    typename__: Literal["CreditLedgerEntry", "DebitLedgerEntry", "LedgerEntry"] = Field(
        alias="__typename"
    )
    id: str
    created_at: Optional[str] = Field(alias="createdAt")
    amount: Optional[
        "GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeAmount"
    ]
    financial_event: Optional[
        Annotated[
            Union[
                "GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeFinancialEventAuthorizationEvent",
                "GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeFinancialEventClearingEvent",
                "GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeFinancialEventReversalEvent",
                "GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeFinancialEventTransfer",
                "GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeFinancialEventAuthorizationAndClearEvent",
                "GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeFinancialEventRewardPointsTransfer",
                "GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeFinancialEventCreditFundsACHTransferEvent",
                "GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeFinancialEventDebitFundsACHTransferEvent",
                "GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeFinancialEventFeeTransferEvent",
                "GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeFinancialEventPayrollACHTransferEvent",
                "GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeFinancialEventSecureDepositTransferEvent",
                "GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeFinancialEventSecureDepositACHTransferEvent",
                "GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeFinancialEventSecureCardBalanceRepaymentACHTransferEvent",
                "GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeFinancialEventIntegratorInitiatedFundsWithdrawalACHTransferEvent",
                "GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeFinancialEventIntegratorInitiatedFundsDepositACHTransferEvent",
                "GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeFinancialEventFinancialAccountCreditLimitUpdateFromProductFunding",
                "GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeFinancialEventInterFinancialAccountTransfer",
                "GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeFinancialEventExternallyInitiatedAchReleaseHoldTransfer",
                "GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeFinancialEventPayrollAdvanceWriteoffTransfer",
                "GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeFinancialEventPayrollAdvanceRepaymentTransfer",
                "GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeFinancialEventIssuerPreliminaryAuthorizationEvent",
                "GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeFinancialEventFinancialAccountPseudoBalanceUpdate",
                "GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeFinancialEventManualAdjustmentEvent",
                "GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeFinancialEventCreditCardTransferEvent",
                "GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeFinancialEventDisbursementTransferEvent",
                "GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeFinancialEventWireTransfer",
            ],
            Field(discriminator="typename__"),
        ]
    ] = Field(alias="financialEvent")


class GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeAmount(
    BaseModel
):
    value: Optional[Any]
    currency_code: Optional[str] = Field(alias="currencyCode")


class GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeFinancialEventAuthorizationEvent(
    BaseModel
):
    typename__: Literal["AuthorizationEvent"] = Field(alias="__typename")


class GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeFinancialEventClearingEvent(
    BaseModel
):
    typename__: Literal["ClearingEvent"] = Field(alias="__typename")


class GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeFinancialEventReversalEvent(
    BaseModel
):
    typename__: Literal["ReversalEvent"] = Field(alias="__typename")


class GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeFinancialEventTransfer(
    BaseModel
):
    typename__: Literal["Transfer"] = Field(alias="__typename")
    amount: Optional[
        "GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeFinancialEventTransferAmount"
    ]


class GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeFinancialEventTransferAmount(
    BaseModel
):
    value: Optional[Any]


class GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeFinancialEventAuthorizationAndClearEvent(
    BaseModel
):
    typename__: Literal["AuthorizationAndClearEvent"] = Field(alias="__typename")


class GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeFinancialEventRewardPointsTransfer(
    BaseModel
):
    typename__: Literal["RewardPointsTransfer"] = Field(alias="__typename")


class GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeFinancialEventCreditFundsACHTransferEvent(
    BaseModel
):
    typename__: Literal["CreditFundsACHTransferEvent"] = Field(alias="__typename")


class GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeFinancialEventDebitFundsACHTransferEvent(
    BaseModel
):
    typename__: Literal["DebitFundsACHTransferEvent"] = Field(alias="__typename")


class GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeFinancialEventFeeTransferEvent(
    BaseModel
):
    typename__: Literal["FeeTransferEvent"] = Field(alias="__typename")


class GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeFinancialEventPayrollACHTransferEvent(
    BaseModel
):
    typename__: Literal["PayrollACHTransferEvent"] = Field(alias="__typename")


class GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeFinancialEventSecureDepositTransferEvent(
    BaseModel
):
    typename__: Literal["SecureDepositTransferEvent"] = Field(alias="__typename")


class GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeFinancialEventSecureDepositACHTransferEvent(
    BaseModel
):
    typename__: Literal["SecureDepositACHTransferEvent"] = Field(alias="__typename")


class GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeFinancialEventSecureCardBalanceRepaymentACHTransferEvent(
    BaseModel
):
    typename__: Literal["SecureCardBalanceRepaymentACHTransferEvent"] = Field(
        alias="__typename"
    )


class GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeFinancialEventIntegratorInitiatedFundsWithdrawalACHTransferEvent(
    BaseModel
):
    typename__: Literal["IntegratorInitiatedFundsWithdrawalACHTransferEvent"] = Field(
        alias="__typename"
    )


class GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeFinancialEventIntegratorInitiatedFundsDepositACHTransferEvent(
    BaseModel
):
    typename__: Literal["IntegratorInitiatedFundsDepositACHTransferEvent"] = Field(
        alias="__typename"
    )


class GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeFinancialEventFinancialAccountCreditLimitUpdateFromProductFunding(
    BaseModel
):
    typename__: Literal["FinancialAccountCreditLimitUpdateFromProductFunding"] = Field(
        alias="__typename"
    )


class GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeFinancialEventInterFinancialAccountTransfer(
    BaseModel
):
    typename__: Literal["InterFinancialAccountTransfer"] = Field(alias="__typename")


class GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeFinancialEventExternallyInitiatedAchReleaseHoldTransfer(
    BaseModel
):
    typename__: Literal["ExternallyInitiatedAchReleaseHoldTransfer"] = Field(
        alias="__typename"
    )


class GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeFinancialEventPayrollAdvanceWriteoffTransfer(
    BaseModel
):
    typename__: Literal["PayrollAdvanceWriteoffTransfer"] = Field(alias="__typename")


class GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeFinancialEventPayrollAdvanceRepaymentTransfer(
    BaseModel
):
    typename__: Literal["PayrollAdvanceRepaymentTransfer"] = Field(alias="__typename")


class GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeFinancialEventIssuerPreliminaryAuthorizationEvent(
    BaseModel
):
    typename__: Literal["IssuerPreliminaryAuthorizationEvent"] = Field(
        alias="__typename"
    )


class GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeFinancialEventFinancialAccountPseudoBalanceUpdate(
    BaseModel
):
    typename__: Literal["FinancialAccountPseudoBalanceUpdate"] = Field(
        alias="__typename"
    )


class GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeFinancialEventManualAdjustmentEvent(
    BaseModel
):
    typename__: Literal["ManualAdjustmentEvent"] = Field(alias="__typename")


class GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeFinancialEventCreditCardTransferEvent(
    BaseModel
):
    typename__: Literal["CreditCardTransferEvent"] = Field(alias="__typename")


class GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeFinancialEventDisbursementTransferEvent(
    BaseModel
):
    typename__: Literal["DisbursementTransferEvent"] = Field(alias="__typename")


class GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeFinancialEventWireTransfer(
    BaseModel
):
    typename__: Literal["WireTransfer"] = Field(alias="__typename")


class GetFinancialAccountByIDNodeFinancialAccountFeatures(BaseModel):
    typename__: Literal[
        "AchCapableFinancialAccountFeature",
        "CardFundingFinancialAccountFeature",
        "CommercialCreditPayInFullCardAccountFeature",
        "CreditCardAccountFeature",
        "CreditPaymentCardFinancialAccountFeature",
        "DebitPaymentCardFinancialAccountFeature",
        "DirectDepositFinancialAccountFeature",
        "FinancialAccountFeature",
        "FleetCardAccountFeature",
        "IncomeAccountFinancialAccountFeature",
        "JustInTimeFundingFinancialAccountFeature",
        "MerchantSettlementFinancialAccountFeature",
        "NegativeBalanceReserveFinancialAccountFeature",
        "NonVerifiedFinancialAccountFeature",
        "OnDemandFundingFinancialAccountFeature",
        "PartialFundingFinancialAccountFeature",
        "PayrollAdvanceFinancialAccountFeature",
        "PayrollEmployerAdvanceFinancialAccountFeature",
        "PointRewardFinancialAccountFeature",
        "PrePaidPaymentCardFinancialAccountFeature",
        "PreprintedCardFinancialAccountFeature",
        "ProductFundingFinancialAccountFeature",
        "ProductReserveFinancialAccountFeature",
        "ProductSecuredDepositFinancialAccountFeature",
        "RepaymentFinancialAccountFeature",
        "SecuredCreditPaymentCardFinancialAccountFeature",
        "SecuredDepositFinancialAccountFeature",
        "VendorProvidedBankFinancialAccountFeature",
    ] = Field(alias="__typename")
    enabled: Optional[bool]
    created_at: Optional[str] = Field(alias="createdAt")
    updated_at: Optional[str] = Field(alias="updatedAt")


class GetFinancialAccountByIDNodeFinancialAccountDirectDepositDetails(BaseModel):
    id: str
    restricted_details: Optional[
        Annotated[
            Union[
                "GetFinancialAccountByIDNodeFinancialAccountDirectDepositDetailsRestrictedDetailsDirectDepositDetailRestrictedDetails",
                "GetFinancialAccountByIDNodeFinancialAccountDirectDepositDetailsRestrictedDetailsAccessDeniedError",
            ],
            Field(discriminator="typename__"),
        ]
    ] = Field(alias="restrictedDetails")


class GetFinancialAccountByIDNodeFinancialAccountDirectDepositDetailsRestrictedDetailsDirectDepositDetailRestrictedDetails(
    BaseModel
):
    typename__: Literal["DirectDepositDetailRestrictedDetails"] = Field(
        alias="__typename"
    )
    number: Optional[str]
    routing_number: Optional[str] = Field(alias="routingNumber")
    bank: Optional[
        "GetFinancialAccountByIDNodeFinancialAccountDirectDepositDetailsRestrictedDetailsDirectDepositDetailRestrictedDetailsBank"
    ]


class GetFinancialAccountByIDNodeFinancialAccountDirectDepositDetailsRestrictedDetailsDirectDepositDetailRestrictedDetailsBank(
    BaseModel
):
    name: Optional[BankName]
    address: Optional[
        "GetFinancialAccountByIDNodeFinancialAccountDirectDepositDetailsRestrictedDetailsDirectDepositDetailRestrictedDetailsBankAddress"
    ]


class GetFinancialAccountByIDNodeFinancialAccountDirectDepositDetailsRestrictedDetailsDirectDepositDetailRestrictedDetailsBankAddress(
    BaseModel
):
    street_address: Optional[str] = Field(alias="streetAddress")
    postal_code: Optional[str] = Field(alias="postalCode")


class GetFinancialAccountByIDNodeFinancialAccountDirectDepositDetailsRestrictedDetailsAccessDeniedError(
    BaseModel
):
    typename__: Literal["AccessDeniedError"] = Field(alias="__typename")
    message: str


GetFinancialAccountByID.model_rebuild()
GetFinancialAccountByIDNodeFinancialAccount.model_rebuild()
GetFinancialAccountByIDNodeFinancialAccountLedgers.model_rebuild()
GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntries.model_rebuild()
GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdges.model_rebuild()
GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNode.model_rebuild()
GetFinancialAccountByIDNodeFinancialAccountLedgersLedgerEntriesEdgesNodeFinancialEventTransfer.model_rebuild()
GetFinancialAccountByIDNodeFinancialAccountDirectDepositDetails.model_rebuild()
GetFinancialAccountByIDNodeFinancialAccountDirectDepositDetailsRestrictedDetailsDirectDepositDetailRestrictedDetails.model_rebuild()
GetFinancialAccountByIDNodeFinancialAccountDirectDepositDetailsRestrictedDetailsDirectDepositDetailRestrictedDetailsBank.model_rebuild()
