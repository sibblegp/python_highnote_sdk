# Generated by ariadne-codegen
# Source: https://api.us.test.highnote.com/graphql

from typing import Any, List, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import (
    AccountHolderApplicationStatusCode,
    AccountHolderVerificationStatusReasonCode,
    AchHoldStatus,
    AchTransferPurpose,
    AchTransferSign,
    AchTransferStatusFailureReason,
    AchTransferType,
    AcquiringPaymentInitiator,
    AdverseActionCodeInput,
    ApplicationDocumentReviewReason,
    ApplicationDocumentUploadStatus,
    ATMLocationFeature,
    AVSResponseCode,
    BankAccountType,
    BusinessAccountHolderClientTokenPermission,
    BusinessStructure,
    BusinessTitle,
    CardDataInputCapability,
    CardFormFactor,
    CardProductApplicationOfferStatus,
    CardProductVertical,
    CardProfileSetStatus,
    CardTransactionProcessingType,
    CardUsage,
    CreateScheduledTransferClientTokenPermission,
    CreditCardProductFeature,
    CreditLimitChangeRequestor,
    CreditLimitChangeRequestType,
    CVVResponseCode,
    DepositProcessingNetwork,
    DirectDepositDetailClientTokenPermission,
    DistanceUnit,
    DocumentType,
    DocumentUploadClientTokenPermission,
    ElectronicFundTransferSource,
    EmploymentStatus,
    ExternalBankAccountDetailClientTokenPermission,
    ExternallyInitiatedACHHoldStatus,
    ExternallyInitiatedACHStatus,
    ExternallyInitiatedACHStatusReasonCode,
    ExternallyInitiatedTransferType,
    FeeTransferEventFeeActivityTypeInput,
    FinancialAccountActivityType,
    FinancialAccountFeatureType,
    FinancialAccountSuspensionReasonInput,
    FinicityProductType,
    GenerateFinancialAccountSingleUseClientTokenPermission,
    GeneratePaymentMethodTokenizationClientTokenPermission,
    GlobalNoteAggregateEntityType,
    GlobalNotePrimaryEntityType,
    InitiateSecureDepositClientTokenPermission,
    IntegratorInitiatedACHHoldStatus,
    IntegratorInitiatedACHStatus,
    IntegratorInitiatedACHStatusReasonCode,
    IntegratorInitiatedTransferType,
    InterFinancialAccountTransferActivityType,
    InterFinancialAccountTransferStatus,
    ISO3166Alpha3Country,
    ISO4217Alpha3CurrencyCode,
    ISO4217Alpha3SupportedCurrency,
    LedgerName,
    MastercardFleetCreditOrDebitIndicator,
    MastercardFleetFuelBrand,
    MastercardFleetFuelProductCode,
    MastercardFleetFuelServiceType,
    MastercardFleetNonFuelProductCode,
    MastercardFleetProductCode,
    MastercardFleetProductType,
    MastercardFleetPromptType,
    MastercardFleetUnitOfMeasure,
    MerchantCategory,
    NonOriginatedAchTransferStatus,
    NotificationEventName,
    OrganizationReportType,
    OriginatedAchTransferStatus,
    PanEntryMode,
    PaymentCardChargebackStatus,
    PaymentCardClientTokenPermission,
    PaymentCardDigitalWalletDeviceType,
    PaymentCardDisputeCategoryType,
    PaymentCardDisputeCustomerClaimType,
    PaymentCardDisputeStatus,
    PaymentCardGroupOrderStatus,
    PaymentCardNetwork,
    PaymentCardOrderStatus,
    PaymentCardShippingMethod,
    PaymentCardStatus,
    PaymentCreditTransactionRefundReason,
    PersonAccountHolderClientTokenPermission,
    PersonAuthorizedUserClientTokenPermission,
    PhoneLabel,
    PinEntryMode,
    PointOfServiceCategory,
    PointOfServiceCategoryCondition,
    PostalCodeResponseCode,
    RecurringAchTransferFrequencyCode,
    ReissueReason,
    ReportStatus,
    ReportType,
    RewardPointsActivityTypeInput,
    ScheduledTransferClientTokenPermission,
    SecureDepositClientTokenPermission,
    SuspendCardDigitalWalletTokenReason,
    TerminalAttendance,
    TerminateCardDigitalWalletTokenReason,
    TransactionEventFilter,
    TransactionEventResponseCode,
    TransactionTypeFilter,
    TransferBalanceAmountCode,
    TransferPurpose,
    TransferType,
    UnsuspendCardDigitalWalletTokenReason,
    UserRole,
    VelocityConstraintLevel,
    VelocityRuleWindow,
    VisaAmountSignage,
    VisaDiscountTreatment,
    VisaEvChargingReasonCode,
    VisaEvConnectorType,
    VisaFleetDiscountAgent,
    VisaFleetDiscountMethod,
    VisaFleetPurchaseIdentifierFormat,
    VisaFuelPurchaseType,
    VisaFuelServiceType,
    VisaFuelType,
    VisaFuelUnitOfMeasure,
    VisaItemCommodityCode,
    VisaLineItemDetailIndicator,
    VisaNonFuelProductCode,
    VisaTaxTreatment,
    WalletProviderType,
)


class AddressInput(BaseModel):
    street_address: str = Field(alias="streetAddress")
    extended_address: Optional[str] = Field(alias="extendedAddress", default=None)
    postal_code: str = Field(alias="postalCode")
    region: str
    locality: str
    country_code_alpha_3: str = Field(alias="countryCodeAlpha3")


class AmountInput(BaseModel):
    value: Any
    currency_code: ISO4217Alpha3SupportedCurrency = Field(alias="currencyCode")


class CoordinatesInput(BaseModel):
    latitude: str
    longitude: str


class DistanceInput(BaseModel):
    length: float
    unit: DistanceUnit


class MinimalUSAuthorizedPersonInput(BaseModel):
    name: "USAssociatedPersonNameInput"
    email: Optional[str] = None
    phone_number: Optional["PhoneInput"] = Field(alias="phoneNumber", default=None)
    home_address: Optional["AddressInput"] = Field(alias="homeAddress", default=None)
    date_of_birth: str = Field(alias="dateOfBirth")
    identification_document: Optional["USIdentificationDocumentInput"] = Field(
        alias="identificationDocument", default=None
    )
    percentage_ownership: Optional[int] = Field(
        alias="percentageOwnership", default=None
    )
    authorizing_person_title: Optional[BusinessTitle] = Field(
        alias="authorizingPersonTitle", default=None
    )


class CreateMinimalUSBusinessAccountHolderInput(BaseModel):
    idempotency_key: Any = Field(alias="idempotencyKey")
    primary_authorized_person: "MinimalUSAuthorizedPersonInput" = Field(
        alias="primaryAuthorizedPerson"
    )
    business_profile: "MinimalUSBusinessProfileInput" = Field(alias="businessProfile")
    external_id: Optional[str] = Field(alias="externalId", default=None)


class CancelRequestedIdentityUpdateInput(BaseModel):
    id: str


class ConfirmRequestedIdentityUpdateInput(BaseModel):
    id: str


class InitiateUSBusinessProfileRequestedIdentityUpdateInput(BaseModel):
    requested_identity_update_id: str = Field(alias="requestedIdentityUpdateId")
    business_profile: "USBusinessProfileUpdateInput" = Field(alias="businessProfile")


class InitiateUSBusinessAuthorizedPersonRequestedIdentityUpdateInput(BaseModel):
    requested_identity_update_id: str = Field(alias="requestedIdentityUpdateId")
    primary_authorized_person: "USAuthorizedPersonUpdateInput" = Field(
        alias="primaryAuthorizedPerson"
    )


class InitiateUSBusinessUltimateBeneficialOwnerRequestedIdentityUpdateInput(BaseModel):
    requested_identity_update_id: str = Field(alias="requestedIdentityUpdateId")
    ultimate_beneficial_owner: "USUltimateBeneficialOwnerUpdateInput" = Field(
        alias="ultimateBeneficialOwner"
    )


class AdverseActionReasonInput(BaseModel):
    code: AdverseActionCodeInput


class DenyCreditProductApplicationUnderwritingInput(BaseModel):
    application_id: str = Field(alias="applicationId")
    counter_offer: Optional["AcceptCounterOfferInput"] = Field(
        alias="counterOffer", default=None
    )
    decision_date: str = Field(alias="decisionDate")
    adverse_action_reasons: List["AdverseActionReasonInput"] = Field(
        alias="adverseActionReasons"
    )


class AcceptCounterOfferInput(BaseModel):
    consent_agreement: "ConsentInput" = Field(alias="consentAgreement")
    offer_identifier: str = Field(alias="offerIdentifier")


class ApproveCreditProductApplicationUnderwritingInput(BaseModel):
    application_id: str = Field(alias="applicationId")
    decision_date: str = Field(alias="decisionDate")
    standard_purchase_credit_limit: "AmountInput" = Field(
        alias="standardPurchaseCreditLimit"
    )


class ConfirmCreditReportUnfrozenInput(BaseModel):
    application_id: str = Field(alias="applicationId")
    subscriber_note: Optional[str] = Field(alias="subscriberNote", default=None)


class ConfirmVerificationOfCreditProductApplicationForFraudAlertInput(BaseModel):
    application_id: str = Field(alias="applicationId")
    verification_result: Optional["VerifiedApplicationFieldsForFraudAlertInput"] = (
        Field(alias="verificationResult", default=None)
    )


class VerifiedApplicationFieldsForFraudAlertInput(BaseModel):
    account_holder_initiated_application: bool = Field(
        alias="accountHolderInitiatedApplication"
    )
    name: bool
    date_of_birth: bool = Field(alias="dateOfBirth")
    address: bool


class CreateUSPersonAccountHolderFromTokenInput(BaseModel):
    token: str


class CreateUSBusinessAccountHolderFromTokenInput(BaseModel):
    token: str


class CreateUSPersonAuthorizedUserFromTokenInput(BaseModel):
    token: str


class CreateUSPersonAccountHolderInput(BaseModel):
    person_account_holder: "USPersonAccountHolderInput" = Field(
        alias="personAccountHolder"
    )


class CreateUSPersonAuthorizedUserInput(BaseModel):
    person_authorized_user: "USPersonAuthorizedUserInput" = Field(
        alias="personAuthorizedUser"
    )
    account_holder_id: str = Field(alias="accountHolderId")


class USPersonAccountHolderInput(BaseModel):
    name: "PersonAccountHolderNameInput"
    email: Optional[str] = None
    phone_number: Optional["PhoneInput"] = Field(alias="phoneNumber", default=None)
    billing_address: "AddressInput" = Field(alias="billingAddress")
    date_of_birth: str = Field(alias="dateOfBirth")
    identification_document: Optional["USIdentificationDocumentInput"] = Field(
        alias="identificationDocument", default=None
    )
    person_credit_risk_attributes: Optional["PersonCreditRiskAttributesInput"] = Field(
        alias="personCreditRiskAttributes", default=None
    )
    external_id: Optional[str] = Field(alias="externalId", default=None)


class USPersonAuthorizedUserInput(BaseModel):
    name: "PersonAuthorizedUserNameInput"
    email: str
    phone_number: "PhoneInput" = Field(alias="phoneNumber")
    billing_address: "AddressInput" = Field(alias="billingAddress")
    date_of_birth: str = Field(alias="dateOfBirth")
    identification_document: Optional["USIdentificationDocumentInput"] = Field(
        alias="identificationDocument", default=None
    )
    external_id: Optional[str] = Field(alias="externalId", default=None)


class PersonAuthorizedUserNameInput(BaseModel):
    given_name: str = Field(alias="givenName")
    middle_name: Optional[str] = Field(alias="middleName", default=None)
    family_name: str = Field(alias="familyName")
    suffix: Optional[str] = None
    title: Optional[str] = None


class PersonAccountHolderNameInput(BaseModel):
    given_name: str = Field(alias="givenName")
    middle_name: Optional[str] = Field(alias="middleName", default=None)
    family_name: str = Field(alias="familyName")
    suffix: Optional[str] = None
    title: Optional[str] = None


class USAssociatedPersonNameInput(BaseModel):
    given_name: str = Field(alias="givenName")
    middle_name: Optional[str] = Field(alias="middleName", default=None)
    family_name: str = Field(alias="familyName")
    suffix: Optional[str] = None
    title: Optional[str] = None


class USAssociatedPersonNameUpdateInput(BaseModel):
    given_name: Optional[str] = Field(alias="givenName", default=None)
    middle_name: Optional[str] = Field(alias="middleName", default=None)
    family_name: Optional[str] = Field(alias="familyName", default=None)
    suffix: Optional[str] = None
    title: Optional[str] = None


class CreateUSBusinessAccountHolderInput(BaseModel):
    primary_authorized_person: "USAuthorizedPersonInput" = Field(
        alias="primaryAuthorizedPerson"
    )
    business_profile: "USBusinessProfileInput" = Field(alias="businessProfile")
    external_id: Optional[str] = Field(alias="externalId", default=None)


class USAuthorizedPersonInput(BaseModel):
    name: "USAssociatedPersonNameInput"
    email: str
    phone_number: "PhoneInput" = Field(alias="phoneNumber")
    home_address: "AddressInput" = Field(alias="homeAddress")
    date_of_birth: str = Field(alias="dateOfBirth")
    identification_document: "USIdentificationDocumentInput" = Field(
        alias="identificationDocument"
    )
    percentage_ownership: Optional[int] = Field(
        alias="percentageOwnership", default=None
    )
    authorizing_person_title: Optional[BusinessTitle] = Field(
        alias="authorizingPersonTitle", default=None
    )


class USAuthorizedPersonUpdateInput(BaseModel):
    name: Optional["USAssociatedPersonNameUpdateInput"] = None
    home_address: Optional["AddressInput"] = Field(alias="homeAddress", default=None)
    date_of_birth: Optional[str] = Field(alias="dateOfBirth", default=None)
    identification_document: Optional["USIdentificationDocumentInput"] = Field(
        alias="identificationDocument", default=None
    )


class MinimalUSBusinessProfileInput(BaseModel):
    name: "BusinessAccountHolderNameInput"
    phone_number: Optional["PhoneInput"] = Field(alias="phoneNumber", default=None)
    billing_address: "AddressInput" = Field(alias="billingAddress")
    website: Optional[str] = None
    business_type: BusinessStructure = Field(alias="businessType")
    business_credit_risk_attributes: Optional["BusinessCreditRiskAttributesInput"] = (
        Field(alias="businessCreditRiskAttributes", default=None)
    )
    identification_document: Optional["USBusinessIdentificationDocumentInput"] = Field(
        alias="identificationDocument", default=None
    )
    ultimate_beneficial_owners: Optional[
        List["MinimalUSUltimateBeneficialOwnerInput"]
    ] = Field(alias="ultimateBeneficialOwners", default=None)


class USBusinessProfileInput(BaseModel):
    name: "BusinessAccountHolderNameInput"
    phone_number: "PhoneInput" = Field(alias="phoneNumber")
    billing_address: "AddressInput" = Field(alias="billingAddress")
    website: Optional[str] = None
    business_type: Optional[BusinessStructure] = Field(
        alias="businessType", default=None
    )
    credit_risk_attributes: Optional["CreditRiskAttributesInput"] = Field(
        alias="creditRiskAttributes", default=None
    )
    business_credit_risk_attributes: Optional["BusinessCreditRiskAttributesInput"] = (
        Field(alias="businessCreditRiskAttributes", default=None)
    )
    identification_document: Optional["USBusinessIdentificationDocumentInput"] = Field(
        alias="identificationDocument", default=None
    )
    ultimate_beneficial_owners: Optional[
        List[Optional["USUltimateBeneficialOwnerInput"]]
    ] = Field(alias="ultimateBeneficialOwners", default=None)


class USBusinessProfileUpdateInput(BaseModel):
    name: Optional["BusinessAccountHolderNameUpdateInput"] = None
    billing_address: Optional["AddressInput"] = Field(
        alias="billingAddress", default=None
    )
    identification_document: Optional["USBusinessIdentificationDocumentInput"] = Field(
        alias="identificationDocument", default=None
    )


class MinimalUSUltimateBeneficialOwnerInput(BaseModel):
    name: "USAssociatedPersonNameInput"
    home_address: Optional["AddressInput"] = Field(alias="homeAddress", default=None)
    date_of_birth: str = Field(alias="dateOfBirth")
    email: Optional[str] = None
    phone_number: Optional["PhoneInput"] = Field(alias="phoneNumber", default=None)
    identification_document: Optional["USIdentificationDocumentInput"] = Field(
        alias="identificationDocument", default=None
    )
    percentage_ownership: Optional[int] = Field(
        alias="percentageOwnership", default=None
    )


class USUltimateBeneficialOwnerInput(BaseModel):
    name: "USAssociatedPersonNameInput"
    home_address: "AddressInput" = Field(alias="homeAddress")
    date_of_birth: str = Field(alias="dateOfBirth")
    email: str
    phone_number: "PhoneInput" = Field(alias="phoneNumber")
    identification_document: "USIdentificationDocumentInput" = Field(
        alias="identificationDocument"
    )
    percentage_ownership: Optional[int] = Field(
        alias="percentageOwnership", default=None
    )


class USUltimateBeneficialOwnerUpdateInput(BaseModel):
    name: Optional["USAssociatedPersonNameUpdateInput"] = None
    home_address: Optional["AddressInput"] = Field(alias="homeAddress", default=None)
    date_of_birth: Optional[str] = Field(alias="dateOfBirth", default=None)
    identification_document: Optional["USIdentificationDocumentInput"] = Field(
        alias="identificationDocument", default=None
    )


class BusinessAccountHolderNameInput(BaseModel):
    legal_business_name: str = Field(alias="legalBusinessName")
    doing_business_as_name: Optional[str] = Field(
        alias="doingBusinessAsName", default=None
    )


class BusinessAccountHolderNameUpdateInput(BaseModel):
    legal_business_name: Optional[str] = Field(alias="legalBusinessName", default=None)
    doing_business_as_name: Optional[str] = Field(
        alias="doingBusinessAsName", default=None
    )


class CreateAccountHolderCardProductApplicationInput(BaseModel):
    card_product_id: str = Field(alias="cardProductId")
    account_holder_id: str = Field(alias="accountHolderId")
    ip_address: Optional["IPAddressInput"] = Field(alias="ipAddress", default=None)
    card_holder_agreement_consent: "ConsentInput" = Field(
        alias="cardHolderAgreementConsent"
    )
    account_holder_credit_report_pull_consent: Optional["ConsentInput"] = Field(
        alias="accountHolderCreditReportPullConsent", default=None
    )


class CreateAuthorizedUserCardProductApplicationInput(BaseModel):
    authorized_user_id: str = Field(alias="authorizedUserId")
    account_holder_card_product_application_id: str = Field(
        alias="accountHolderCardProductApplicationId"
    )
    financial_account_id: str = Field(alias="financialAccountId")
    ip_address: Optional["IPAddressInput"] = Field(alias="ipAddress", default=None)
    card_holder_agreement_consent: "ConsentInput" = Field(
        alias="cardHolderAgreementConsent"
    )


class ConsentInput(BaseModel):
    primary_authorized_person_id: str = Field(alias="primaryAuthorizedPersonId")
    consent_timestamp: str = Field(alias="consentTimestamp")
    consent_ip_address: Optional["IPAddressInput"] = Field(
        alias="consentIpAddress", default=None
    )


class CreditRiskAttributesInput(BaseModel):
    annual_revenue: Optional[List[Optional["AmountInput"]]] = Field(
        alias="annualRevenue", default=None
    )


class BusinessCreditRiskAttributesInput(BaseModel):
    annual_revenue: Optional[List["AmountInput"]] = Field(
        alias="annualRevenue", default=None
    )


class PersonCreditRiskAttributesInput(BaseModel):
    total_annual_income: Optional[List["AmountInput"]] = Field(
        alias="totalAnnualIncome", default=None
    )
    current_debt_obligations: Optional[List["AmountInput"]] = Field(
        alias="currentDebtObligations", default=None
    )
    employment_status: Optional[EmploymentStatus] = Field(
        alias="employmentStatus", default=None
    )


class IPAddressInput(BaseModel):
    v_4: Optional[str] = Field(alias="v4", default=None)
    v_6: Optional[str] = Field(alias="v6", default=None)


class NameInput(BaseModel):
    given_name: str = Field(alias="givenName")
    middle_name: Optional[str] = Field(alias="middleName", default=None)
    family_name: str = Field(alias="familyName")
    suffix: Optional[str] = None
    title: Optional[str] = None


class PhoneInput(BaseModel):
    country_code: str = Field(alias="countryCode")
    number: str
    extension: Optional[str] = None
    label: PhoneLabel


class USIdentificationDocumentInput(BaseModel):
    social_security_number: "TaxIdentificationDocumentInput" = Field(
        alias="socialSecurityNumber"
    )


class USBusinessIdentificationDocumentInput(BaseModel):
    employer_identification_number: "TaxIdentificationDocumentInput" = Field(
        alias="employerIdentificationNumber"
    )


class TaxIdentificationDocumentInput(BaseModel):
    number: str
    country_code_alpha_3: str = Field(alias="countryCodeAlpha3")


class UpdateUSPersonAccountHolderBillingAddressInput(BaseModel):
    billing_address: "AddressInput" = Field(alias="billingAddress")
    account_holder_id: str = Field(alias="accountHolderId")
    update_payment_card_billing_address: Optional[bool] = Field(
        alias="updatePaymentCardBillingAddress", default=None
    )


class UpdateUSPersonAccountHolderPhoneInput(BaseModel):
    phone_number: "PhoneInput" = Field(alias="phoneNumber")
    account_holder_id: str = Field(alias="accountHolderId")


class UpdateUSPersonAuthorizedUserEmailInput(BaseModel):
    email: str
    authorized_user_id: str = Field(alias="authorizedUserId")
    account_holder_id: str = Field(alias="accountHolderId")


class UpdateUSPersonAuthorizedUserBillingAddressInput(BaseModel):
    billing_address: "AddressInput" = Field(alias="billingAddress")
    update_payment_card_billing_address: Optional[bool] = Field(
        alias="updatePaymentCardBillingAddress", default=None
    )
    authorized_user_id: str = Field(alias="authorizedUserId")
    account_holder_id: str = Field(alias="accountHolderId")


class UpdateUSPersonAuthorizedUserPhoneInput(BaseModel):
    phone_number: "PhoneInput" = Field(alias="phoneNumber")
    authorized_user_id: str = Field(alias="authorizedUserId")
    account_holder_id: str = Field(alias="accountHolderId")


class UpdateUSPersonAccountHolderEmailInput(BaseModel):
    email: str
    account_holder_id: str = Field(alias="accountHolderId")


class UpdateUSBusinessAccountHolderBillingAddressInput(BaseModel):
    billing_address: "AddressInput" = Field(alias="billingAddress")
    account_holder_id: str = Field(alias="accountHolderId")
    update_payment_card_billing_address: Optional[bool] = Field(
        alias="updatePaymentCardBillingAddress", default=None
    )


class UpdateUSBusinessAccountHolderPhoneInput(BaseModel):
    phone_number: "PhoneInput" = Field(alias="phoneNumber")
    account_holder_id: str = Field(alias="accountHolderId")


class UpdateUSBusinessAccountHolderWebsiteInput(BaseModel):
    website: str
    account_holder_id: str = Field(alias="accountHolderId")


class UpdateUSBusinessAccountHolderCreditRiskAttributeInput(BaseModel):
    business_credit_risk_attributes: "BusinessCreditRiskAttributesInput" = Field(
        alias="businessCreditRiskAttributes"
    )
    account_holder_id: str = Field(alias="accountHolderId")


class UpdateUSPersonAccountHolderCreditRiskAttributeInput(BaseModel):
    person_credit_risk_attributes: "PersonCreditRiskAttributesInput" = Field(
        alias="personCreditRiskAttributes"
    )
    account_holder_id: str = Field(alias="accountHolderId")


class UpdateUSAssociatedPersonAccountHolderHomeAddressInput(BaseModel):
    home_address: "AddressInput" = Field(alias="homeAddress")
    account_holder_id: str = Field(alias="accountHolderId")
    business_account_holder_id: str = Field(alias="businessAccountHolderId")
    update_payment_card_billing_address: Optional[bool] = Field(
        alias="updatePaymentCardBillingAddress", default=None
    )


class UpdateUSAssociatedPersonAccountHolderPhoneInput(BaseModel):
    phone_number: "PhoneInput" = Field(alias="phoneNumber")
    account_holder_id: str = Field(alias="accountHolderId")
    business_account_holder_id: str = Field(alias="businessAccountHolderId")


class UpdateUSAssociatedPersonAccountHolderEmailInput(BaseModel):
    email: str
    account_holder_id: str = Field(alias="accountHolderId")
    business_account_holder_id: str = Field(alias="businessAccountHolderId")


class SimulateApplicationVerificationStatusChangeInput(BaseModel):
    application_id: str = Field(alias="applicationId")
    applicant_id: str = Field(alias="applicantId")
    new_verification_status: AccountHolderVerificationStatusReasonCode = Field(
        alias="newVerificationStatus"
    )


class SimulateApplicationStatusChangeInput(BaseModel):
    application_id: str = Field(alias="applicationId")
    new_application_status: AccountHolderApplicationStatusCode = Field(
        alias="newApplicationStatus"
    )


class SimulateApplicationDocumentReviewInput(BaseModel):
    application_id: str = Field(alias="applicationId")
    document_upload_session_id: str = Field(alias="documentUploadSessionId")
    document_upload_link_id: str = Field(alias="documentUploadLinkId")
    new_review_status: ApplicationDocumentUploadStatus = Field(alias="newReviewStatus")
    file_review_reasons: Optional[List[ApplicationDocumentReviewReason]] = Field(
        alias="fileReviewReasons", default=None
    )


class AccountHolderCardProductApplicationOfferFilterByInput(BaseModel):
    offer_status: "CardProductApplicationOfferStatusFilterInput" = Field(
        alias="offerStatus"
    )


class CardProductApplicationOfferStatusFilterInput(BaseModel):
    includes: Optional[List[CardProductApplicationOfferStatus]] = None


class PaymentCardTransactionDisputesFilterInput(BaseModel):
    product_id: Optional["IDFilterInput"] = Field(alias="productId", default=None)
    account_id: Optional["IDFilterInput"] = Field(alias="accountId", default=None)
    dispute_id: Optional["IDFilterInput"] = Field(alias="disputeId", default=None)
    dispute_status: Optional["PaymentCardDisputeStatusFilterInput"] = Field(
        alias="disputeStatus", default=None
    )
    dispute_created_at: Optional["TimestampFilterInput"] = Field(
        alias="disputeCreatedAt", default=None
    )


class PaymentCardTransactionChargebacksFilterInput(BaseModel):
    product_id: Optional["IDFilterInput"] = Field(alias="productId", default=None)
    account_id: Optional["IDFilterInput"] = Field(alias="accountId", default=None)
    chargeback_id: Optional["IDFilterInput"] = Field(alias="chargebackId", default=None)
    chargeback_status: Optional["PaymentCardChargebackStatusFilterInput"] = Field(
        alias="chargebackStatus", default=None
    )
    chargeback_created_at: Optional["TimestampFilterInput"] = Field(
        alias="chargebackCreatedAt", default=None
    )
    external_network_id: Optional["StringFilterInput"] = Field(
        alias="externalNetworkId", default=None
    )


class CardProductPaymentCardTransactionDisputesFilterInput(BaseModel):
    dispute_id: Optional["IDFilterInput"] = Field(alias="disputeId", default=None)
    dispute_status: Optional["PaymentCardDisputeStatusFilterInput"] = Field(
        alias="disputeStatus", default=None
    )
    dispute_created_at: Optional["TimestampFilterInput"] = Field(
        alias="disputeCreatedAt", default=None
    )


class CardProductPaymentCardTransactionChargebacksFilterInput(BaseModel):
    chargeback_id: Optional["IDFilterInput"] = Field(alias="chargebackId", default=None)
    chargeback_status: Optional["PaymentCardChargebackStatusFilterInput"] = Field(
        alias="chargebackStatus", default=None
    )
    chargeback_created_at: Optional["TimestampFilterInput"] = Field(
        alias="chargebackCreatedAt", default=None
    )
    external_network_id: Optional["StringFilterInput"] = Field(
        alias="externalNetworkId", default=None
    )


class FinancialAccountPaymentCardTransactionDisputesFilterInput(BaseModel):
    dispute_id: Optional["IDFilterInput"] = Field(alias="disputeId", default=None)
    dispute_status: Optional["PaymentCardDisputeStatusFilterInput"] = Field(
        alias="disputeStatus", default=None
    )
    dispute_created_at: Optional["TimestampFilterInput"] = Field(
        alias="disputeCreatedAt", default=None
    )


class FinancialAccountPaymentCardTransactionChargebacksFilterInput(BaseModel):
    chargeback_id: Optional["IDFilterInput"] = Field(alias="chargebackId", default=None)
    chargeback_status: Optional["PaymentCardChargebackStatusFilterInput"] = Field(
        alias="chargebackStatus", default=None
    )
    chargeback_created_at: Optional["TimestampFilterInput"] = Field(
        alias="chargebackCreatedAt", default=None
    )
    external_network_id: Optional["StringFilterInput"] = Field(
        alias="externalNetworkId", default=None
    )


class PaymentCardDisputeStatusFilterInput(BaseModel):
    equals: Optional[PaymentCardDisputeStatus] = None
    not_equals: Optional[PaymentCardDisputeStatus] = Field(
        alias="notEquals", default=None
    )
    includes: Optional[List[PaymentCardDisputeStatus]] = None
    excludes: Optional[List[PaymentCardDisputeStatus]] = None


class PaymentCardChargebackStatusFilterInput(BaseModel):
    equals: Optional[PaymentCardChargebackStatus] = None
    not_equals: Optional[PaymentCardChargebackStatus] = Field(
        alias="notEquals", default=None
    )
    includes: Optional[List[PaymentCardChargebackStatus]] = None
    excludes: Optional[List[PaymentCardChargebackStatus]] = None


class CreateGlobalNoteInput(BaseModel):
    message: str
    primary_entity: "GlobalNotePrimaryEntityInput" = Field(alias="primaryEntity")
    aggregate_entity: Optional["GlobalNoteAggregateEntityInput"] = Field(
        alias="aggregateEntity", default=None
    )


class GlobalNotePrimaryEntityInput(BaseModel):
    primary_entity_id: str = Field(alias="primaryEntityId")
    primary_entity_type: GlobalNotePrimaryEntityType = Field(alias="primaryEntityType")


class GlobalNoteAggregateEntityInput(BaseModel):
    aggregate_entity_id: Optional[str] = Field(alias="aggregateEntityId", default=None)
    aggregate_entity_type: Optional[GlobalNoteAggregateEntityType] = Field(
        alias="aggregateEntityType", default=None
    )


class CreateCreditLimitChangeRequestInput(BaseModel):
    financial_account_id: str = Field(alias="financialAccountId")
    requested_change: Optional["CreditLimitChangeRequestDetailsInput"] = Field(
        alias="requestedChange", default=None
    )


class CreditLimitChangeRequestDetailsInput(BaseModel):
    requested_change_type: Optional[CreditLimitChangeRequestType] = Field(
        alias="requestedChangeType", default=None
    )
    requested_credit_limit: Optional["AmountInput"] = Field(
        alias="requestedCreditLimit", default=None
    )
    requestor: Optional[CreditLimitChangeRequestor] = None


class ApproveCreditLimitIncreaseInput(BaseModel):
    credit_limit_change_request_id: str = Field(alias="creditLimitChangeRequestId")
    updated_credit_limit: "AmountInput" = Field(alias="updatedCreditLimit")
    customer_details: Optional["CreditLimitChangeRequestCustomerDetailsInput"] = Field(
        alias="customerDetails", default=None
    )


class DenyCreditLimitIncreaseInput(BaseModel):
    credit_limit_change_request_id: str = Field(alias="creditLimitChangeRequestId")
    adverse_action_reasons: Optional[List[AdverseActionCodeInput]] = Field(
        alias="adverseActionReasons", default=None
    )
    customer_details: Optional["CreditLimitChangeRequestCustomerDetailsInput"] = Field(
        alias="customerDetails", default=None
    )


class ApproveCreditLimitDecreaseInput(BaseModel):
    credit_limit_change_request_id: str = Field(alias="creditLimitChangeRequestId")
    updated_credit_limit: Optional["AmountInput"] = Field(
        alias="updatedCreditLimit", default=None
    )
    adverse_action_reasons: List[AdverseActionCodeInput] = Field(
        alias="adverseActionReasons"
    )
    customer_details: Optional["CreditLimitChangeRequestCustomerDetailsInput"] = Field(
        alias="customerDetails", default=None
    )


class DenyCreditLimitDecreaseInput(BaseModel):
    credit_limit_change_request_id: str = Field(alias="creditLimitChangeRequestId")
    customer_details: Optional["CreditLimitChangeRequestCustomerDetailsInput"] = Field(
        alias="customerDetails", default=None
    )


class CreditLimitChangeRequestCustomerDetailsInput(BaseModel):
    current_debt_obligations: Optional["AmountInput"] = Field(
        alias="currentDebtObligations", default=None
    )
    annual_income: Optional["AmountInput"] = Field(alias="annualIncome", default=None)
    annual_revenue: Optional["AmountInput"] = Field(alias="annualRevenue", default=None)
    external_financial_account_balance: Optional["AmountInput"] = Field(
        alias="externalFinancialAccountBalance", default=None
    )


class RevokeAPIKeyInput(BaseModel):
    api_key_id: str = Field(alias="apiKeyId")


class InviteUserInput(BaseModel):
    email: str
    roles: List[UserRole]


class RemoveUserInput(BaseModel):
    email: str


class UpdateOrganizationProfileDisplayNameInput(BaseModel):
    id: str
    display_name: str = Field(alias="displayName")


class UpdateUserInput(BaseModel):
    external_id: Optional[str] = Field(alias="externalId", default=None)
    email: str
    roles: List[UserRole]


class CreateSecretAPIKeyInput(BaseModel):
    secret_key: "SecretAPIKeyInput" = Field(alias="secretKey")


class SecretAPIKeyInput(BaseModel):
    name: str


class GeneratePaymentCardClientTokenInput(BaseModel):
    payment_card_id: str = Field(alias="paymentCardId")
    permissions: List[PaymentCardClientTokenPermission]


class GenerateDirectDepositDetailClientTokenInput(BaseModel):
    direct_deposit_detail_id: str = Field(alias="directDepositDetailId")
    permissions: List[DirectDepositDetailClientTokenPermission]


class GenerateExternalBankAccountDetailClientTokenInput(BaseModel):
    external_bank_account_detail_id: str = Field(alias="externalBankAccountDetailId")
    permissions: List[ExternalBankAccountDetailClientTokenPermission]


class GenerateDocumentUploadClientTokenInput(BaseModel):
    document_upload_session_id: str = Field(alias="documentUploadSessionId")
    permissions: List[DocumentUploadClientTokenPermission]


class GeneratePersonAccountHolderClientTokenInput(BaseModel):
    account_holder_id: str = Field(alias="accountHolderId")
    permissions: List[PersonAccountHolderClientTokenPermission]


class GenerateBusinessAccountHolderClientTokenInput(BaseModel):
    account_holder_id: str = Field(alias="accountHolderId")
    permissions: List[BusinessAccountHolderClientTokenPermission]


class GeneratePersonAuthorizedUserClientTokenInput(BaseModel):
    authorized_user_id: str = Field(alias="authorizedUserId")
    permissions: List[PersonAuthorizedUserClientTokenPermission]


class GenerateSecureDepositClientTokenInput(BaseModel):
    transaction_id: str = Field(alias="transactionId")
    permissions: List[SecureDepositClientTokenPermission]


class GenerateInitiateSecureDepositClientTokenInput(BaseModel):
    from_financial_account_id: str = Field(alias="fromFinancialAccountId")
    to_financial_account_id: str = Field(alias="toFinancialAccountId")
    permissions: List[InitiateSecureDepositClientTokenPermission]


class GenerateScheduledTransferClientTokenInput(BaseModel):
    scheduled_transfer_id: str = Field(alias="scheduledTransferId")
    permissions: List[ScheduledTransferClientTokenPermission]


class GenerateCreateScheduledTransferClientTokenInput(BaseModel):
    from_financial_account_id: str = Field(alias="fromFinancialAccountId")
    to_financial_account_id: str = Field(alias="toFinancialAccountId")
    permissions: List[CreateScheduledTransferClientTokenPermission]


class GenerateFinancialAccountSingleUseClientTokenInput(BaseModel):
    financial_account_id: str = Field(alias="financialAccountId")
    single_use_token: Optional[str] = Field(alias="singleUseToken", default=None)
    permissions: List[GenerateFinancialAccountSingleUseClientTokenPermission]


class GeneratePaymentMethodTokenizationClientTokenInput(BaseModel):
    permissions: List[GeneratePaymentMethodTokenizationClientTokenPermission]


class AddExternalBankAccountFromTokenInput(BaseModel):
    account_holder_id: str = Field(alias="accountHolderId")
    external_token: "ExternalTokenInput" = Field(alias="externalToken")


class ExternalTokenInput(BaseModel):
    value: str


class AddExternalBankAccountVerifiedThroughPlaidInput(BaseModel):
    account_holder_id: str = Field(alias="accountHolderId")
    external_token: "ExternalTokenInput" = Field(alias="externalToken")


class AddExternalBankAccountVerifiedThroughFinicityInput(BaseModel):
    account_holder_id: str = Field(alias="accountHolderId")
    name: str
    bank_account_type: BankAccountType = Field(alias="bankAccountType")
    external_token: "ExternalTokenFinicityInput" = Field(alias="externalToken")


class ExternalTokenFinicityInput(BaseModel):
    receipt_id: str = Field(alias="receiptId")
    customer_id: str = Field(alias="customerId")
    products: Optional[List["FinicityProduct"]] = None


class FinicityProduct(BaseModel):
    product_type: FinicityProductType = Field(alias="productType")
    account_id: str = Field(alias="accountId")
    call_limit: int = Field(alias="callLimit")
    expiration_detail: "ExpirationDetail" = Field(alias="expirationDetail")


class ExpirationDetail(BaseModel):
    start: str
    expiry: str


class SuspendCardDigitalWalletTokenInput(BaseModel):
    card_digital_wallet_token_id: str = Field(alias="cardDigitalWalletTokenId")
    reason: SuspendCardDigitalWalletTokenReason


class UnsuspendCardDigitalWalletTokenInput(BaseModel):
    card_digital_wallet_token_id: str = Field(alias="cardDigitalWalletTokenId")
    reason: UnsuspendCardDigitalWalletTokenReason


class TerminateCardDigitalWalletTokenInput(BaseModel):
    card_digital_wallet_token_id: str = Field(alias="cardDigitalWalletTokenId")
    reason: TerminateCardDigitalWalletTokenReason


class CloseExternalFinancialBankAccountInput(BaseModel):
    external_financial_bank_account_id: str = Field(
        alias="externalFinancialBankAccountId"
    )


class ActivatePaymentCardInput(BaseModel):
    payment_card_id: str = Field(alias="paymentCardId")


class SuspendPaymentCardInput(BaseModel):
    payment_card_id: str = Field(alias="paymentCardId")


class ClosePaymentCardInput(BaseModel):
    payment_card_id: str = Field(alias="paymentCardId")


class UpdateCardProductNameInput(BaseModel):
    card_product_id: str = Field(alias="cardProductId")
    name: str


class IssuePaymentCardForApplicationInput(BaseModel):
    application_id: str = Field(alias="applicationId")
    external_id: Optional[str] = Field(alias="externalId", default=None)
    options: "IssuePaymentCardOptionsInput"
    custom_fields: Optional[List["CustomFieldInput"]] = Field(
        alias="customFields", default=None
    )


class IssuePaymentCardForAuthorizedUserApplicationInput(BaseModel):
    application_id: str = Field(alias="applicationId")
    options: "IssuePaymentCardOptionsInput"
    custom_fields: Optional[List["CustomFieldInput"]] = Field(
        alias="customFields", default=None
    )


class IssuePaymentCardForFinancialAccountInput(BaseModel):
    financial_account_id: str = Field(alias="financialAccountId")
    options: "IssuePaymentCardOptionsInput"
    custom_fields: Optional[List["CustomFieldInput"]] = Field(
        alias="customFields", default=None
    )
    idempotency_key: Optional[Any] = Field(alias="idempotencyKey", default=None)


class IssueFinancialAccountForApplicationInput(BaseModel):
    application_id: str = Field(alias="applicationId")
    external_id: Optional[str] = Field(alias="externalId", default=None)
    name: str
    custom_fields: Optional[List["CustomFieldInput"]] = Field(
        alias="customFields", default=None
    )
    idempotency_key: Optional[Any] = Field(alias="idempotencyKey", default=None)


class IssueFinancialAccountForApplicationWithOnDemandFundingSourceInput(BaseModel):
    application_id: str = Field(alias="applicationId")
    source_financial_account_id: str = Field(alias="sourceFinancialAccountId")
    external_id: Optional[str] = Field(alias="externalId", default=None)
    name: str
    idempotency_key: Optional[Any] = Field(alias="idempotencyKey", default=None)


class IssueFundingFinancialAccountForApplicationInput(BaseModel):
    application_id: str = Field(alias="applicationId")
    name: str


class IssueEmployerFinancialAccountForCardProductInput(BaseModel):
    card_product_id: str = Field(alias="cardProductId")
    name: str
    company_identifier: Optional[str] = Field(alias="companyIdentifier", default=None)


class IssuePaymentCardOptionsInput(BaseModel):
    expiration_date: str = Field(alias="expirationDate")
    activate_on_create: bool = Field(alias="activateOnCreate")
    card_profile_set_id: Optional[str] = Field(alias="cardProfileSetId", default=None)
    external_id: Optional[str] = Field(alias="externalId", default=None)


class ReissuePaymentCardInput(BaseModel):
    original_payment_card_id: str = Field(alias="originalPaymentCardId")
    options: "ReissuePaymentCardOptionsInput"
    custom_fields: Optional[List["CustomFieldInput"]] = Field(
        alias="customFields", default=None
    )
    idempotency_key: Optional[Any] = Field(alias="idempotencyKey", default=None)


class ReissuePaymentCardOptionsInput(BaseModel):
    expiration_date: str = Field(alias="expirationDate")
    activate_on_create: bool = Field(alias="activateOnCreate")
    reissue_features: Optional["ReissuePaymentCardFeaturesInput"] = Field(
        alias="reissueFeatures", default=None
    )
    reason: Optional[ReissueReason] = None


class ReissuePaymentCardFeaturesInput(BaseModel):
    copy_number: Optional[bool] = Field(alias="copyNumber", default=None)
    copy_pin: Optional[bool] = Field(alias="copyPin", default=None)


class UpdateFinancialAccountNameInput(BaseModel):
    financial_account_id: str = Field(alias="financialAccountId")
    name: str


class ATMLocationRadiusInput(BaseModel):
    coordinates: "CoordinatesInput"
    distance: "DistanceInput"


class ATMLocationViewportInput(BaseModel):
    coordinates: "ViewportCoordinatesInput"


class ATMLocationFilterInput(BaseModel):
    includes: Optional[List[ATMLocationFeature]] = None


class ViewportCoordinatesInput(BaseModel):
    northern_latitude: str = Field(alias="northernLatitude")
    northern_longitude: str = Field(alias="northernLongitude")
    southern_latitude: str = Field(alias="southernLatitude")
    southern_longitude: str = Field(alias="southernLongitude")


class CreateCardProductInput(BaseModel):
    card_product: "CardProductInput" = Field(alias="cardProduct")


class CardProductInput(BaseModel):
    name: str
    usage: CardUsage
    vertical: CardProductVertical


class EnableCollaborativeApplicationUnderwritingFeatureInput(BaseModel):
    card_product_id: str = Field(alias="cardProductId")


class EnableCreditCardFeatureInput(BaseModel):
    card_product_id: str = Field(alias="cardProductId")
    feature: CreditCardProductFeature


class UpdateFinancialAccountBillingCycleConfigurationInput(BaseModel):
    financial_account_id: str = Field(alias="financialAccountId")
    payment_due_day_of_month: Any = Field(alias="paymentDueDayOfMonth")


class EnableOnDemandFundingFeatureInput(BaseModel):
    card_product_id: str = Field(alias="cardProductId")
    pseudo_balance_enabled: bool = Field(alias="pseudoBalanceEnabled")


class EnableAuthorizedUserFeatureInput(BaseModel):
    card_product_id: str = Field(alias="cardProductId")


class DisableAuthorizedUserFeatureInput(BaseModel):
    card_product_id: str = Field(alias="cardProductId")


class AddNonVerifiedExternalUSFinancialBankAccountInput(BaseModel):
    routing_number: str = Field(alias="routingNumber")
    account_number: str = Field(alias="accountNumber")
    name: Optional[str] = None
    account_holder_id: str = Field(alias="accountHolderId")
    bank_account_type: BankAccountType = Field(alias="bankAccountType")


class InitiateFinancialAccountPseudoBalanceUpdateInput(BaseModel):
    financial_account_id: str = Field(alias="financialAccountId")
    memo: Optional[str] = None
    amount: "AmountInput"
    idempotency_key: Optional[Any] = Field(alias="idempotencyKey", default=None)


class SimulateInitiateFinancialAccountClosureInput(BaseModel):
    financial_account_id: str = Field(alias="financialAccountId")
    close_with_balance: Optional[bool] = Field(alias="closeWithBalance", default=None)


class SimulateCloseFinancialAccountInput(BaseModel):
    financial_account_id: str = Field(alias="financialAccountId")


class IssuePreprintedPaymentCardFinancialAccountForApplicationInput(BaseModel):
    application_id: str = Field(alias="applicationId")
    name: str
    external_id: Optional[str] = Field(alias="externalId", default=None)


class CreateCardProductWithTemplateCardProductInput(BaseModel):
    name: str
    source_template_id: str = Field(alias="sourceTemplateId")


class CreateCardProductWithTemplateInput(BaseModel):
    card_product: "CreateCardProductWithTemplateCardProductInput" = Field(
        alias="cardProduct"
    )


class AssignPaymentCardToFinancialAccountOptionsInput(BaseModel):
    activate_on_assignment: bool = Field(alias="activateOnAssignment")


class AssignPaymentCardToFinancialAccountInput(BaseModel):
    payment_card_id: str = Field(alias="paymentCardId")
    assign_to_financial_account_id: str = Field(alias="assignToFinancialAccountId")
    options: "AssignPaymentCardToFinancialAccountOptionsInput"
    idempotency_key: Optional[Any] = Field(alias="idempotencyKey", default=None)


class SimulateRefundInput(BaseModel):
    transaction_id: str = Field(alias="transactionId")
    amount: Optional["AmountInput"] = None
    merchant_details: Optional["MerchantDetailsInput"] = Field(
        alias="merchantDetails", default=None
    )
    transaction_processing_type: Optional[CardTransactionProcessingType] = Field(
        alias="transactionProcessingType", default=None
    )
    point_of_service_details: Optional["PointOfServiceDetailsInput"] = Field(
        alias="pointOfServiceDetails", default=None
    )


class SimulateReversalInput(BaseModel):
    transaction_id: str = Field(alias="transactionId")
    amount: Optional["AmountInput"] = None
    transaction_processing_type: Optional[CardTransactionProcessingType] = Field(
        alias="transactionProcessingType", default=None
    )
    point_of_service_details: Optional["PointOfServiceDetailsInput"] = Field(
        alias="pointOfServiceDetails", default=None
    )
    merchant_details: Optional["MerchantDetailsInput"] = Field(
        alias="merchantDetails", default=None
    )
    issuer_expired_authorization: Optional[bool] = Field(
        alias="issuerExpiredAuthorization", default=None
    )


class SimulateClearingInput(BaseModel):
    transaction_id: str = Field(alias="transactionId")
    amount: Optional["AmountInput"] = None
    merchant_details: Optional["MerchantDetailsInput"] = Field(
        alias="merchantDetails", default=None
    )
    transaction_processing_type: Optional[CardTransactionProcessingType] = Field(
        alias="transactionProcessingType", default=None
    )
    point_of_service_details: Optional["PointOfServiceDetailsInput"] = Field(
        alias="pointOfServiceDetails", default=None
    )


class SimulateVisaFleetClearingInput(BaseModel):
    transaction_id: str = Field(alias="transactionId")
    amount: "AmountInput"
    merchant_details: Optional["MerchantDetailsInput"] = Field(
        alias="merchantDetails", default=None
    )
    visa_fleet_l_2_transaction_data: Optional["VisaFleetL2TransactionDataInput"] = (
        Field(alias="visaFleetL2TransactionData", default=None)
    )
    transaction_processing_type: Optional[CardTransactionProcessingType] = Field(
        alias="transactionProcessingType", default=None
    )
    point_of_service_details: Optional["PointOfServiceDetailsInput"] = Field(
        alias="pointOfServiceDetails", default=None
    )


class VisaFleetL2TransactionDataInput(BaseModel):
    visa_fuel_purchase_type: Optional[VisaFuelPurchaseType] = Field(
        alias="visaFuelPurchaseType", default=None
    )
    visa_fuel_service_type: Optional[VisaFuelServiceType] = Field(
        alias="visaFuelServiceType", default=None
    )
    visa_fuel_type: Optional[VisaFuelType] = Field(alias="visaFuelType", default=None)
    visa_fuel_quantity: Optional[Any] = Field(alias="visaFuelQuantity", default=None)
    visa_fuel_unit_of_measure: Optional[VisaFuelUnitOfMeasure] = Field(
        alias="visaFuelUnitOfMeasure", default=None
    )
    visa_fuel_unit_cost: Optional[Any] = Field(alias="visaFuelUnitCost", default=None)
    visa_fuel_net_amount: Optional[Any] = Field(alias="visaFuelNetAmount", default=None)
    visa_fuel_gross_amount: Optional[Any] = Field(
        alias="visaFuelGrossAmount", default=None
    )
    visa_non_fuel_net_amount: Optional[Any] = Field(
        alias="visaNonFuelNetAmount", default=None
    )
    visa_non_fuel_gross_amount: Optional[Any] = Field(
        alias="visaNonFuelGrossAmount", default=None
    )
    visa_tax_rate: Optional[Any] = Field(alias="visaTaxRate", default=None)
    visa_expanded_fuel_type: Optional[VisaFuelType] = Field(
        alias="visaExpandedFuelType", default=None
    )
    visa_additional_data_indicator: Optional[bool] = Field(
        alias="visaAdditionalDataIndicator", default=None
    )
    visa_fleet_identifier: Optional[str] = Field(
        alias="visaFleetIdentifier", default=None
    )
    visa_odometer_reading: Optional[Any] = Field(
        alias="visaOdometerReading", default=None
    )
    visa_purchase_identifier_format: Optional[VisaFleetPurchaseIdentifierFormat] = (
        Field(alias="visaPurchaseIdentifierFormat", default=None)
    )
    visa_purchase_identifier: Optional[str] = Field(
        alias="visaPurchaseIdentifier", default=None
    )
    visa_fleet_employee_number: Optional[str] = Field(
        alias="visaFleetEmployeeNumber", default=None
    )
    visa_fleet_trailer_number: Optional[str] = Field(
        alias="visaFleetTrailerNumber", default=None
    )
    visa_fleet_custom_prompt_1: Optional[str] = Field(
        alias="visaFleetCustomPrompt1", default=None
    )
    visa_fleet_custom_prompt_2: Optional[str] = Field(
        alias="visaFleetCustomPrompt2", default=None
    )
    visa_non_fuel_product_codes: Optional[List[VisaNonFuelProductCode]] = Field(
        alias="visaNonFuelProductCodes", default=None
    )
    visa_charging_power_capacity: Optional[Any] = Field(
        alias="visaChargingPowerCapacity", default=None
    )
    visa_ev_charging_reason_code: Optional[VisaEvChargingReasonCode] = Field(
        alias="visaEvChargingReasonCode", default=None
    )
    visa_estimated_km_miles_added: Optional[Any] = Field(
        alias="visaEstimatedKmMilesAdded", default=None
    )
    visa_carbon_footprint_avoided: Optional[Any] = Field(
        alias="visaCarbonFootprintAvoided", default=None
    )
    visa_estimated_km_miles_available: Optional[Any] = Field(
        alias="visaEstimatedKmMilesAvailable", default=None
    )
    visa_max_power_dispensed: Optional[Any] = Field(
        alias="visaMaxPowerDispensed", default=None
    )
    visa_ev_connector_type: Optional[VisaEvConnectorType] = Field(
        alias="visaEvConnectorType", default=None
    )
    visa_fleet_fuel_line_items: Optional[List["VisaFleetL2FuelLineItemInput"]] = Field(
        alias="visaFleetFuelLineItems", default=None
    )
    visa_national_tax_rate: Optional[Any] = Field(
        alias="visaNationalTaxRate", default=None
    )
    visa_other_tax_rate: Optional[Any] = Field(alias="visaOtherTaxRate", default=None)
    visa_discount_method: Optional[VisaFleetDiscountMethod] = Field(
        alias="visaDiscountMethod", default=None
    )
    visa_discount_agent: Optional[VisaFleetDiscountAgent] = Field(
        alias="visaDiscountAgent", default=None
    )
    visa_discount_plan_identifier: Optional[str] = Field(
        alias="visaDiscountPlanIdentifier", default=None
    )
    visa_client_identifier: Optional[str] = Field(
        alias="visaClientIdentifier", default=None
    )


class SimulateVisaFleetAuthorizationAdviceInput(BaseModel):
    transaction_id: str = Field(alias="transactionId")
    amount: "AmountInput"
    verification_overrides: Optional["VerificationOverridesInput"] = Field(
        alias="verificationOverrides", default=None
    )
    merchant_details: Optional["MerchantDetailsInput"] = Field(
        alias="merchantDetails", default=None
    )
    transaction_processing_type: Optional[CardTransactionProcessingType] = Field(
        alias="transactionProcessingType", default=None
    )
    point_of_service_details: Optional["PointOfServiceDetailsInput"] = Field(
        alias="pointOfServiceDetails", default=None
    )
    fleet_authorization_data: Optional["SimulateVisaFleetAuthorizationDataInput"] = (
        Field(alias="fleetAuthorizationData", default=None)
    )


class SimulateAuthorizationInput(BaseModel):
    id: Optional[str] = None
    card_id: str = Field(alias="cardId")
    amount: "AmountInput"
    verification_overrides: Optional["VerificationOverridesInput"] = Field(
        alias="verificationOverrides", default=None
    )
    merchant_details: Optional["MerchantDetailsInput"] = Field(
        alias="merchantDetails", default=None
    )
    transaction_processing_type: Optional[CardTransactionProcessingType] = Field(
        alias="transactionProcessingType", default=None
    )
    point_of_service_details: Optional["PointOfServiceDetailsInput"] = Field(
        alias="pointOfServiceDetails", default=None
    )


class SimulateSingleStepAuthAndClearInput(BaseModel):
    card_id: str = Field(alias="cardId")
    amount: "AmountInput"
    verification_overrides: Optional["VerificationOverridesInput"] = Field(
        alias="verificationOverrides", default=None
    )
    merchant_details: Optional["MerchantDetailsInput"] = Field(
        alias="merchantDetails", default=None
    )
    transaction_processing_type: Optional[CardTransactionProcessingType] = Field(
        alias="transactionProcessingType", default=None
    )
    point_of_service_details: Optional["PointOfServiceDetailsInput"] = Field(
        alias="pointOfServiceDetails", default=None
    )


class SimulateVisaFleetAuthorizationInput(BaseModel):
    id: Optional[str] = None
    card_id: str = Field(alias="cardId")
    amount: "AmountInput"
    verification_overrides: Optional["VerificationOverridesInput"] = Field(
        alias="verificationOverrides", default=None
    )
    merchant_details: Optional["MerchantDetailsInput"] = Field(
        alias="merchantDetails", default=None
    )
    transaction_processing_type: Optional[CardTransactionProcessingType] = Field(
        alias="transactionProcessingType", default=None
    )
    point_of_service_details: Optional["PointOfServiceDetailsInput"] = Field(
        alias="pointOfServiceDetails", default=None
    )
    fleet_authorization_data: Optional["SimulateVisaFleetAuthorizationDataInput"] = (
        Field(alias="fleetAuthorizationData", default=None)
    )


class PointOfServiceDetailsInput(BaseModel):
    category: Optional[PointOfServiceCategory] = None
    pan_entry_mode: Optional[PanEntryMode] = Field(alias="panEntryMode", default=None)
    pin_entry_mode: Optional[PinEntryMode] = Field(alias="pinEntryMode", default=None)
    terminal_attendance: Optional[TerminalAttendance] = Field(
        alias="terminalAttendance", default=None
    )
    is_card_holder_present: Optional[bool] = Field(
        alias="isCardHolderPresent", default=None
    )
    is_card_present: Optional[bool] = Field(alias="isCardPresent", default=None)
    is_recurring: Optional[bool] = Field(alias="isRecurring", default=None)
    terminal_supports_partial_approval: Optional[bool] = Field(
        alias="terminalSupportsPartialApproval", default=None
    )
    card_data_input_capability: Optional[CardDataInputCapability] = Field(
        alias="cardDataInputCapability", default=None
    )


class MerchantDetailsInput(BaseModel):
    category: Optional[MerchantCategory] = None
    country_code_alpha_3: Optional[ISO3166Alpha3Country] = Field(
        alias="countryCodeAlpha3", default=None
    )
    description: Optional[str] = None
    merchant_id: Optional[str] = Field(alias="merchantId", default=None)
    name: Optional[str] = None
    address: Optional["MerchantDetailsAddressInput"] = None


class MerchantDetailsAddressInput(BaseModel):
    postal_code: str = Field(alias="postalCode")
    region: str
    locality: str
    country_code_alpha_3: ISO3166Alpha3Country = Field(alias="countryCodeAlpha3")


class VerificationOverridesInput(BaseModel):
    cvv: Optional[str] = None
    cardholder_address: Optional["AddressInput"] = Field(
        alias="cardholderAddress", default=None
    )


class SimulateVisaFleetL3EnhancedDataDiscountInput(BaseModel):
    amount: Optional["AmountInput"] = None
    amount_signage: Optional[VisaAmountSignage] = Field(
        alias="amountSignage", default=None
    )
    treatment: Optional[VisaDiscountTreatment] = None


class SimulateVisaFleetL3EnhancedDataDutyInput(BaseModel):
    amount: Optional["AmountInput"] = None
    amount_signage: Optional[VisaAmountSignage] = Field(
        alias="amountSignage", default=None
    )


class SimulateVisaFleetL3EnhancedDataInvoiceInput(BaseModel):
    reference_number: Optional[str] = Field(alias="referenceNumber", default=None)
    destination_postal_code: Optional[str] = Field(
        alias="destinationPostalCode", default=None
    )
    ship_from_postal_code: Optional[str] = Field(
        alias="shipFromPostalCode", default=None
    )
    destination_country_code: Optional[str] = Field(
        alias="destinationCountryCode", default=None
    )
    authorization_code: Optional[str] = Field(alias="authorizationCode", default=None)
    order_date: Optional[str] = Field(alias="orderDate", default=None)
    line_items: Optional[List["SimulateVisaFleetL3EnhancedDataLineItemInput"]] = Field(
        alias="lineItems", default=None
    )


class SimulateVisaFleetL3EnhancedDataShippingInput(BaseModel):
    amount: Optional["AmountInput"] = None
    amount_signage: Optional[VisaAmountSignage] = Field(
        alias="amountSignage", default=None
    )
    tax_amount: Optional["AmountInput"] = Field(alias="taxAmount", default=None)
    tax_amount_signage: Optional[VisaAmountSignage] = Field(
        alias="taxAmountSignage", default=None
    )
    tax_rate: Optional[Any] = Field(alias="taxRate", default=None)


class SimulateVisaFleetL3EnhancedDataTaxInput(BaseModel):
    treatment: Optional[VisaTaxTreatment] = None


class SimulateVisaFleetL3EnhancedDataInput(BaseModel):
    transaction_id: str = Field(alias="transactionId")
    discount: Optional["SimulateVisaFleetL3EnhancedDataDiscountInput"] = None
    duty: Optional["SimulateVisaFleetL3EnhancedDataDutyInput"] = None
    invoice: Optional["SimulateVisaFleetL3EnhancedDataInvoiceInput"] = None
    shipping: Optional["SimulateVisaFleetL3EnhancedDataShippingInput"] = None
    tax: Optional["SimulateVisaFleetL3EnhancedDataTaxInput"] = None


class SimulateVisaFleetL3EnhancedDataLineItemInput(BaseModel):
    commodity_code: Optional[VisaItemCommodityCode] = Field(
        alias="commodityCode", default=None
    )
    descriptor: Optional[str] = None
    product_code: Optional[str] = Field(alias="productCode", default=None)
    quantity: Optional[Any] = None
    unit_of_measure: Optional[str] = Field(alias="unitOfMeasure", default=None)
    unit_cost: Optional["AmountInput"] = Field(alias="unitCost", default=None)
    tax_amount: Optional["AmountInput"] = Field(alias="taxAmount", default=None)
    tax_rate: Optional[Any] = Field(alias="taxRate", default=None)
    discount_per_item: Optional["AmountInput"] = Field(
        alias="discountPerItem", default=None
    )
    discount_treatment: Optional[VisaDiscountTreatment] = Field(
        alias="discountTreatment", default=None
    )
    total: Optional["AmountInput"] = None
    detail_indicator: Optional[VisaLineItemDetailIndicator] = Field(
        alias="detailIndicator", default=None
    )


class VisaFleetL2FuelLineItemInput(BaseModel):
    product_code: Optional[VisaFuelType] = Field(alias="productCode", default=None)
    unit_price: Optional[Any] = Field(alias="unitPrice", default=None)
    unit_price_minor_unit: Optional[Any] = Field(
        alias="unitPriceMinorUnit", default=None
    )
    unit_of_measure: Optional[VisaFuelUnitOfMeasure] = Field(
        alias="unitOfMeasure", default=None
    )
    quantity: Optional[Any] = None
    quantity_minor_unit: Optional[Any] = Field(alias="quantityMinorUnit", default=None)
    total_time_plugged_in: Optional[str] = Field(
        alias="totalTimePluggedIn", default=None
    )
    total_time_charging: Optional[str] = Field(alias="totalTimeCharging", default=None)
    charging_start_time: Optional[str] = Field(alias="chargingStartTime", default=None)
    charging_finish_time: Optional[str] = Field(
        alias="chargingFinishTime", default=None
    )
    total_amount: Optional["AmountInput"] = Field(alias="totalAmount", default=None)
    fuel_indicator: Optional[bool] = Field(alias="fuelIndicator", default=None)
    service_type: Optional[VisaFuelServiceType] = Field(
        alias="serviceType", default=None
    )
    product_category_or_description: Optional[str] = Field(
        alias="productCategoryOrDescription", default=None
    )
    discount_rate_percentage: Optional[Any] = Field(
        alias="discountRatePercentage", default=None
    )
    discount_per_unit: Optional["AmountInput"] = Field(
        alias="discountPerUnit", default=None
    )
    discount_per_transaction: Optional["AmountInput"] = Field(
        alias="discountPerTransaction", default=None
    )
    total_discount_amount: Optional["AmountInput"] = Field(
        alias="totalDiscountAmount", default=None
    )
    net_amount: Optional["AmountInput"] = Field(alias="netAmount", default=None)
    not_taxable_indicator: Optional[bool] = Field(
        alias="notTaxableIndicator", default=None
    )
    local_tax_included_indicator: Optional[bool] = Field(
        alias="localTaxIncludedIndicator", default=None
    )
    local_tax_amount: Optional["AmountInput"] = Field(
        alias="localTaxAmount", default=None
    )
    local_tax_rate: Optional[Any] = Field(alias="localTaxRate", default=None)
    national_tax_included_indicator: Optional[bool] = Field(
        alias="nationalTaxIncludedIndicator", default=None
    )
    national_tax_amount: Optional["AmountInput"] = Field(
        alias="nationalTaxAmount", default=None
    )
    national_tax_rate: Optional[Any] = Field(alias="nationalTaxRate", default=None)
    other_tax_included_indicator: Optional[bool] = Field(
        alias="otherTaxIncludedIndicator", default=None
    )
    other_tax_amount: Optional["AmountInput"] = Field(
        alias="otherTaxAmount", default=None
    )
    other_tax_rate: Optional[Any] = Field(alias="otherTaxRate", default=None)


class SimulateMastercardFleetAuthorizationInput(BaseModel):
    card_id: str = Field(alias="cardId")
    amount: "AmountInput"
    verification_overrides: Optional["VerificationOverridesInput"] = Field(
        alias="verificationOverrides", default=None
    )
    merchant_details: Optional["MerchantDetailsInput"] = Field(
        alias="merchantDetails", default=None
    )
    point_of_service_details: Optional["PointOfServiceDetailsInput"] = Field(
        alias="pointOfServiceDetails", default=None
    )
    fleet_authorization_data: Optional[
        "SimulateMastercardFleetAuthorizationDataInput"
    ] = Field(alias="fleetAuthorizationData", default=None)


class SimulateMastercardFleetAuthorizationAdviceInput(BaseModel):
    transaction_id: str = Field(alias="transactionId")
    amount: "AmountInput"
    verification_overrides: Optional["VerificationOverridesInput"] = Field(
        alias="verificationOverrides", default=None
    )
    merchant_details: Optional["MerchantDetailsInput"] = Field(
        alias="merchantDetails", default=None
    )
    point_of_service_details: Optional["PointOfServiceDetailsInput"] = Field(
        alias="pointOfServiceDetails", default=None
    )
    fleet_authorization_data: Optional[
        "SimulateMastercardFleetAuthorizationDataInput"
    ] = Field(alias="fleetAuthorizationData", default=None)


class SimulateMastercardFleetClearingInput(BaseModel):
    transaction_id: str = Field(alias="transactionId")
    amount: "AmountInput"
    merchant_details: Optional["MerchantDetailsInput"] = Field(
        alias="merchantDetails", default=None
    )
    point_of_service_details: Optional["PointOfServiceDetailsInput"] = Field(
        alias="pointOfServiceDetails", default=None
    )


class SimulateMastercardFleetEnhancedDataInput(BaseModel):
    transaction_id: str = Field(alias="transactionId")
    fuel_brand: Optional[MastercardFleetFuelBrand] = Field(
        alias="fuelBrand", default=None
    )
    purchase_time: Optional[str] = Field(alias="purchaseTime", default=None)
    fuel_service_type: Optional[MastercardFleetFuelServiceType] = Field(
        alias="fuelServiceType", default=None
    )
    fuel_type: Optional[MastercardFleetProductCode] = Field(
        alias="fuelType", default=None
    )
    fuel_unit_price_value: Optional[Any] = Field(
        alias="fuelUnitPriceValue", default=None
    )
    fuel_unit_price_value_precision: Optional[Any] = Field(
        alias="fuelUnitPriceValuePrecision", default=None
    )
    fuel_unit_of_measure: Optional[MastercardFleetUnitOfMeasure] = Field(
        alias="fuelUnitOfMeasure", default=None
    )
    fuel_quantity: Optional[float] = Field(alias="fuelQuantity", default=None)
    fuel_sale_amount: Optional["AmountInput"] = Field(
        alias="fuelSaleAmount", default=None
    )
    odometer_reading: Optional[str] = Field(alias="odometerReading", default=None)
    vehicle_number: Optional[str] = Field(alias="vehicleNumber", default=None)
    driver_identification: Optional[str] = Field(
        alias="driverIdentification", default=None
    )
    product_type: Optional[MastercardFleetProductType] = Field(
        alias="productType", default=None
    )
    fuel_discount_amount: Optional["AmountInput"] = Field(
        alias="fuelDiscountAmount", default=None
    )
    tax_amount_1: Optional["AmountInput"] = Field(alias="taxAmount1", default=None)
    tax_amount_2: Optional["AmountInput"] = Field(alias="taxAmount2", default=None)
    fuel_location_details: Optional[
        "SimulateMastercardAdditionalFuelLocationDetailsInput"
    ] = Field(alias="fuelLocationDetails", default=None)
    line_items: Optional[List["SimulateMastercardFleetEnhancedDataLineItemInput"]] = (
        Field(alias="lineItems", default=None)
    )


class SimulateMastercardFleetEnhancedDataLineItemInput(BaseModel):
    product_code: Optional[MastercardFleetProductCode] = Field(
        alias="productCode", default=None
    )
    description: Optional[str] = None
    quantity: Optional[float] = None
    unit_of_measure: Optional[str] = Field(alias="unitOfMeasure", default=None)
    unit_price_value: Optional[Any] = Field(alias="unitPriceValue", default=None)
    unit_price_value_precision: Optional[Any] = Field(
        alias="unitPriceValuePrecision", default=None
    )
    item_amount_value: Optional[Any] = Field(alias="itemAmountValue", default=None)
    item_amount_value_precision: Optional[Any] = Field(
        alias="itemAmountValuePrecision", default=None
    )
    credit_or_debit: Optional[MastercardFleetCreditOrDebitIndicator] = Field(
        alias="creditOrDebit", default=None
    )


class SimulateMastercardAdditionalFuelLocationDetailsInput(BaseModel):
    open_twenty_four_hours: Optional[bool] = Field(
        alias="openTwentyFourHours", default=None
    )
    eighteen_wheeler_access: Optional[bool] = Field(
        alias="eighteenWheelerAccess", default=None
    )
    diesel_sites: Optional[bool] = Field(alias="dieselSites", default=None)
    interstate_access: Optional[bool] = Field(alias="interstateAccess", default=None)
    convenience_store: Optional[bool] = Field(alias="convenienceStore", default=None)
    restaurant: Optional[bool] = None
    hotel: Optional[bool] = None
    showers: Optional[bool] = None
    repair_bays: Optional[bool] = Field(alias="repairBays", default=None)
    vehicle_wash: Optional[bool] = Field(alias="vehicleWash", default=None)
    aviation_location: Optional[bool] = Field(alias="aviationLocation", default=None)
    marina_location: Optional[bool] = Field(alias="marinaLocation", default=None)
    alternative_fuel: Optional[bool] = Field(alias="alternativeFuel", default=None)
    pay_at_pump: Optional[bool] = Field(alias="payAtPump", default=None)


class SimulateMastercardFleetAuthorizationDataInput(BaseModel):
    driver_identifier: Optional[str] = Field(alias="driverIdentifier", default=None)
    vehicle_identifier: Optional[str] = Field(alias="vehicleIdentifier", default=None)
    spend_control_override_flag: Optional[bool] = Field(
        alias="spendControlOverrideFlag", default=None
    )
    prompts: Optional[List["SimulateMastercardFleetPromptInput"]] = None
    fuel_products: Optional[
        List["SimulateMastercardFleetAuthorizationDataFuelProductInput"]
    ] = Field(alias="fuelProducts", default=None)
    non_fuel_products: Optional[
        List["SimulateMastercardFleetAuthorizationDataNonFuelProductInput"]
    ] = Field(alias="nonFuelProducts", default=None)


class SimulateMastercardFleetPromptInput(BaseModel):
    code: Optional[MastercardFleetPromptType] = None
    value: Optional[str] = None


class SimulateMastercardFleetAuthorizationDataFuelProductInput(BaseModel):
    code: Optional[MastercardFleetFuelProductCode] = None
    unit_price: Optional[Any] = Field(alias="unitPrice", default=None)
    unit_price_precision: Optional[Any] = Field(
        alias="unitPricePrecision", default=None
    )
    unit_of_measure: Optional[MastercardFleetUnitOfMeasure] = Field(
        alias="unitOfMeasure", default=None
    )
    quantity: Optional[Any] = None
    quantity_precision: Optional[Any] = Field(alias="quantityPrecision", default=None)
    sale_amount: Optional["AmountInput"] = Field(alias="saleAmount", default=None)


class SimulateMastercardFleetAuthorizationDataNonFuelProductInput(BaseModel):
    code: Optional[MastercardFleetNonFuelProductCode] = None
    unit_of_measure: Optional[str] = Field(alias="unitOfMeasure", default=None)
    quantity: Optional[Any] = None
    quantity_precision: Optional[Any] = Field(alias="quantityPrecision", default=None)
    extended_item_amount: Optional["AmountInput"] = Field(
        alias="extendedItemAmount", default=None
    )


class SimulateVisaFleetAuthorizationDataInput(BaseModel):
    purchase_type: Optional[VisaFuelPurchaseType] = Field(
        alias="purchaseType", default=None
    )
    service_type: Optional[VisaFuelServiceType] = Field(
        alias="serviceType", default=None
    )
    purchase_identifier_format: Optional[VisaFleetPurchaseIdentifierFormat] = Field(
        alias="purchaseIdentifierFormat", default=None
    )
    purchase_identifier: Optional[str] = Field(alias="purchaseIdentifier", default=None)
    fleet_identifier: Optional[str] = Field(alias="fleetIdentifier", default=None)
    odometer: Optional[str] = None
    employee_number: Optional[str] = Field(alias="employeeNumber", default=None)
    trailer_number: Optional[str] = Field(alias="trailerNumber", default=None)
    custom_prompt_1: Optional[str] = Field(alias="customPrompt1", default=None)
    custom_prompt_2: Optional[str] = Field(alias="customPrompt2", default=None)
    purchase_restrictons_flag: Optional[bool] = Field(
        alias="purchaseRestrictonsFlag", default=None
    )
    non_fuel_product_codes: Optional[List[VisaNonFuelProductCode]] = Field(
        alias="nonFuelProductCodes", default=None
    )


class AddFundsToPaymentCardInput(BaseModel):
    payment_card_id: str = Field(alias="paymentCardId")
    amount: "AmountInput"
    memo: Optional[str] = None


class SimulatePhysicalPaymentCardSendToPrinterInput(BaseModel):
    physical_payment_card_order_id: str = Field(alias="physicalPaymentCardOrderId")


class SimulatePhysicalPaymentCardApprovalInput(BaseModel):
    physical_payment_card_order_id: str = Field(alias="physicalPaymentCardOrderId")


class SimulatePhysicalPaymentCardShipmentFailedInput(BaseModel):
    physical_payment_card_order_id: str = Field(alias="physicalPaymentCardOrderId")


class SimulatePhysicalPaymentCardShippedInput(BaseModel):
    physical_payment_card_order_id: str = Field(alias="physicalPaymentCardOrderId")
    tracking_number: Optional[str] = Field(alias="trackingNumber", default=None)
    actual_ship_date: Optional[str] = Field(alias="actualShipDate", default=None)


class OrderPhysicalPaymentCardInput(BaseModel):
    payment_card_id: str = Field(alias="paymentCardId")
    delivery_details: "PaymentCardDeliveryDetailsInput" = Field(alias="deliveryDetails")
    card_personalization: "PaymentCardPersonalizationInput" = Field(
        alias="cardPersonalization"
    )
    courier: Optional["PaymentCardShipmentCourierInput"] = None
    requested_ship_date: Optional[str] = Field(alias="requestedShipDate", default=None)


class OrderPhysicalPaymentCardWithValidatedAddressInput(BaseModel):
    payment_card_id: str = Field(alias="paymentCardId")
    delivery_details: "PaymentCardDeliveryDetailsWithValidatedAddressInput" = Field(
        alias="deliveryDetails"
    )
    card_personalization: "PaymentCardPersonalizationInput" = Field(
        alias="cardPersonalization"
    )
    courier: Optional["PaymentCardShipmentCourierInput"] = None
    requested_ship_date: Optional[str] = Field(alias="requestedShipDate", default=None)
    idempotency_key: Any = Field(alias="idempotencyKey")


class CancelPhysicalPaymentCardOrderInput(BaseModel):
    physical_payment_card_order_id: str = Field(alias="physicalPaymentCardOrderId")


class PaymentCardDeliveryDetailsInput(BaseModel):
    name: "NameInput"
    company_name: Optional[str] = Field(alias="companyName", default=None)
    address: "AddressInput"


class PaymentCardDeliveryDetailsWithValidatedAddressInput(BaseModel):
    name: "NameInput"
    company_name: Optional[str] = Field(alias="companyName", default=None)
    validated_address_id: str = Field(alias="validatedAddressId")


class PaymentCardShipmentCourierInput(BaseModel):
    method: PaymentCardShippingMethod
    signature_required_on_delivery: bool = Field(alias="signatureRequiredOnDelivery")


class PaymentCardPersonalizationInput(BaseModel):
    text_lines: "PaymentCardPersonalizationTextLinesInput" = Field(alias="textLines")


class PaymentCardPersonalizationTextLinesInput(BaseModel):
    line_1: str = Field(alias="line1")
    line_2: Optional[str] = Field(alias="line2", default=None)


class CreatePhysicalCardGroupOrderInput(BaseModel):
    card_product_id: str = Field(alias="cardProductId")
    delivery_details: "PaymentCardDeliveryDetailsInput" = Field(alias="deliveryDetails")
    courier: Optional["PaymentCardShipmentCourierInput"] = None
    requested_ship_date: Optional[str] = Field(alias="requestedShipDate", default=None)


class CreatePhysicalCardGroupOrderWithValidatedAddressInput(BaseModel):
    card_product_id: str = Field(alias="cardProductId")
    delivery_details: "PaymentCardDeliveryDetailsWithValidatedAddressInput" = Field(
        alias="deliveryDetails"
    )
    courier: Optional["PaymentCardShipmentCourierInput"] = None
    requested_ship_date: Optional[str] = Field(alias="requestedShipDate", default=None)
    idempotency_key: Any = Field(alias="idempotencyKey")


class OrderPhysicalPaymentCardForGroupInput(BaseModel):
    payment_card_id: str = Field(alias="paymentCardId")
    group_order_id: str = Field(alias="groupOrderId")
    delivery_details: Optional["PaymentCardDeliveryDetailsInput"] = Field(
        alias="deliveryDetails", default=None
    )
    card_personalization: "PaymentCardPersonalizationInput" = Field(
        alias="cardPersonalization"
    )


class CompletePhysicalCardGroupOrderInput(BaseModel):
    group_order_id: str = Field(alias="groupOrderId")


class CancelPhysicalCardGroupOrderInput(BaseModel):
    group_order_id: str = Field(alias="groupOrderId")


class SimulatePhysicalCardGroupOrderSendToPrinterInput(BaseModel):
    group_order_id: str = Field(alias="groupOrderId")


class SimulatePhysicalCardGroupOrderApprovalInput(BaseModel):
    group_order_id: str = Field(alias="groupOrderId")


class SimulatePhysicalCardGroupOrderShipmentFailedInput(BaseModel):
    group_order_id: str = Field(alias="groupOrderId")


class SimulatePhysicalCardGroupOrderShippedInput(BaseModel):
    group_order_id: str = Field(alias="groupOrderId")
    tracking_number: Optional[str] = Field(alias="trackingNumber", default=None)
    actual_ship_date: Optional[str] = Field(alias="actualShipDate", default=None)


class PhysicalPaymentCardOrderFilterInput(BaseModel):
    physical_payment_card_order_id: Optional["IDFilterInput"] = Field(
        alias="physicalPaymentCardOrderId", default=None
    )
    card_product_id: Optional["IDFilterInput"] = Field(
        alias="cardProductId", default=None
    )
    payment_card_order_status: Optional["PaymentCardOrderStatusFilterInput"] = Field(
        alias="paymentCardOrderStatus", default=None
    )
    shipping_method: Optional["PaymentCardShippingMethodFilterInput"] = Field(
        alias="shippingMethod", default=None
    )
    group_order_id: Optional["IDFilterInput"] = Field(
        alias="groupOrderId", default=None
    )
    payment_card_filter_by: Optional["PaymentCardFilterInput"] = Field(
        alias="paymentCardFilterBy", default=None
    )
    created_at: Optional["TimestampFilterInput"] = Field(
        alias="createdAt", default=None
    )
    actual_ship_date_local: Optional["DateFilterInput"] = Field(
        alias="actualShipDateLocal", default=None
    )


class PaymentCardFilterInput(BaseModel):
    payment_card_id: Optional["IDFilterInput"] = Field(
        alias="paymentCardId", default=None
    )
    bin: Optional["StringFilterInput"] = None
    last_4: Optional["StringFilterInput"] = Field(alias="last4", default=None)
    payment_card_status: Optional["PaymentCardStatusFilterInput"] = Field(
        alias="paymentCardStatus", default=None
    )
    payment_card_personalization_line_1: Optional["StringFilterInput"] = Field(
        alias="paymentCardPersonalizationLine1", default=None
    )
    payment_card_personalization_line_2: Optional["StringFilterInput"] = Field(
        alias="paymentCardPersonalizationLine2", default=None
    )
    card_profile_set_id: Optional["IDFilterInput"] = Field(
        alias="cardProfileSetId", default=None
    )
    account_holder_id: Optional["IDFilterInput"] = Field(
        alias="accountHolderId", default=None
    )
    payment_card_holder_id: Optional["IDFilterInput"] = Field(
        alias="paymentCardHolderId", default=None
    )


class PaymentCardShippingMethodFilterInput(BaseModel):
    equals: Optional[PaymentCardShippingMethod] = None
    not_equals: Optional[PaymentCardShippingMethod] = Field(
        alias="notEquals", default=None
    )
    includes: Optional[List[PaymentCardShippingMethod]] = None
    excludes: Optional[List[PaymentCardShippingMethod]] = None


class PaymentCardOrderStatusFilterInput(BaseModel):
    equals: Optional[PaymentCardOrderStatus] = None
    not_equals: Optional[PaymentCardOrderStatus] = Field(
        alias="notEquals", default=None
    )
    includes: Optional[List[PaymentCardOrderStatus]] = None
    excludes: Optional[List[PaymentCardOrderStatus]] = None


class PhysicalCardGroupOrderFilterInput(BaseModel):
    card_product_id: Optional["IDFilterInput"] = Field(
        alias="cardProductId", default=None
    )
    group_order_state: Optional["PaymentCardGroupOrderStatusFilterInput"] = Field(
        alias="groupOrderState", default=None
    )
    shipping_method: Optional["PaymentCardShippingMethodFilterInput"] = Field(
        alias="shippingMethod", default=None
    )
    group_order_id: Optional["IDFilterInput"] = Field(
        alias="groupOrderId", default=None
    )
    created_at: Optional["TimestampFilterInput"] = Field(
        alias="createdAt", default=None
    )
    actual_ship_date_local: Optional["DateFilterInput"] = Field(
        alias="actualShipDateLocal", default=None
    )


class PhysicalPaymentCardGroupOrderFilterInput(BaseModel):
    card_product_id: Optional["IDFilterInput"] = Field(
        alias="cardProductId", default=None
    )
    group_order_state: Optional["PaymentCardGroupOrderStatusFilterInput"] = Field(
        alias="groupOrderState", default=None
    )
    shipping_method: Optional["PaymentCardShippingMethodFilterInput"] = Field(
        alias="shippingMethod", default=None
    )
    group_order_id: Optional["IDFilterInput"] = Field(
        alias="groupOrderId", default=None
    )
    created_at: Optional["TimestampFilterInput"] = Field(
        alias="createdAt", default=None
    )
    actual_ship_date_local: Optional["DateFilterInput"] = Field(
        alias="actualShipDateLocal", default=None
    )


class PaymentCardGroupOrderStatusFilterInput(BaseModel):
    equals: Optional[PaymentCardGroupOrderStatus] = None
    not_equals: Optional[PaymentCardGroupOrderStatus] = Field(
        alias="notEquals", default=None
    )
    includes: Optional[List[PaymentCardGroupOrderStatus]] = None
    excludes: Optional[List[PaymentCardGroupOrderStatus]] = None


class SetPinForPaymentCardInput(BaseModel):
    payment_card_id: str = Field(alias="paymentCardId")
    new_pin: str = Field(alias="newPin")


class IntegratorInitiatedACHTransferFilterInput(BaseModel):
    company_entry_description: Optional["StringSearchFilterInput"] = Field(
        alias="companyEntryDescription", default=None
    )
    transaction_amount: Optional["MoneyFilterInput"] = Field(
        alias="transactionAmount", default=None
    )
    transaction_type: Optional["IntegratorInitiatedTransferTypeFilterInput"] = Field(
        alias="transactionType", default=None
    )
    settlement_date: Optional["TimestampFilterInput"] = Field(
        alias="settlementDate", default=None
    )
    status: Optional["IntegratorInitiatedACHStatusFilterInput"] = None
    reason_code: Optional["IntegratorInitiatedACHStatusReasonCodeFilterInput"] = Field(
        alias="reasonCode", default=None
    )
    hold_status: Optional["IntegratorInitiatedACHHoldStatusFilterInput"] = Field(
        alias="holdStatus", default=None
    )
    card_product_id: Optional["StringSearchFilterInput"] = Field(
        alias="cardProductId", default=None
    )
    return_date: Optional["TimestampFilterInput"] = Field(
        alias="returnDate", default=None
    )


class ExternallyInitiatedACHTransferFilterInput(BaseModel):
    company_identifier: Optional["StringFilterInput"] = Field(
        alias="companyIdentifier", default=None
    )
    company_name: Optional["StringSearchFilterInput"] = Field(
        alias="companyName", default=None
    )
    company_entry_description: Optional["StringSearchFilterInput"] = Field(
        alias="companyEntryDescription", default=None
    )
    transaction_amount: Optional["MoneyFilterInput"] = Field(
        alias="transactionAmount", default=None
    )
    transaction_type: Optional["ExternallyInitiatedTransferTypeFilterInput"] = Field(
        alias="transactionType", default=None
    )
    settlement_date: Optional["TimestampFilterInput"] = Field(
        alias="settlementDate", default=None
    )
    status: Optional["ExternallyInitiatedACHStatusFilterInput"] = None
    reason_code: Optional["ExternallyInitiatedACHStatusReasonCodeFilterInput"] = Field(
        alias="reasonCode", default=None
    )
    hold_status: Optional["ExternallyInitiatedACHHoldStatusFilterInput"] = Field(
        alias="holdStatus", default=None
    )
    card_product_id: Optional["StringSearchFilterInput"] = Field(
        alias="cardProductId", default=None
    )
    return_date: Optional["TimestampFilterInput"] = Field(
        alias="returnDate", default=None
    )


class IntegratorInitiatedACHHoldStatusFilterInput(BaseModel):
    equals: Optional[IntegratorInitiatedACHHoldStatus] = None
    not_equals: Optional[IntegratorInitiatedACHHoldStatus] = Field(
        alias="notEquals", default=None
    )
    includes: Optional[List[IntegratorInitiatedACHHoldStatus]] = None
    excludes: Optional[List[IntegratorInitiatedACHHoldStatus]] = None


class ExternallyInitiatedACHHoldStatusFilterInput(BaseModel):
    equals: Optional[ExternallyInitiatedACHHoldStatus] = None
    not_equals: Optional[ExternallyInitiatedACHHoldStatus] = Field(
        alias="notEquals", default=None
    )
    includes: Optional[List[ExternallyInitiatedACHHoldStatus]] = None
    excludes: Optional[List[ExternallyInitiatedACHHoldStatus]] = None


class IntegratorInitiatedTransferTypeFilterInput(BaseModel):
    equals: Optional[IntegratorInitiatedTransferType] = None
    not_equals: Optional[IntegratorInitiatedTransferType] = Field(
        alias="notEquals", default=None
    )
    includes: Optional[List[IntegratorInitiatedTransferType]] = None
    excludes: Optional[List[IntegratorInitiatedTransferType]] = None


class ExternallyInitiatedTransferTypeFilterInput(BaseModel):
    equals: Optional[ExternallyInitiatedTransferType] = None
    not_equals: Optional[ExternallyInitiatedTransferType] = Field(
        alias="notEquals", default=None
    )
    includes: Optional[List[ExternallyInitiatedTransferType]] = None
    excludes: Optional[List[ExternallyInitiatedTransferType]] = None


class IntegratorInitiatedACHStatusFilterInput(BaseModel):
    equals: Optional[IntegratorInitiatedACHStatus] = None
    not_equals: Optional[IntegratorInitiatedACHStatus] = Field(
        alias="notEquals", default=None
    )
    includes: Optional[List[IntegratorInitiatedACHStatus]] = None
    excludes: Optional[List[IntegratorInitiatedACHStatus]] = None


class ExternallyInitiatedACHStatusFilterInput(BaseModel):
    equals: Optional[ExternallyInitiatedACHStatus] = None
    not_equals: Optional[ExternallyInitiatedACHStatus] = Field(
        alias="notEquals", default=None
    )
    includes: Optional[List[ExternallyInitiatedACHStatus]] = None
    excludes: Optional[List[ExternallyInitiatedACHStatus]] = None


class IntegratorInitiatedACHStatusReasonCodeFilterInput(BaseModel):
    equals: Optional[IntegratorInitiatedACHStatusReasonCode] = None
    not_equals: Optional[IntegratorInitiatedACHStatusReasonCode] = Field(
        alias="notEquals", default=None
    )
    includes: Optional[List[IntegratorInitiatedACHStatusReasonCode]] = None
    excludes: Optional[List[IntegratorInitiatedACHStatusReasonCode]] = None


class ExternallyInitiatedACHStatusReasonCodeFilterInput(BaseModel):
    equals: Optional[ExternallyInitiatedACHStatusReasonCode] = None
    not_equals: Optional[ExternallyInitiatedACHStatusReasonCode] = Field(
        alias="notEquals", default=None
    )
    includes: Optional[List[ExternallyInitiatedACHStatusReasonCode]] = None
    excludes: Optional[List[ExternallyInitiatedACHStatusReasonCode]] = None


class OriginatedAchTransferFilterInput(BaseModel):
    amount: Optional["MoneyFilterInput"] = None
    type: Optional["AchTransferTypeFilterInput"] = None
    purpose: Optional["AchTransferPurposeFilterInput"] = None
    sign: Optional["AchTransferSignFilterInput"] = None
    card_product_id: Optional["StringSearchFilterInput"] = Field(
        alias="cardProductId", default=None
    )
    company_entry_description: Optional["StringSearchFilterInput"] = Field(
        alias="companyEntryDescription", default=None
    )
    trace_number: Optional["StringFilterInput"] = Field(
        alias="traceNumber", default=None
    )
    status: Optional["OriginatedAchTransferStatusFilterInput"] = None
    status_failure_reason: Optional["AchTransferStatusFailureReasonFilterInput"] = (
        Field(alias="statusFailureReason", default=None)
    )
    hold_status: Optional["AchHoldStatusFilterInput"] = Field(
        alias="holdStatus", default=None
    )
    created_at: Optional["TimestampFilterInput"] = Field(
        alias="createdAt", default=None
    )
    return_processed_at: Optional["TimestampFilterInput"] = Field(
        alias="returnProcessedAt", default=None
    )


class NonOriginatedAchTransferFilterInput(BaseModel):
    amount: Optional["MoneyFilterInput"] = None
    type: Optional["AchTransferTypeFilterInput"] = None
    purpose: Optional["AchTransferPurposeFilterInput"] = None
    sign: Optional["AchTransferSignFilterInput"] = None
    card_product_id: Optional["StringSearchFilterInput"] = Field(
        alias="cardProductId", default=None
    )
    company_identifier: Optional["StringFilterInput"] = Field(
        alias="companyIdentifier", default=None
    )
    company_name: Optional["StringSearchFilterInput"] = Field(
        alias="companyName", default=None
    )
    company_entry_description: Optional["StringSearchFilterInput"] = Field(
        alias="companyEntryDescription", default=None
    )
    trace_number: Optional["StringFilterInput"] = Field(
        alias="traceNumber", default=None
    )
    status: Optional["NonOriginatedAchTransferStatusFilterInput"] = None
    status_failure_reason: Optional["AchTransferStatusFailureReasonFilterInput"] = (
        Field(alias="statusFailureReason", default=None)
    )
    hold_status: Optional["AchHoldStatusFilterInput"] = Field(
        alias="holdStatus", default=None
    )
    created_at: Optional["TimestampFilterInput"] = Field(
        alias="createdAt", default=None
    )
    settlement_date: Optional["DateFilterInput"] = Field(
        alias="settlementDate", default=None
    )
    return_sent_to_bank_at: Optional["TimestampFilterInput"] = Field(
        alias="returnSentToBankAt", default=None
    )


class AchTransferTypeFilterInput(BaseModel):
    equals: Optional[AchTransferType] = None
    not_equals: Optional[AchTransferType] = Field(alias="notEquals", default=None)
    includes: Optional[List[AchTransferType]] = None
    excludes: Optional[List[AchTransferType]] = None


class AchTransferPurposeFilterInput(BaseModel):
    equals: Optional[AchTransferPurpose] = None
    not_equals: Optional[AchTransferPurpose] = Field(alias="notEquals", default=None)
    includes: Optional[List[AchTransferPurpose]] = None
    excludes: Optional[List[AchTransferPurpose]] = None


class AchTransferSignFilterInput(BaseModel):
    equals: Optional[AchTransferSign] = None
    not_equals: Optional[AchTransferSign] = Field(alias="notEquals", default=None)
    includes: Optional[List[AchTransferSign]] = None
    excludes: Optional[List[AchTransferSign]] = None


class OriginatedAchTransferStatusFilterInput(BaseModel):
    equals: Optional[OriginatedAchTransferStatus] = None
    not_equals: Optional[OriginatedAchTransferStatus] = Field(
        alias="notEquals", default=None
    )
    includes: Optional[List[OriginatedAchTransferStatus]] = None
    excludes: Optional[List[OriginatedAchTransferStatus]] = None


class NonOriginatedAchTransferStatusFilterInput(BaseModel):
    equals: Optional[NonOriginatedAchTransferStatus] = None
    not_equals: Optional[NonOriginatedAchTransferStatus] = Field(
        alias="notEquals", default=None
    )
    includes: Optional[List[NonOriginatedAchTransferStatus]] = None
    excludes: Optional[List[NonOriginatedAchTransferStatus]] = None


class AchTransferStatusFailureReasonFilterInput(BaseModel):
    equals: Optional[AchTransferStatusFailureReason] = None
    not_equals: Optional[AchTransferStatusFailureReason] = Field(
        alias="notEquals", default=None
    )
    includes: Optional[List[AchTransferStatusFailureReason]] = None
    excludes: Optional[List[AchTransferStatusFailureReason]] = None


class AchHoldStatusFilterInput(BaseModel):
    equals: Optional[AchHoldStatus] = None
    not_equals: Optional[AchHoldStatus] = Field(alias="notEquals", default=None)
    includes: Optional[List[AchHoldStatus]] = None
    excludes: Optional[List[AchHoldStatus]] = None


class CardProductPaymentCardsFilterInput(BaseModel):
    bin: Optional["StringFilterInput"] = None
    card_network: Optional["PaymentCardNetworkFilterInput"] = Field(
        alias="cardNetwork", default=None
    )
    expiration_date: Optional["TimestampFilterInput"] = Field(
        alias="expirationDate", default=None
    )
    last_4: Optional["StringFilterInput"] = Field(alias="last4", default=None)
    account_holder_id: Optional["IDFilterInput"] = Field(
        alias="accountHolderId", default=None
    )
    status: Optional["PaymentCardStatusFilterInput"] = None
    form_factor: Optional["CardFormFactorFilterInput"] = Field(
        alias="formFactor", default=None
    )
    create_date: Optional["TimestampFilterInput"] = Field(
        alias="createDate", default=None
    )
    update_date: Optional["TimestampFilterInput"] = Field(
        alias="updateDate", default=None
    )
    custom_fields: Optional["CustomFieldsFilterInput"] = Field(
        alias="customFields", default=None
    )


class AccountHolderPaymentCardsFilterInput(BaseModel):
    bin: Optional["StringFilterInput"] = None
    card_network: Optional["PaymentCardNetworkFilterInput"] = Field(
        alias="cardNetwork", default=None
    )
    expiration_date: Optional["TimestampFilterInput"] = Field(
        alias="expirationDate", default=None
    )
    last_4: Optional["StringFilterInput"] = Field(alias="last4", default=None)
    card_product_id: Optional["IDFilterInput"] = Field(
        alias="cardProductId", default=None
    )
    status: Optional["PaymentCardStatusFilterInput"] = None
    form_factor: Optional["CardFormFactorFilterInput"] = Field(
        alias="formFactor", default=None
    )
    create_date: Optional["TimestampFilterInput"] = Field(
        alias="createDate", default=None
    )
    update_date: Optional["TimestampFilterInput"] = Field(
        alias="updateDate", default=None
    )
    custom_fields: Optional["CustomFieldsFilterInput"] = Field(
        alias="customFields", default=None
    )


class AuthorizedUserPaymentCardsFilterInput(BaseModel):
    bin: Optional["StringFilterInput"] = None
    card_network: Optional["PaymentCardNetworkFilterInput"] = Field(
        alias="cardNetwork", default=None
    )
    expiration_date: Optional["TimestampFilterInput"] = Field(
        alias="expirationDate", default=None
    )
    last_4: Optional["StringFilterInput"] = Field(alias="last4", default=None)
    card_product_id: Optional["IDFilterInput"] = Field(
        alias="cardProductId", default=None
    )
    status: Optional["PaymentCardStatusFilterInput"] = None
    form_factor: Optional["CardFormFactorFilterInput"] = Field(
        alias="formFactor", default=None
    )
    create_date: Optional["TimestampFilterInput"] = Field(
        alias="createDate", default=None
    )
    update_date: Optional["TimestampFilterInput"] = Field(
        alias="updateDate", default=None
    )


class PaymentCardStatusFilterInput(BaseModel):
    equals: Optional[PaymentCardStatus] = None
    not_equals: Optional[PaymentCardStatus] = Field(alias="notEquals", default=None)
    includes: Optional[List[PaymentCardStatus]] = None
    excludes: Optional[List[PaymentCardStatus]] = None


class PaymentCardNetworkFilterInput(BaseModel):
    equals: Optional[PaymentCardNetwork] = None
    not_equals: Optional[PaymentCardNetwork] = Field(alias="notEquals", default=None)
    includes: Optional[List[PaymentCardNetwork]] = None
    excludes: Optional[List[PaymentCardNetwork]] = None


class CardFormFactorFilterInput(BaseModel):
    equals: Optional[CardFormFactor] = None
    not_equals: Optional[CardFormFactor] = Field(alias="notEquals", default=None)
    includes: Optional[List[CardFormFactor]] = None
    excludes: Optional[List[CardFormFactor]] = None


class InterFinancialAccountTransferStatusFilterInput(BaseModel):
    equals: Optional[InterFinancialAccountTransferStatus] = None
    not_equals: Optional[InterFinancialAccountTransferStatus] = Field(
        alias="notEquals", default=None
    )
    includes: Optional[List[InterFinancialAccountTransferStatus]] = None
    excludes: Optional[List[InterFinancialAccountTransferStatus]] = None


class InterFinancialAccountTransferActivityTypeFilterInput(BaseModel):
    equals: Optional[InterFinancialAccountTransferActivityType] = None
    not_equals: Optional[InterFinancialAccountTransferActivityType] = Field(
        alias="notEquals", default=None
    )
    includes: Optional[List[InterFinancialAccountTransferActivityType]] = None
    excludes: Optional[List[InterFinancialAccountTransferActivityType]] = None


class InterFinancialAccountTransferFilterInput(BaseModel):
    amount: Optional["MoneyFilterInput"] = None
    created_at: Optional["TimestampFilterInput"] = Field(
        alias="createdAt", default=None
    )
    updated_at: Optional["TimestampFilterInput"] = Field(
        alias="updatedAt", default=None
    )
    transfer_activity_type: Optional[
        "InterFinancialAccountTransferActivityTypeFilterInput"
    ] = Field(alias="transferActivityType", default=None)
    status: Optional["InterFinancialAccountTransferStatusFilterInput"] = None


class AccountHolderFinancialAccountsFilterInput(BaseModel):
    created_at: Optional["TimestampFilterInput"] = Field(
        alias="createdAt", default=None
    )
    updated_at: Optional["TimestampFilterInput"] = Field(
        alias="updatedAt", default=None
    )
    features: Optional["FinancialAccountFeatureTypeFilterInput"] = None
    card_product_id: Optional["StringFilterInput"] = Field(
        alias="cardProductId", default=None
    )
    external_id: Optional["StringFilterInput"] = Field(alias="externalId", default=None)
    custom_fields: Optional["CustomFieldsFilterInput"] = Field(
        alias="customFields", default=None
    )


class FinancialAccountFeatureTypeFilterInput(BaseModel):
    equals: Optional[FinancialAccountFeatureType] = None
    not_equals: Optional[FinancialAccountFeatureType] = Field(
        alias="notEquals", default=None
    )
    includes: Optional[List[FinancialAccountFeatureType]] = None
    excludes: Optional[List[FinancialAccountFeatureType]] = None


class BusinessAccountHolderFilterInput(BaseModel):
    id: Optional["IDFilterInput"] = None
    external_id: Optional["IDFilterInput"] = Field(alias="externalId", default=None)
    business_profile: Optional["BusinessAccountHolderBusinessProfileFilterInput"] = (
        Field(alias="businessProfile", default=None)
    )
    primary_authorized_person: Optional[
        "BusinessAccountHolderPrimaryAuthorizedPersonFilterInput"
    ] = Field(alias="primaryAuthorizedPerson", default=None)


class BusinessAccountHolderPrimaryAuthorizedPersonFilterInput(BaseModel):
    date_of_birth: Optional["DateFilterInput"] = Field(
        alias="dateOfBirth", default=None
    )
    name: Optional["BusinessAccountHolderPrimaryAuthorizedPersonNameFilterInput"] = None
    home_address: Optional[
        "BusinessAccountHolderPrimaryAuthorizedAddressFilterInput"
    ] = Field(alias="homeAddress", default=None)
    social_security_number_last_4: Optional["HashedFilterInput"] = Field(
        alias="socialSecurityNumberLast4", default=None
    )


class BusinessAccountHolderPrimaryAuthorizedAddressFilterInput(BaseModel):
    postal_code: Optional["StringFilterInput"] = Field(alias="postalCode", default=None)


class BusinessAccountHolderPrimaryAuthorizedPersonNameFilterInput(BaseModel):
    title: Optional["SoundsLikeFilterInput"] = None
    given_name: Optional["SoundsLikeFilterInput"] = Field(
        alias="givenName", default=None
    )
    middle_name: Optional["SoundsLikeFilterInput"] = Field(
        alias="middleName", default=None
    )
    family_name: Optional["SoundsLikeFilterInput"] = Field(
        alias="familyName", default=None
    )
    suffix: Optional["SoundsLikeFilterInput"] = None


class BusinessAccountHolderBusinessProfileFilterInput(BaseModel):
    name: Optional["BusinessAccountHolderBusinessNameFilterInput"] = None
    website: Optional["StringSearchFilterInput"] = None
    employer_identification_number: Optional["HashedFilterInput"] = Field(
        alias="employerIdentificationNumber", default=None
    )


class BusinessAccountHolderBusinessNameFilterInput(BaseModel):
    legal_business_name: Optional["StringSearchFilterInput"] = Field(
        alias="legalBusinessName", default=None
    )
    doing_business_as_name: Optional["StringSearchFilterInput"] = Field(
        alias="doingBusinessAsName", default=None
    )


class PersonAccountHolderFilterInput(BaseModel):
    date_of_birth: Optional["DateFilterInput"] = Field(
        alias="dateOfBirth", default=None
    )
    name: Optional["PersonAccountHolderNameFilterInput"] = None
    phone: Optional["PhoneFilterInput"] = None
    billing_address: Optional["AddressFilterInput"] = Field(
        alias="billingAddress", default=None
    )
    email: Optional["StringSearchFilterInput"] = None


class PersonAccountHolderNameFilterInput(BaseModel):
    title: Optional["SoundsLikeFilterInput"] = None
    given_name: Optional["SoundsLikeFilterInput"] = Field(
        alias="givenName", default=None
    )
    middle_name: Optional["SoundsLikeFilterInput"] = Field(
        alias="middleName", default=None
    )
    family_name: Optional["SoundsLikeFilterInput"] = Field(
        alias="familyName", default=None
    )
    suffix: Optional["SoundsLikeFilterInput"] = None


class PersonAuthorizedUserFilterInput(BaseModel):
    date_of_birth: Optional["DateFilterInput"] = Field(
        alias="dateOfBirth", default=None
    )
    name: Optional["PersonAuthorizedUserNameFilterInput"] = None
    billing_address: Optional["AddressFilterInput"] = Field(
        alias="billingAddress", default=None
    )
    social_security_number_last_4: Optional["HashedFilterInput"] = Field(
        alias="socialSecurityNumberLast4", default=None
    )


class PersonAuthorizedUserNameFilterInput(BaseModel):
    title: Optional["SoundsLikeFilterInput"] = None
    given_name: Optional["SoundsLikeFilterInput"] = Field(
        alias="givenName", default=None
    )
    middle_name: Optional["SoundsLikeFilterInput"] = Field(
        alias="middleName", default=None
    )
    family_name: Optional["SoundsLikeFilterInput"] = Field(
        alias="familyName", default=None
    )
    suffix: Optional["SoundsLikeFilterInput"] = None


class CardProductApplicationFilterInput(BaseModel):
    created_at: Optional["TimestampFilterInput"] = Field(
        alias="createdAt", default=None
    )
    updated_at: Optional["TimestampFilterInput"] = Field(
        alias="updatedAt", default=None
    )
    status: Optional["AccountHolderApplicationStateInput"] = None
    id: Optional["IDFilterInput"] = None


class AccountHolderApplicationStateInput(BaseModel):
    equals: Optional[AccountHolderApplicationStatusCode] = None
    not_equals: Optional[AccountHolderApplicationStatusCode] = Field(
        alias="notEquals", default=None
    )
    includes: Optional[List[AccountHolderApplicationStatusCode]] = None
    excludes: Optional[List[AccountHolderApplicationStatusCode]] = None


class PhoneFilterInput(BaseModel):
    label: Optional["PhoneLabelFilterInput"] = None
    number: Optional["StringFilterInput"] = None
    extension: Optional["StringFilterInput"] = None


class AddressFilterInput(BaseModel):
    locality: Optional["StringFilterInput"] = None
    region: Optional["StringFilterInput"] = None
    country_code_alpha_3: Optional[ISO3166Alpha3Country] = Field(
        alias="countryCodeAlpha3", default=None
    )
    postal_code: Optional["StringFilterInput"] = Field(alias="postalCode", default=None)
    street_address: Optional["StringFilterInput"] = Field(
        alias="streetAddress", default=None
    )
    extended_address: Optional["StringFilterInput"] = Field(
        alias="extendedAddress", default=None
    )


class PhoneLabelFilterInput(BaseModel):
    equals: Optional[PhoneLabel] = None
    not_equals: Optional[PhoneLabel] = Field(alias="notEquals", default=None)
    includes: Optional[List[PhoneLabel]] = None
    excludes: Optional[List[PhoneLabel]] = None


class MerchantDetailsFilterInput(BaseModel):
    category: Optional["MerchantCategoryFilterInput"] = None
    name: Optional["StringSearchFilterInput"] = None
    country_code_alpha_3: Optional[ISO3166Alpha3Country] = Field(
        alias="countryCodeAlpha3", default=None
    )
    description: Optional["StringSearchFilterInput"] = None


class TransactionEventsFilterInput(BaseModel):
    operational_currency: Optional[ISO4217Alpha3CurrencyCode] = Field(
        alias="operationalCurrency", default=None
    )
    event_type: Optional["TransactionEventFilterInput"] = Field(
        alias="eventType", default=None
    )
    requested_amount: Optional["MoneyFilterInput"] = Field(
        alias="requestedAmount", default=None
    )
    approved_amount: Optional["MoneyFilterInput"] = Field(
        alias="approvedAmount", default=None
    )
    response_code: Optional["TransactionEventResponseCodeFilterInput"] = Field(
        alias="responseCode", default=None
    )
    avs_response_code: Optional["AVSResponseCodeFilterInput"] = Field(
        alias="avsResponseCode", default=None
    )
    postal_code_response_code: Optional["PostalCodeResponseCodeFilterInput"] = Field(
        alias="postalCodeResponseCode", default=None
    )
    cvv_response_code: Optional["CVVResponseCodeFilterInput"] = Field(
        alias="cvvResponseCode", default=None
    )
    transaction_type: Optional["TransactionTypeFilterInput"] = Field(
        alias="transactionType", default=None
    )
    payment_card_id: Optional["IDFilterInput"] = Field(
        alias="paymentCardId", default=None
    )
    card_product_id: Optional["IDFilterInput"] = Field(
        alias="cardProductId", default=None
    )
    transaction_id: Optional["IDFilterInput"] = Field(
        alias="transactionId", default=None
    )
    id: Optional["IDFilterInput"] = None
    created_at: Optional["TimestampFilterInput"] = Field(
        alias="createdAt", default=None
    )
    updated_at: Optional["TimestampFilterInput"] = Field(
        alias="updatedAt", default=None
    )
    merchant_details: Optional["MerchantDetailsFilterInput"] = Field(
        alias="merchantDetails", default=None
    )
    only_open_authorizations: Optional["BooleanFilterInput"] = Field(
        alias="onlyOpenAuthorizations", default=None
    )
    authorization_expiration: Optional["TimestampFilterInput"] = Field(
        alias="authorizationExpiration", default=None
    )


class CardProductTransactionEventsFilterInput(BaseModel):
    operational_currency: Optional[ISO4217Alpha3CurrencyCode] = Field(
        alias="operationalCurrency", default=None
    )
    event_type: Optional["TransactionEventFilterInput"] = Field(
        alias="eventType", default=None
    )
    requested_amount: Optional["MoneyFilterInput"] = Field(
        alias="requestedAmount", default=None
    )
    approved_amount: Optional["MoneyFilterInput"] = Field(
        alias="approvedAmount", default=None
    )
    response_code: Optional["TransactionEventResponseCodeFilterInput"] = Field(
        alias="responseCode", default=None
    )
    avs_response_code: Optional["AVSResponseCodeFilterInput"] = Field(
        alias="avsResponseCode", default=None
    )
    postal_code_response_code: Optional["PostalCodeResponseCodeFilterInput"] = Field(
        alias="postalCodeResponseCode", default=None
    )
    cvv_response_code: Optional["CVVResponseCodeFilterInput"] = Field(
        alias="cvvResponseCode", default=None
    )
    transaction_type: Optional["TransactionTypeFilterInput"] = Field(
        alias="transactionType", default=None
    )
    payment_card_id: Optional["IDFilterInput"] = Field(
        alias="paymentCardId", default=None
    )
    card_product_id: Optional["IDFilterInput"] = Field(
        alias="cardProductId", default=None
    )
    transaction_id: Optional["IDFilterInput"] = Field(
        alias="transactionId", default=None
    )
    id: Optional["IDFilterInput"] = None
    created_at: Optional["TimestampFilterInput"] = Field(
        alias="createdAt", default=None
    )
    updated_at: Optional["TimestampFilterInput"] = Field(
        alias="updatedAt", default=None
    )
    merchant_details: Optional["MerchantDetailsFilterInput"] = Field(
        alias="merchantDetails", default=None
    )
    only_open_authorizations: Optional["BooleanFilterInput"] = Field(
        alias="onlyOpenAuthorizations", default=None
    )
    authorization_expiration: Optional["TimestampFilterInput"] = Field(
        alias="authorizationExpiration", default=None
    )


class PaymentCardTransactionEventsFilterInput(BaseModel):
    operational_currency: Optional[ISO4217Alpha3CurrencyCode] = Field(
        alias="operationalCurrency", default=None
    )
    event_type: Optional["TransactionEventFilterInput"] = Field(
        alias="eventType", default=None
    )
    requested_amount: Optional["MoneyFilterInput"] = Field(
        alias="requestedAmount", default=None
    )
    approved_amount: Optional["MoneyFilterInput"] = Field(
        alias="approvedAmount", default=None
    )
    response_code: Optional["TransactionEventResponseCodeFilterInput"] = Field(
        alias="responseCode", default=None
    )
    avs_response_code: Optional["AVSResponseCodeFilterInput"] = Field(
        alias="avsResponseCode", default=None
    )
    postal_code_response_code: Optional["PostalCodeResponseCodeFilterInput"] = Field(
        alias="postalCodeResponseCode", default=None
    )
    cvv_response_code: Optional["CVVResponseCodeFilterInput"] = Field(
        alias="cvvResponseCode", default=None
    )
    transaction_type: Optional["TransactionTypeFilterInput"] = Field(
        alias="transactionType", default=None
    )
    payment_card_id: Optional["IDFilterInput"] = Field(
        alias="paymentCardId", default=None
    )
    transaction_id: Optional["IDFilterInput"] = Field(
        alias="transactionId", default=None
    )
    id: Optional["IDFilterInput"] = None
    created_at: Optional["TimestampFilterInput"] = Field(
        alias="createdAt", default=None
    )
    updated_at: Optional["TimestampFilterInput"] = Field(
        alias="updatedAt", default=None
    )
    merchant_details: Optional["MerchantDetailsFilterInput"] = Field(
        alias="merchantDetails", default=None
    )
    only_open_authorizations: Optional["BooleanFilterInput"] = Field(
        alias="onlyOpenAuthorizations", default=None
    )
    authorization_expiration: Optional["TimestampFilterInput"] = Field(
        alias="authorizationExpiration", default=None
    )


class TransactionEventFilterInput(BaseModel):
    equals: Optional[TransactionEventFilter] = None
    not_equals: Optional[TransactionEventFilter] = Field(
        alias="notEquals", default=None
    )
    includes: Optional[List[TransactionEventFilter]] = None
    excludes: Optional[List[TransactionEventFilter]] = None


class LedgerEntriesFilterInput(BaseModel):
    ledger_name: Optional["LedgerNameFilterInput"] = Field(
        alias="ledgerName", default=None
    )
    created_at: Optional["TimestampFilterInput"] = Field(
        alias="createdAt", default=None
    )


class StringFilterInput(BaseModel):
    equals: Optional[str] = None
    not_equals: Optional[str] = Field(alias="notEquals", default=None)
    includes: Optional[List[str]] = None
    excludes: Optional[List[str]] = None


class StringSearchFilterInput(BaseModel):
    starts_with: Optional[str] = Field(alias="startsWith", default=None)
    ends_with: Optional[str] = Field(alias="endsWith", default=None)
    contains: Optional[str] = None
    equals: Optional[str] = None
    not_equals: Optional[str] = Field(alias="notEquals", default=None)
    includes: Optional[List[str]] = None
    excludes: Optional[List[str]] = None


class SoundsLikeFilterInput(BaseModel):
    sounds_like: Optional[List[str]] = Field(alias="soundsLike", default=None)


class IDFilterInput(BaseModel):
    equals: Optional[str] = None
    not_equals: Optional[str] = Field(alias="notEquals", default=None)
    includes: Optional[List[str]] = None
    excludes: Optional[List[str]] = None


class MerchantCategoryFilterInput(BaseModel):
    equals: Optional[MerchantCategory] = None
    not_equals: Optional[MerchantCategory] = Field(alias="notEquals", default=None)
    includes: Optional[List[MerchantCategory]] = None
    excludes: Optional[List[MerchantCategory]] = None


class TransactionEventResponseCodeFilterInput(BaseModel):
    equals: Optional[TransactionEventResponseCode] = None
    not_equals: Optional[TransactionEventResponseCode] = Field(
        alias="notEquals", default=None
    )
    includes: Optional[List[TransactionEventResponseCode]] = None
    excludes: Optional[List[TransactionEventResponseCode]] = None


class AVSResponseCodeFilterInput(BaseModel):
    equals: Optional[AVSResponseCode] = None
    not_equals: Optional[AVSResponseCode] = Field(alias="notEquals", default=None)
    includes: Optional[List[AVSResponseCode]] = None
    excludes: Optional[List[AVSResponseCode]] = None


class PostalCodeResponseCodeFilterInput(BaseModel):
    equals: Optional[PostalCodeResponseCode] = None
    not_equals: Optional[PostalCodeResponseCode] = Field(
        alias="notEquals", default=None
    )
    includes: Optional[List[PostalCodeResponseCode]] = None
    excludes: Optional[List[PostalCodeResponseCode]] = None


class CVVResponseCodeFilterInput(BaseModel):
    equals: Optional[CVVResponseCode] = None
    not_equals: Optional[CVVResponseCode] = Field(alias="notEquals", default=None)
    includes: Optional[List[CVVResponseCode]] = None
    excludes: Optional[List[CVVResponseCode]] = None


class TransactionTypeFilterInput(BaseModel):
    equals: Optional[TransactionTypeFilter] = None
    not_equals: Optional[TransactionTypeFilter] = Field(alias="notEquals", default=None)
    includes: Optional[List[TransactionTypeFilter]] = None
    excludes: Optional[List[TransactionTypeFilter]] = None


class DateFilterInput(BaseModel):
    equals: Optional[str] = None
    not_equals: Optional[str] = Field(alias="notEquals", default=None)
    less_than: Optional[str] = Field(alias="lessThan", default=None)
    less_than_or_equals: Optional[str] = Field(alias="lessThanOrEquals", default=None)
    greater_than: Optional[str] = Field(alias="greaterThan", default=None)
    greater_than_or_equals: Optional[str] = Field(
        alias="greaterThanOrEquals", default=None
    )
    between: Optional["DateFilterInputRange"] = None


class DateFilterInputRange(BaseModel):
    start: Optional[str] = None
    end: Optional[str] = None


class MoneyFilterInput(BaseModel):
    currency_code: ISO4217Alpha3CurrencyCode = Field(alias="currencyCode")
    equals: Optional[Any] = None
    not_equals: Optional[Any] = Field(alias="notEquals", default=None)
    less_than: Optional[Any] = Field(alias="lessThan", default=None)
    less_than_or_equals: Optional[Any] = Field(alias="lessThanOrEquals", default=None)
    greater_than: Optional[Any] = Field(alias="greaterThan", default=None)
    greater_than_or_equals: Optional[Any] = Field(
        alias="greaterThanOrEquals", default=None
    )
    includes: Optional[List[Any]] = None
    excludes: Optional[List[Any]] = None
    between: Optional["MoneyFilterInputRange"] = None


class MoneyFilterInputRange(BaseModel):
    start: Optional[Any] = None
    end: Optional[Any] = None


class TimestampFilterInput(BaseModel):
    equals: Optional[str] = None
    not_equals: Optional[str] = Field(alias="notEquals", default=None)
    less_than: Optional[str] = Field(alias="lessThan", default=None)
    less_than_or_equals: Optional[str] = Field(alias="lessThanOrEquals", default=None)
    greater_than: Optional[str] = Field(alias="greaterThan", default=None)
    greater_than_or_equals: Optional[str] = Field(
        alias="greaterThanOrEquals", default=None
    )
    between: Optional["TimestampFilterInputRange"] = None


class TimestampFilterInputRange(BaseModel):
    start: Optional[str] = None
    end: Optional[str] = None


class BooleanFilterInput(BaseModel):
    equals: bool


class HashedFilterInput(BaseModel):
    equals: Optional[str] = None
    not_equals: Optional[str] = Field(alias="notEquals", default=None)
    includes: Optional[List[str]] = None
    excludes: Optional[List[str]] = None


class LedgerNameFilterInput(BaseModel):
    equals: Optional[LedgerName] = None
    not_equals: Optional[LedgerName] = Field(alias="notEquals", default=None)
    includes: Optional[List[LedgerName]] = None
    excludes: Optional[List[LedgerName]] = None


class FinancialAccountPaymentCardsFilterInput(BaseModel):
    bin: Optional["StringFilterInput"] = None
    card_network: Optional["PaymentCardNetworkFilterInput"] = Field(
        alias="cardNetwork", default=None
    )
    expiration_date: Optional["TimestampFilterInput"] = Field(
        alias="expirationDate", default=None
    )
    last_4: Optional["StringFilterInput"] = Field(alias="last4", default=None)
    account_holder_id: Optional["IDFilterInput"] = Field(
        alias="accountHolderId", default=None
    )
    status: Optional["PaymentCardStatusFilterInput"] = None
    form_factor: Optional["CardFormFactorFilterInput"] = Field(
        alias="formFactor", default=None
    )
    create_date: Optional["TimestampFilterInput"] = Field(
        alias="createDate", default=None
    )
    update_date: Optional["TimestampFilterInput"] = Field(
        alias="updateDate", default=None
    )
    custom_fields: Optional["CustomFieldsFilterInput"] = Field(
        alias="customFields", default=None
    )


class FinancialAccountActivityTypeFilterInput(BaseModel):
    equals: Optional[FinancialAccountActivityType] = None
    not_equals: Optional[FinancialAccountActivityType] = Field(
        alias="notEquals", default=None
    )
    includes: Optional[List[FinancialAccountActivityType]] = None
    excludes: Optional[List[FinancialAccountActivityType]] = None


class FeeTransferEventFilterInput(BaseModel):
    card_product_id: Optional["StringFilterInput"] = Field(
        alias="cardProductId", default=None
    )
    originating_account_id: Optional["StringFilterInput"] = Field(
        alias="originatingAccountId", default=None
    )
    receiving_account_id: Optional["StringFilterInput"] = Field(
        alias="receivingAccountId", default=None
    )
    transfer_date: Optional["TimestampFilterInput"] = Field(
        alias="transferDate", default=None
    )
    create_date: Optional["TimestampFilterInput"] = Field(
        alias="createDate", default=None
    )
    update_date: Optional["TimestampFilterInput"] = Field(
        alias="updateDate", default=None
    )


class CustomFieldsFilterInput(BaseModel):
    equals: Optional["CustomFieldInput"] = None
    not_equals: Optional["CustomFieldInput"] = Field(alias="notEquals", default=None)
    includes: Optional[List["CustomFieldInput"]] = None
    excludes: Optional[List["CustomFieldInput"]] = None


class SetEmailForNotificationTargetInput(BaseModel):
    target_id: str = Field(alias="targetId")
    email: str


class RemoveEmailFromNotificationTargetInput(BaseModel):
    target_id: str = Field(alias="targetId")


class NotificationTimestampFilterInput(BaseModel):
    equals: Optional[str] = None
    not_equals: Optional[str] = Field(alias="notEquals", default=None)
    less_than: Optional[str] = Field(alias="lessThan", default=None)
    less_than_or_equals: Optional[str] = Field(alias="lessThanOrEquals", default=None)
    greater_than: Optional[str] = Field(alias="greaterThan", default=None)
    greater_than_or_equals: Optional[str] = Field(
        alias="greaterThanOrEquals", default=None
    )
    between: Optional["NotificationTimestampFilterInputRange"] = None


class NotificationTimestampFilterInputRange(BaseModel):
    start: Optional[str] = None
    end: Optional[str] = None


class NotificationEventsFilterInput(BaseModel):
    created_at: Optional["NotificationTimestampFilterInput"] = Field(
        alias="createdAt", default=None
    )
    name: Optional[List[NotificationEventName]] = None


class AddWebhookNotificationTargetInput(BaseModel):
    name: str
    uri: str
    email: Optional[str] = None
    subscriptions: List[NotificationEventName]


class ActivateNotificationTargetInput(BaseModel):
    target_id: str = Field(alias="targetId")


class DeactivateNotificationTargetInput(BaseModel):
    target_id: str = Field(alias="targetId")


class RemoveNotificationTargetInput(BaseModel):
    target_id: str = Field(alias="targetId")


class RenameNotificationTargetInput(BaseModel):
    target_id: str = Field(alias="targetId")
    name: str


class ReplayNotificationEventInput(BaseModel):
    notification_event_id: str = Field(alias="notificationEventId")
    target_ids: Optional[List[str]] = Field(alias="targetIds", default=None)


class AddSubscriptionsToNotificationTargetInput(BaseModel):
    target_id: str = Field(alias="targetId")
    subscriptions: List[NotificationEventName]


class RemoveSubscriptionsFromNotificationTargetInput(BaseModel):
    target_id: str = Field(alias="targetId")
    subscriptions: List[NotificationEventName]


class RotateNotificationTargetSigningKeyInput(BaseModel):
    target_id: str = Field(alias="targetId")


class WebhookNotificationTargetEventFilterInput(BaseModel):
    event_created_at: Optional["NotificationTimestampFilterInput"] = Field(
        alias="eventCreatedAt", default=None
    )
    name: Optional[List[NotificationEventName]] = None
    has_successful_delivery: Optional[bool] = Field(
        alias="hasSuccessfulDelivery", default=None
    )


class AddCollaborativeAuthorizationEndpointInput(BaseModel):
    name: str
    uri: str


class ActivateCollaborativeAuthorizationEndpointInput(BaseModel):
    endpoint_id: str = Field(alias="endpointId")


class EnableCollaborativeAuthorizationFeatureInput(BaseModel):
    card_product_id: str = Field(alias="cardProductId")


class DeactivateCollaborativeAuthorizationEndpointInput(BaseModel):
    endpoint_id: str = Field(alias="endpointId")


class RemoveCollaborativeAuthorizationEndpointInput(BaseModel):
    endpoint_id: str = Field(alias="endpointId")


class RenameCollaborativeAuthorizationEndpointInput(BaseModel):
    endpoint_id: str = Field(alias="endpointId")
    name: str


class InitiatePayrollAdvanceInput(BaseModel):
    from_financial_account_id: str = Field(alias="fromFinancialAccountId")
    to_financial_account_id: str = Field(alias="toFinancialAccountId")
    amount: "AmountInput"
    memo: Optional[str] = None
    idempotency_key: Optional[Any] = Field(alias="idempotencyKey", default=None)


class InitiateFundPaymentCardFinancialAccountTransferInput(BaseModel):
    from_financial_account_id: str = Field(alias="fromFinancialAccountId")
    to_financial_account_id: str = Field(alias="toFinancialAccountId")
    amount: "AmountInput"
    memo: Optional[str] = None
    idempotency_key: Optional[Any] = Field(alias="idempotencyKey", default=None)


class InitiateTransferFromFundingFinancialAccountToPaymentCardFinancialAccountInput(
    BaseModel
):
    from_financial_account_id: str = Field(alias="fromFinancialAccountId")
    to_financial_account_id: str = Field(alias="toFinancialAccountId")
    amount: "AmountInput"
    memo: Optional[str] = None
    idempotency_key: Optional[Any] = Field(alias="idempotencyKey", default=None)


class InitiateTransferBetweenFinancialAccountsInput(BaseModel):
    from_financial_account_id: str = Field(alias="fromFinancialAccountId")
    to_financial_account_id: str = Field(alias="toFinancialAccountId")
    amount: "AmountInput"
    purpose: TransferPurpose
    memo: Optional[str] = None
    idempotency_key: Optional[Any] = Field(alias="idempotencyKey", default=None)


class InitiateTransferFromPaymentCardFinancialAccountToFundingFinancialAccountInput(
    BaseModel
):
    from_financial_account_id: str = Field(alias="fromFinancialAccountId")
    to_financial_account_id: str = Field(alias="toFinancialAccountId")
    amount: "AmountInput"
    memo: Optional[str] = None
    idempotency_key: Optional[Any] = Field(alias="idempotencyKey", default=None)


class InitiateFinancialAccountCreditLimitUpdateFromProductFundingInput(BaseModel):
    financial_account_id: str = Field(alias="financialAccountId")
    amount: "AmountInput"
    memo: Optional[str] = None
    idempotency_key: Optional[Any] = Field(alias="idempotencyKey", default=None)


class ConfirmPayrollDepositInput(BaseModel):
    id: str
    is_payroll_deposit: Optional[bool] = Field(alias="isPayrollDeposit", default=None)
    employer_financial_account_id: Optional[str] = Field(
        alias="employerFinancialAccountId", default=None
    )


class InitiateFundsWithdrawalACHTransferInput(BaseModel):
    from_financial_account_id: str = Field(alias="fromFinancialAccountId")
    to_financial_account_id: str = Field(alias="toFinancialAccountId")
    amount: "AmountInput"
    descriptor: "ACHDescriptorInput"
    transfer_agreement_consent: "TransferAgreementConsentInput" = Field(
        alias="transferAgreementConsent"
    )
    idempotency_key: Optional[str] = Field(alias="idempotencyKey", default=None)
    cancellation_period_millis: Optional[Any] = Field(
        alias="cancellationPeriodMillis", default=None
    )
    same_day: Optional[bool] = Field(alias="sameDay", default=None)
    payment_related_information: Optional[str] = Field(
        alias="paymentRelatedInformation", default=None
    )


class InitiateFundsDepositACHTransferInput(BaseModel):
    from_financial_account_id: str = Field(alias="fromFinancialAccountId")
    to_financial_account_id: str = Field(alias="toFinancialAccountId")
    amount: "AmountInput"
    descriptor: "ACHDescriptorInput"
    transfer_agreement_consent: "TransferAgreementConsentInput" = Field(
        alias="transferAgreementConsent"
    )
    idempotency_key: Optional[str] = Field(alias="idempotencyKey", default=None)
    cancellation_period_millis: Optional[Any] = Field(
        alias="cancellationPeriodMillis", default=None
    )
    same_day: Optional[bool] = Field(alias="sameDay", default=None)
    payment_related_information: Optional[str] = Field(
        alias="paymentRelatedInformation", default=None
    )


class InitiateSecureDepositACHTransferInput(BaseModel):
    from_financial_account_id: str = Field(alias="fromFinancialAccountId")
    to_financial_account_id: str = Field(alias="toFinancialAccountId")
    amount: "AmountInput"
    descriptor: "ACHDescriptorInput"
    transfer_agreement_consent: "TransferAgreementConsentInput" = Field(
        alias="transferAgreementConsent"
    )
    idempotency_key: Optional[str] = Field(alias="idempotencyKey", default=None)
    cancellation_period_millis: Optional[Any] = Field(
        alias="cancellationPeriodMillis", default=None
    )
    payment_related_information: Optional[str] = Field(
        alias="paymentRelatedInformation", default=None
    )


class SimulateProcessingIntegratorInitiatedStatusChangeInput(BaseModel):
    id: str


class SimulateProcessedIntegratorInitiatedStatusChangeInput(BaseModel):
    id: str


class SimulateReturnedIntegratorInitiatedStatusChangeInput(BaseModel):
    id: str
    reason_code: IntegratorInitiatedACHStatusReasonCode = Field(alias="reasonCode")


class SimulateExternallyInitiatedACHTransferInput(BaseModel):
    financial_account_id: str = Field(alias="financialAccountId")
    company_identifier: Optional[str] = Field(alias="companyIdentifier", default=None)
    company_name: Optional[str] = Field(alias="companyName", default=None)
    company_entry_description: Optional[str] = Field(
        alias="companyEntryDescription", default=None
    )
    individual_identification_number: Optional[str] = Field(
        alias="individualIdentificationNumber", default=None
    )
    individual_name: Optional[str] = Field(alias="individualName", default=None)
    amount: Optional["AmountInput"] = None
    transfer_type: Optional[TransferType] = Field(alias="transferType", default=None)
    settlement_date: Optional[str] = Field(alias="settlementDate", default=None)


class SimulateProcessingExternallyInitiatedStatusChangeInput(BaseModel):
    id: str


class ACHDescriptorInput(BaseModel):
    company_entry_description: str = Field(alias="companyEntryDescription")
    individual_name: str = Field(alias="individualName")
    individual_identification_number: Optional[str] = Field(
        alias="individualIdentificationNumber", default=None
    )


class CreateOneTimeACHTransferInput(BaseModel):
    from_financial_account_id: str = Field(alias="fromFinancialAccountId")
    to_financial_account_id: str = Field(alias="toFinancialAccountId")
    descriptor: "ACHDescriptorInput"
    transfer_agreement_consent: "TransferAgreementConsentInput" = Field(
        alias="transferAgreementConsent"
    )
    transfer_amount_strategy: "AmountStrategyInput" = Field(
        alias="transferAmountStrategy"
    )
    transfer_date: str = Field(alias="transferDate")


class CreateRecurringACHTransferInput(BaseModel):
    from_financial_account_id: str = Field(alias="fromFinancialAccountId")
    to_financial_account_id: str = Field(alias="toFinancialAccountId")
    frequency: RecurringAchTransferFrequencyCode
    transfer_amount_strategy: "AmountStrategyInput" = Field(
        alias="transferAmountStrategy"
    )
    descriptor: "ACHDescriptorInput"
    transfer_day_of_month: int = Field(alias="transferDayOfMonth")
    transfer_agreement_consent: "TransferAgreementConsentInput" = Field(
        alias="transferAgreementConsent"
    )


class AmountStrategyInput(BaseModel):
    balance_amount_type: Optional[TransferBalanceAmountCode] = Field(
        alias="balanceAmountType", default=None
    )
    transfer_amount: Optional["AmountInput"] = Field(
        alias="transferAmount", default=None
    )


class TransferAgreementConsentInput(BaseModel):
    consent_timestamp: str = Field(alias="consentTimestamp")
    authorized_person_id: str = Field(alias="authorizedPersonId")
    template: "TransferAgreementConsentTemplateInput"


class TransferAgreementConsentTemplateInput(BaseModel):
    consent_template_id: str = Field(alias="consentTemplateId")
    consent_template_version: str = Field(alias="consentTemplateVersion")


class CancelScheduledTransferInput(BaseModel):
    scheduled_transfer_id: str = Field(alias="scheduledTransferId")


class SimulateDepositInput(BaseModel):
    amount: "AmountInput"
    source: ElectronicFundTransferSource
    to_financial_account_id: str = Field(alias="toFinancialAccountId")
    memo: Optional[str] = None


class InitiateAchTransferInput(BaseModel):
    idempotency_key: str = Field(alias="idempotencyKey")
    from_financial_account_id: str = Field(alias="fromFinancialAccountId")
    to_financial_account_id: str = Field(alias="toFinancialAccountId")
    purpose: AchTransferPurpose
    amount: "AmountInput"
    transfer_agreement_consent: "TransferAgreementConsentInput" = Field(
        alias="transferAgreementConsent"
    )
    cancellation_period_millis: Optional[Any] = Field(
        alias="cancellationPeriodMillis", default=None
    )
    same_day: Optional[bool] = Field(alias="sameDay", default=None)
    company_entry_description: str = Field(alias="companyEntryDescription")
    individual_name: str = Field(alias="individualName")
    individual_identification_number: Optional[str] = Field(
        alias="individualIdentificationNumber", default=None
    )
    payment_related_information: Optional[str] = Field(
        alias="paymentRelatedInformation", default=None
    )


class SimulateNonOriginatedAchTransferInput(BaseModel):
    idempotency_key: str = Field(alias="idempotencyKey")
    financial_account_id: str = Field(alias="financialAccountId")
    amount: "AmountInput"
    purpose: AchTransferPurpose
    settlement_date: Optional[str] = Field(alias="settlementDate", default=None)
    company_identifier: str = Field(alias="companyIdentifier")
    company_name: str = Field(alias="companyName")
    company_discretionary_data: Optional[str] = Field(
        alias="companyDiscretionaryData", default=None
    )
    company_entry_description: str = Field(alias="companyEntryDescription")
    individual_identification_number: Optional[str] = Field(
        alias="individualIdentificationNumber", default=None
    )
    individual_name: str = Field(alias="individualName")
    payment_related_information: Optional[str] = Field(
        alias="paymentRelatedInformation", default=None
    )


class SimulateAchTransferProcessingInput(BaseModel):
    id: str


class SimulateAchTransferReturnInput(BaseModel):
    id: str
    status_failure_reason: AchTransferStatusFailureReason = Field(
        alias="statusFailureReason"
    )


class StartDocumentUploadSessionInput(BaseModel):
    document_upload_session_id: str = Field(alias="documentUploadSessionId")


class CreateDocumentUploadLinkInput(BaseModel):
    document_upload_session_id: str = Field(alias="documentUploadSessionId")
    document_type: DocumentType = Field(alias="documentType")


class EndDocumentUploadSessionInput(BaseModel):
    document_upload_session_id: str = Field(alias="documentUploadSessionId")


class FinancialAccountActivitiesFilterInput(BaseModel):
    posted_amount: Optional["MoneyFilterInput"] = Field(
        alias="postedAmount", default=None
    )
    pending_amount: Optional["MoneyFilterInput"] = Field(
        alias="pendingAmount", default=None
    )
    created_at: Optional["TimestampFilterInput"] = Field(
        alias="createdAt", default=None
    )
    updated_at: Optional["TimestampFilterInput"] = Field(
        alias="updatedAt", default=None
    )
    is_complete: Optional["BooleanFilterInput"] = Field(
        alias="isComplete", default=None
    )
    is_sign_negative: Optional["BooleanFilterInput"] = Field(
        alias="isSignNegative", default=None
    )
    activity_type: Optional["FinancialAccountActivityTypeFilterInput"] = Field(
        alias="activityType", default=None
    )


class CreateRewardMerchantCategoryEarnRuleInput(BaseModel):
    name: str
    reward_point_earning: "RewardEarnRateInput" = Field(alias="rewardPointEarning")
    allowed_list: List[MerchantCategory] = Field(alias="allowedList")


class CreateRewardDefaultEarnRuleInput(BaseModel):
    name: str
    reward_point_earning: "RewardEarnRateInput" = Field(alias="rewardPointEarning")


class RewardEarnRateInput(BaseModel):
    rate: str


class AttachRewardEarnRuleToProductInput(BaseModel):
    reward_rule: "RewardRuleAttachmentInput" = Field(alias="rewardRule")
    card_product_id: str = Field(alias="cardProductId")
    effective_from: Optional[str] = Field(alias="effectiveFrom", default=None)
    effective_through: Optional[str] = Field(alias="effectiveThrough", default=None)


class RewardRuleAttachmentInput(BaseModel):
    id: str


class UpdateRewardRuleAttachmentInput(BaseModel):
    attachment_id: str = Field(alias="attachmentId")
    effective_through: str = Field(alias="effectiveThrough")


class CreateRewardRedemptionConfigurationInput(BaseModel):
    name: str
    reward_point_redemption: "RewardRedemptionRateInput" = Field(
        alias="rewardPointRedemption"
    )


class AttachRewardRedemptionConfigurationToProductInput(BaseModel):
    redemption_configuration: "RewardRedemptionConfigurationAttachmentInput" = Field(
        alias="redemptionConfiguration"
    )
    card_product_id: str = Field(alias="cardProductId")
    effective_from: Optional[str] = Field(alias="effectiveFrom", default=None)
    effective_through: Optional[str] = Field(alias="effectiveThrough", default=None)


class RewardRedemptionConfigurationAttachmentInput(BaseModel):
    id: str


class UpdateRewardRedemptionConfigurationAttachmentInput(BaseModel):
    attachment_id: str = Field(alias="attachmentId")
    effective_through: Optional[str] = Field(alias="effectiveThrough", default=None)


class RewardRedemptionRateInput(BaseModel):
    rate: str


class RedeemRewardsForStatementCreditInput(BaseModel):
    financial_account_id: str = Field(alias="financialAccountId")
    redemption: "RedemptionCriteriaInput"
    memo: Optional[str] = None
    external_transaction_identifier: Optional[str] = Field(
        alias="externalTransactionIdentifier", default=None
    )


class RedemptionCriteriaInput(BaseModel):
    redemption_configuration_id: str = Field(alias="redemptionConfigurationId")
    points_to_redeem: Optional[Any] = Field(alias="pointsToRedeem", default=None)


class CreateRewardPointsAdjustmentInput(BaseModel):
    financial_account_id: str = Field(alias="financialAccountId")
    activity: RewardPointsActivityTypeInput
    points_to_adjust: Any = Field(alias="pointsToAdjust")
    memo: Optional[str] = None


class SimulateShiftCurrentFinancialAccountStatementPeriodInput(BaseModel):
    financial_account_id: str = Field(alias="financialAccountId")
    period_boundary: Optional[str] = Field(alias="periodBoundary", default=None)


class SimulateRolloverCurrentFinancialAccountStatementPeriodInput(BaseModel):
    financial_account_id: str = Field(alias="financialAccountId")


class FinancialAccountStatementFilterInput(BaseModel):
    period_start: Optional["TimestampFilterInput"] = Field(
        alias="periodStart", default=None
    )
    period_end: Optional["TimestampFilterInput"] = Field(
        alias="periodEnd", default=None
    )


class FinancialAccountStatementEntriesFilterInput(BaseModel):
    post_date: Optional["TimestampFilterInput"] = Field(alias="postDate", default=None)
    is_credit: Optional["BooleanFilterInput"] = Field(alias="isCredit", default=None)


class InitiateCustomerCardTransactionDisputeInput(BaseModel):
    card_transaction_event_id: str = Field(alias="cardTransactionEventId")
    category: PaymentCardDisputeCategoryType
    amount: "AmountInput"
    customer_initiated_on: str = Field(alias="customerInitiatedOn")
    customer_claim_type: PaymentCardDisputeCustomerClaimType = Field(
        alias="customerClaimType"
    )
    customer_contact: "CustomerContactInput" = Field(alias="customerContact")
    subscriber_note: Optional[str] = Field(alias="subscriberNote", default=None)


class CustomerContactInput(BaseModel):
    email: str
    given_name: str = Field(alias="givenName")
    family_name: str = Field(alias="familyName")
    phone: Optional["PhoneInput"] = None


class SimulateInitiateCardTransactionDisputeInput(BaseModel):
    card_transaction_event_id: str = Field(alias="cardTransactionEventId")
    category: PaymentCardDisputeCategoryType
    amount: "AmountInput"


class SimulateUpdateCardTransactionDisputeInput(BaseModel):
    id: str
    status: Optional[PaymentCardDisputeStatus] = None


class SimulateInitiateCardTransactionChargebackInput(BaseModel):
    dispute_id: str = Field(alias="disputeId")
    amount: "AmountInput"


class SimulateIssueCreditForCardTransactionDisputeInput(BaseModel):
    id: str


class SimulateIssueProvisionalCreditForCardTransactionDisputeInput(BaseModel):
    id: str
    chargeback_id: str = Field(alias="chargebackId")


class SimulateResolvePaymentCardTransactionChargebackInput(BaseModel):
    id: str
    dispute_id: str = Field(alias="disputeId")
    received_amount: "AmountInput" = Field(alias="receivedAmount")


class SimulateCreateApplicationDocumentsUploadSessionsInput(BaseModel):
    application_id: str = Field(alias="applicationId")
    memo: Optional[str] = None
    requested_documents: Optional[List["RequestedDocuments"]] = Field(
        alias="requestedDocuments", default=None
    )


class RequestedDocuments(BaseModel):
    applicant_id: str = Field(alias="applicantId")
    document_types: Optional[List[DocumentType]] = Field(
        alias="documentTypes", default=None
    )


class SuspendFinancialAccountInput(BaseModel):
    id: str
    suspension_reason: FinancialAccountSuspensionReasonInput = Field(
        alias="suspensionReason"
    )
    memo: str


class UnsuspendFinancialAccountInput(BaseModel):
    id: str
    memo: str


class SimulateCardDigitalWalletTokenActivationInput(BaseModel):
    payment_card_id: str = Field(alias="paymentCardId")


class SimulateCardDigitalWalletTokenActivatedInput(BaseModel):
    card_digital_wallet_token_id: str = Field(alias="cardDigitalWalletTokenId")


class AddPaymentCardToApplePayByDevicePushProvisioningInput(BaseModel):
    payment_card_id: str = Field(alias="paymentCardId")
    device_type: PaymentCardDigitalWalletDeviceType = Field(alias="deviceType")
    certificates: List[str]
    nonce: str
    nonce_signature: str = Field(alias="nonceSignature")


class AddPaymentCardToGooglePayByDevicePushProvisioningInput(BaseModel):
    payment_card_id: str = Field(alias="paymentCardId")
    device_type: PaymentCardDigitalWalletDeviceType = Field(alias="deviceType")
    display_name: Optional[str] = Field(alias="displayName", default=None)
    wallet_details: Optional["WalletDetailsInput"] = Field(
        alias="walletDetails", default=None
    )


class WalletDetailsInput(BaseModel):
    client_wallet_provider: WalletProviderType = Field(alias="clientWalletProvider")
    client_wallet_account_identifier: str = Field(alias="clientWalletAccountIdentifier")
    client_device_identifier: Optional[str] = Field(
        alias="clientDeviceIdentifier", default=None
    )


class AttachSpendRuleToFinancialAccountInput(BaseModel):
    financial_account_id: str = Field(alias="financialAccountId")
    spend_rule: "AttachSpendRuleInput" = Field(alias="spendRule")


class DetachSpendRuleFromFinancialAccountInput(BaseModel):
    financial_account_id: str = Field(alias="financialAccountId")
    spend_rule: "DetachSpendRuleInput" = Field(alias="spendRule")


class AttachVelocityRuleToFinancialAccountInput(BaseModel):
    financial_account_id: str = Field(alias="financialAccountId")
    velocity_rule: "VelocityRuleInput" = Field(alias="velocityRule")


class DetachVelocityRuleFromFinancialAccountInput(BaseModel):
    financial_account_id: str = Field(alias="financialAccountId")
    velocity_rule: "VelocityRuleInput" = Field(alias="velocityRule")


class AttachSpendRuleToCardProductInput(BaseModel):
    card_product_id: str = Field(alias="cardProductId")
    spend_rule: "AttachSpendRuleInput" = Field(alias="spendRule")


class DetachSpendRuleFromCardProductInput(BaseModel):
    card_product_id: str = Field(alias="cardProductId")
    spend_rule: "DetachSpendRuleInput" = Field(alias="spendRule")


class AttachSpendRuleToPaymentCardInput(BaseModel):
    payment_card_id: str = Field(alias="paymentCardId")
    spend_rule: "AttachSpendRuleInput" = Field(alias="spendRule")


class DetachSpendRuleFromPaymentCardInput(BaseModel):
    payment_card_id: str = Field(alias="paymentCardId")
    spend_rule: "DetachSpendRuleInput" = Field(alias="spendRule")


class AttachSpendRuleInput(BaseModel):
    id: str
    version: str


class DetachSpendRuleInput(BaseModel):
    id: str


class CreateMerchantCategorySpendRuleInput(BaseModel):
    name: str
    allowed: Optional[List[MerchantCategory]] = None
    blocked: Optional[List[MerchantCategory]] = None
    allowed_mcc: Optional[List[str]] = Field(alias="allowedMcc", default=None)
    blocked_mcc: Optional[List[str]] = Field(alias="blockedMcc", default=None)


class CreateMerchantCountrySpendRuleInput(BaseModel):
    name: str
    allowed: Optional[List[ISO3166Alpha3Country]] = None
    blocked: Optional[List[ISO3166Alpha3Country]] = None


class CreateCVVSpendRuleInput(BaseModel):
    name: str
    allowed: Optional[List[CVVResponseCode]] = None
    blocked: Optional[List[CVVResponseCode]] = None


class CreateStreetAddressSpendRuleInput(BaseModel):
    name: str
    allowed: Optional[List[AVSResponseCode]] = None
    blocked: Optional[List[AVSResponseCode]] = None


class CreateMerchantIdentifierSpendRuleInput(BaseModel):
    name: str
    allowed: Optional[List[str]] = None
    blocked: Optional[List[str]] = None


class CreateAmountLimitSpendRuleInput(BaseModel):
    name: str
    maximum_amount: "AmountInput" = Field(alias="maximumAmount")


class CreateCountLimitSpendRuleInput(BaseModel):
    name: str
    maximum_count: int = Field(alias="maximumCount")


class CreatePointOfServiceCategorySpendRuleInput(BaseModel):
    name: str
    allowed: Optional[List[PointOfServiceCategoryCondition]] = None
    blocked: Optional[List[PointOfServiceCategoryCondition]] = None


class CreatePostalCodeVerificationSpendRuleInput(BaseModel):
    name: str
    allowed: Optional[List[PostalCodeResponseCode]] = None
    blocked: Optional[List[PostalCodeResponseCode]] = None


class UpdatePostalCodeVerificationSpendRuleInput(BaseModel):
    spend_rule_id: str = Field(alias="spendRuleId")
    name: Optional[str] = None
    allowed: Optional[List[PostalCodeResponseCode]] = None
    blocked: Optional[List[PostalCodeResponseCode]] = None


class CreateDepositAmountLimitSpendRuleInput(BaseModel):
    name: str
    maximum_amount: "AmountInput" = Field(alias="maximumAmount")


class CreateDepositProcessingNetworkSpendRuleInput(BaseModel):
    name: str
    allowed: Optional[List[DepositProcessingNetwork]] = None
    blocked: Optional[List[DepositProcessingNetwork]] = None


class CreateDepositCountLimitSpendRuleInput(BaseModel):
    name: str
    maximum_count: Any = Field(alias="maximumCount")


class CreateConditionalRuleSetSpendRuleInput(BaseModel):
    name: str
    allow: bool


class UpdatePointOfServiceCategorySpendRuleInput(BaseModel):
    spend_rule_id: str = Field(alias="spendRuleId")
    name: Optional[str] = None
    allowed: Optional[List[PointOfServiceCategoryCondition]] = None
    blocked: Optional[List[PointOfServiceCategoryCondition]] = None


class UpdateMerchantCategorySpendRuleInput(BaseModel):
    spend_rule_id: str = Field(alias="spendRuleId")
    name: Optional[str] = None
    allowed: Optional[List[MerchantCategory]] = None
    blocked: Optional[List[MerchantCategory]] = None
    allowed_mcc: Optional[List[str]] = Field(alias="allowedMcc", default=None)
    blocked_mcc: Optional[List[str]] = Field(alias="blockedMcc", default=None)


class UpdateMerchantCountrySpendRuleInput(BaseModel):
    spend_rule_id: str = Field(alias="spendRuleId")
    name: Optional[str] = None
    allowed: Optional[List[ISO3166Alpha3Country]] = None
    blocked: Optional[List[ISO3166Alpha3Country]] = None


class UpdateCVVSpendRuleInput(BaseModel):
    spend_rule_id: str = Field(alias="spendRuleId")
    name: Optional[str] = None
    allowed: Optional[List[CVVResponseCode]] = None
    blocked: Optional[List[CVVResponseCode]] = None


class UpdateStreetAddressSpendRuleInput(BaseModel):
    spend_rule_id: str = Field(alias="spendRuleId")
    name: Optional[str] = None
    allowed: Optional[List[AVSResponseCode]] = None
    blocked: Optional[List[AVSResponseCode]] = None


class UpdateMerchantIdentifierSpendRuleInput(BaseModel):
    spend_rule_id: str = Field(alias="spendRuleId")
    name: Optional[str] = None
    allowed: Optional[List[str]] = None
    blocked: Optional[List[str]] = None


class UpdateAmountLimitSpendRuleInput(BaseModel):
    spend_rule_id: str = Field(alias="spendRuleId")
    name: Optional[str] = None
    maximum_amount: "AmountInput" = Field(alias="maximumAmount")


class UpdateCountLimitSpendRuleInput(BaseModel):
    spend_rule_id: str = Field(alias="spendRuleId")
    name: Optional[str] = None
    maximum_count: int = Field(alias="maximumCount")


class UpdateDepositProcessingNetworkSpendRuleInput(BaseModel):
    spend_rule_id: str = Field(alias="spendRuleId")
    name: str
    allowed: Optional[List[DepositProcessingNetwork]] = None
    blocked: Optional[List[DepositProcessingNetwork]] = None


class UpdateDepositAmountLimitSpendRuleInput(BaseModel):
    spend_rule_id: str = Field(alias="spendRuleId")
    name: Optional[str] = None
    maximum_amount: "AmountInput" = Field(alias="maximumAmount")


class UpdateDepositCountLimitSpendRuleInput(BaseModel):
    spend_rule_id: str = Field(alias="spendRuleId")
    name: Optional[str] = None
    maximum_count: Any = Field(alias="maximumCount")


class UpdateConditionalRuleSetSpendRuleInput(BaseModel):
    spend_rule_id: str = Field(alias="spendRuleId")
    name: Optional[str] = None
    allow: bool


class UpdateVelocityRuleInput(BaseModel):
    velocity_rule_id: str = Field(alias="velocityRuleId")
    name: str


class CreateCardTransactionProcessingTypeConditionSpendRuleInput(BaseModel):
    name: Optional[str] = None
    allowed: Optional[List[CardTransactionProcessingType]] = None
    blocked: Optional[List[CardTransactionProcessingType]] = None


class UpdateCardTransactionProcessingTypeConditionSpendRuleInput(BaseModel):
    spend_rule_id: str = Field(alias="spendRuleId")
    name: Optional[str] = None
    allowed: Optional[List[CardTransactionProcessingType]] = None
    blocked: Optional[List[CardTransactionProcessingType]] = None


class DeleteSpendRuleInput(BaseModel):
    spend_rule_id: str = Field(alias="spendRuleId")


class DeleteVelocityRuleInput(BaseModel):
    velocity_rule_id: str = Field(alias="velocityRuleId")


class CreatePanEntryModeSpendRuleInput(BaseModel):
    name: str
    allowed: Optional[List[PanEntryMode]] = None
    blocked: Optional[List[PanEntryMode]] = None


class UpdatePanEntryModeSpendRuleInput(BaseModel):
    spend_rule_id: str = Field(alias="spendRuleId")
    name: Optional[str] = None
    allowed: Optional[List[PanEntryMode]] = None
    blocked: Optional[List[PanEntryMode]] = None


class CreateCardDataInputCapabilitySpendRuleInput(BaseModel):
    name: str
    allowed: Optional[List[CardDataInputCapability]] = None
    blocked: Optional[List[CardDataInputCapability]] = None


class UpdateCardDataInputCapabilitySpendRuleInput(BaseModel):
    spend_rule_id: str = Field(alias="spendRuleId")
    name: Optional[str] = None
    allowed: Optional[List[CardDataInputCapability]] = None
    blocked: Optional[List[CardDataInputCapability]] = None


class CreateVelocityRuleInput(BaseModel):
    name: str
    cumulative_rule: "AttachSpendRuleInput" = Field(alias="cumulativeRule")
    spend_rules: Optional[List["AttachSpendRuleInput"]] = Field(
        alias="spendRules", default=None
    )
    velocity_rule_window: VelocityRuleWindow = Field(alias="velocityRuleWindow")
    velocity_constraint_level_override: Optional[VelocityConstraintLevel] = Field(
        alias="velocityConstraintLevelOverride", default=None
    )


class AttachPaymentCardVelocityRuleInput(BaseModel):
    payment_card_id: str = Field(alias="paymentCardId")
    velocity_rule: "VelocityRuleInput" = Field(alias="velocityRule")


class VelocityRuleInput(BaseModel):
    velocity_rule_id: str = Field(alias="velocityRuleId")
    version: Optional[str] = None


class DetachPaymentCardVelocityRuleInput(BaseModel):
    payment_card_id: str = Field(alias="paymentCardId")
    velocity_rule: "VelocityRuleInput" = Field(alias="velocityRule")


class AttachCardProductVelocityRuleInput(BaseModel):
    card_product_id: str = Field(alias="cardProductId")
    velocity_rule: "VelocityRuleInput" = Field(alias="velocityRule")


class DetachCardProductVelocityRuleInput(BaseModel):
    card_product_id: str = Field(alias="cardProductId")
    velocity_rule: "VelocityRuleInput" = Field(alias="velocityRule")


class CreateCardProductCreditPlanInput(BaseModel):
    name: str
    credit_plan_template_id: str = Field(alias="creditPlanTemplateId")
    product_id: str = Field(alias="productId")
    percentage_of_credit_limit: Any = Field(alias="percentageOfCreditLimit")
    default_apr: float = Field(alias="defaultApr")


class SimulateBackwardShiftAndAgeCurrentFinancialAccountStatementPeriodInput(BaseModel):
    financial_account_id: str = Field(alias="financialAccountId")
    number_of_cycles_to_shift_current_statement_backward: Any = Field(
        alias="numberOfCyclesToShiftCurrentStatementBackward"
    )


class CreateRevolvingCreditCardProductConfigurationInput(BaseModel):
    card_product_id: str = Field(alias="cardProductId")
    account_aging_configuration: "CreditAccountAgingProductConfigurationInput" = Field(
        alias="accountAgingConfiguration"
    )
    minimum_payment_configuration: (
        "CreditMinimumPaymentCardProductConfigurationInput"
    ) = Field(alias="minimumPaymentConfiguration")
    billing_cycle_configuration: "CreditBillingCycleCardProductConfigurationInput" = (
        Field(alias="billingCycleConfiguration")
    )


class CreateChargeCreditCardProductConfigurationInput(BaseModel):
    card_product_id: str = Field(alias="cardProductId")
    account_aging_configuration: "CreditAccountAgingProductConfigurationInput" = Field(
        alias="accountAgingConfiguration"
    )
    billing_cycle_configuration: "CreditBillingCycleCardProductConfigurationInput" = (
        Field(alias="billingCycleConfiguration")
    )


class CreditAccountAgingProductConfigurationInput(BaseModel):
    delinquent_in_days: Any = Field(alias="delinquentInDays")
    suspended_in_days: Any = Field(alias="suspendedInDays")
    charge_off_in_days: Any = Field(alias="chargeOffInDays")
    late_fee_grace_period_in_days: Any = Field(alias="lateFeeGracePeriodInDays")


class CreditMinimumPaymentCardProductConfigurationInput(BaseModel):
    percentage: float
    threshold_amount: "AmountInput" = Field(alias="thresholdAmount")


class CreditBillingCycleCardProductConfigurationInput(BaseModel):
    billing_cycle_grace_period_in_days: Optional[Any] = Field(
        alias="billingCycleGracePeriodInDays", default=None
    )


class ActivateCardProductCreditPlanInput(BaseModel):
    id: str
    effective_from_date: Optional[Any] = Field(alias="effectiveFromDate", default=None)
    effective_through_date: Optional[Any] = Field(
        alias="effectiveThroughDate", default=None
    )


class BillingCycleFilterInput(BaseModel):
    statement_period_start_or_end_between: Optional["TimestampFilterInputRange"] = (
        Field(alias="statementPeriodStartOrEndBetween", default=None)
    )


class SimulateCreateAndActivateFeeScheduleInput(BaseModel):
    card_product_id: str = Field(alias="cardProductId")
    fee_configurations: Optional[List["SimulateFeeConfigurationInput"]] = Field(
        alias="feeConfigurations", default=None
    )


class SimulateFeeConfigurationInput(BaseModel):
    fee_activity_type: FeeTransferEventFeeActivityTypeInput = Field(
        alias="feeActivityType"
    )
    fee_amount: "SimulatedFeeAmountInput" = Field(alias="feeAmount")


class SimulatedFeeAmountInput(BaseModel):
    fee_amount: Optional["AmountInput"] = Field(alias="feeAmount", default=None)
    fee_basis_points: Optional[Any] = Field(alias="feeBasisPoints", default=None)


class FeeScheduleFilterInput(BaseModel):
    activation_date: Optional["TimestampFilterInput"] = Field(
        alias="activationDate", default=None
    )
    create_date: Optional["TimestampFilterInput"] = Field(
        alias="createDate", default=None
    )
    update_date: Optional["TimestampFilterInput"] = Field(
        alias="updateDate", default=None
    )


class InitiateOrganizationReportInput(BaseModel):
    report_type: OrganizationReportType = Field(alias="reportType")
    parameters: "ReportParametersInput"


class ReportParametersInput(BaseModel):
    between: "ReportParameterTimestampRangeInput"


class ReportParameterTimestampRangeInput(BaseModel):
    start: str
    end: str


class ReportStatusFilterInput(BaseModel):
    includes: Optional[List[ReportStatus]] = None


class ReportTypeFilterInput(BaseModel):
    includes: Optional[List[ReportType]] = None


class ReportFilterInput(BaseModel):
    status: Optional["ReportStatusFilterInput"] = None
    report_type: Optional["ReportTypeFilterInput"] = Field(
        alias="reportType", default=None
    )
    create_date_filter: Optional["TimestampFilterInputRange"] = Field(
        alias="createDateFilter", default=None
    )


class FilteredCardProfileSetsInput(BaseModel):
    status: Optional["CardProfileSetStatusInput"] = None
    card_product_id: "IDFilterInput" = Field(alias="cardProductId")


class FilteredCardProductCardProfileSetsInput(BaseModel):
    status: Optional["CardProfileSetStatusInput"] = None


class CardProfileSetStatusInput(BaseModel):
    equals: Optional[CardProfileSetStatus] = None
    excludes: Optional[List[CardProfileSetStatus]] = None
    includes: Optional[List[CardProfileSetStatus]] = None
    not_equals: Optional[CardProfileSetStatus] = Field(alias="notEquals", default=None)


class PaymentTransactionFilterInput(BaseModel):
    card_product_id: Optional["IDFilterInput"] = Field(
        alias="cardProductId", default=None
    )


class CardHolderInput(BaseModel):
    full_name: Optional[str] = Field(alias="fullName", default=None)
    billing_address: Optional["AddressInput"] = Field(
        alias="billingAddress", default=None
    )


class PaymentCardInput(BaseModel):
    card_number: str = Field(alias="cardNumber")
    expiry_year: str = Field(alias="expiryYear")
    expiry_month: str = Field(alias="expiryMonth")
    security_code: Optional[str] = Field(alias="securityCode", default=None)


class AuthorizePaymentCardInput(BaseModel):
    payment_card: "PaymentCardInput" = Field(alias="paymentCard")
    card_holder: Optional["CardHolderInput"] = Field(alias="cardHolder", default=None)
    amount: "AmountInput"
    payment_initiator: Optional[AcquiringPaymentInitiator] = Field(
        alias="paymentInitiator", default=None
    )
    external_credential_on_file: Optional["AcquiringExternalCredentialOnFileInput"] = (
        Field(alias="externalCredentialOnFile", default=None)
    )
    contract_id: Optional[str] = Field(alias="contractId", default=None)
    idempotency_key: Optional[Any] = Field(alias="idempotencyKey", default=None)


class AuthorizePaymentMethodTokenInput(BaseModel):
    payment_method_token_id: str = Field(alias="paymentMethodTokenId")
    amount: "AmountInput"
    payment_initiator: Optional[AcquiringPaymentInitiator] = Field(
        alias="paymentInitiator", default=None
    )
    contract_id: Optional[str] = Field(alias="contractId", default=None)
    idempotency_key: Optional[Any] = Field(alias="idempotencyKey", default=None)


class CapturePaymentTransactionInput(BaseModel):
    payment_transaction_id: str = Field(alias="paymentTransactionId")
    amount: Optional["AmountInput"] = None
    contract_id: Optional[str] = Field(alias="contractId", default=None)
    idempotency_key: Optional[Any] = Field(alias="idempotencyKey", default=None)


class CancelPaymentTransactionInput(BaseModel):
    payment_transaction_id: str = Field(alias="paymentTransactionId")
    amount: Optional["AmountInput"] = None
    idempotency_key: Optional[Any] = Field(alias="idempotencyKey", default=None)


class RefundPaymentTransactionInput(BaseModel):
    payment_transaction_id: str = Field(alias="paymentTransactionId")
    amount: "AmountInput"
    idempotency_key: Optional[Any] = Field(alias="idempotencyKey", default=None)
    refund_reason: PaymentCreditTransactionRefundReason = Field(alias="refundReason")
    refund_note: Optional[str] = Field(alias="refundNote", default=None)


class VerifyPaymentCardInput(BaseModel):
    payment_card: "PaymentCardInput" = Field(alias="paymentCard")
    card_holder: Optional["CardHolderInput"] = Field(alias="cardHolder", default=None)
    contract_id: Optional[str] = Field(alias="contractId", default=None)
    idempotency_key: Optional[Any] = Field(alias="idempotencyKey", default=None)


class AcquiringExternalCredentialOnFileInput(BaseModel):
    network_transaction_identifier: Optional[str] = Field(
        alias="networkTransactionIdentifier", default=None
    )
    intend_to_store: Optional[bool] = Field(alias="intendToStore", default=None)


class ChargePaymentCardInput(BaseModel):
    payment_card: "PaymentCardInput" = Field(alias="paymentCard")
    card_holder: Optional["CardHolderInput"] = Field(alias="cardHolder", default=None)
    amount: "AmountInput"
    payment_initiator: Optional[AcquiringPaymentInitiator] = Field(
        alias="paymentInitiator", default=None
    )
    external_credential_on_file: Optional["AcquiringExternalCredentialOnFileInput"] = (
        Field(alias="externalCredentialOnFile", default=None)
    )
    contract_id: Optional[str] = Field(alias="contractId", default=None)
    idempotency_key: Optional[Any] = Field(alias="idempotencyKey", default=None)


class ChargePaymentOrderPaymentMethodTokenInput(BaseModel):
    order_id: str = Field(alias="orderId")
    amount: "AmountInput"
    payment_method_token_id: str = Field(alias="paymentMethodTokenId")
    payment_initiator: Optional[AcquiringPaymentInitiator] = Field(
        alias="paymentInitiator", default=None
    )
    external_credential_on_file: Optional["AcquiringExternalCredentialOnFileInput"] = (
        Field(alias="externalCredentialOnFile", default=None)
    )
    contract_id: Optional[str] = Field(alias="contractId", default=None)
    idempotency_key: Optional[Any] = Field(alias="idempotencyKey", default=None)


class ChargePaymentOrderInput(BaseModel):
    payment_card: "PaymentCardInput" = Field(alias="paymentCard")
    card_holder: Optional["CardHolderInput"] = Field(alias="cardHolder", default=None)
    order_id: str = Field(alias="orderId")
    amount: "AmountInput"
    payment_initiator: Optional[AcquiringPaymentInitiator] = Field(
        alias="paymentInitiator", default=None
    )
    external_credential_on_file: Optional["AcquiringExternalCredentialOnFileInput"] = (
        Field(alias="externalCredentialOnFile", default=None)
    )
    contract_id: Optional[str] = Field(alias="contractId", default=None)
    idempotency_key: Optional[Any] = Field(alias="idempotencyKey", default=None)


class ChargePaymentMethodTokenInput(BaseModel):
    payment_method_token_id: str = Field(alias="paymentMethodTokenId")
    amount: "AmountInput"
    payment_initiator: Optional[AcquiringPaymentInitiator] = Field(
        alias="paymentInitiator", default=None
    )
    contract_id: Optional[str] = Field(alias="contractId", default=None)
    idempotency_key: Optional[Any] = Field(alias="idempotencyKey", default=None)


class CardProductApplicationBusinessMetricFilterInput(BaseModel):
    time_range: Optional["TimestampFilterInputRange"] = Field(
        alias="timeRange", default=None
    )
    card_product_ids: Optional[List[str]] = Field(alias="cardProductIds", default=None)


class PaymentCardTransactionBusinessMetricFilterInput(BaseModel):
    time_range: Optional["TimestampFilterInputRange"] = Field(
        alias="timeRange", default=None
    )
    card_product_ids: Optional[List[str]] = Field(alias="cardProductIds", default=None)
    merchant_category_codes: Optional[List[str]] = Field(
        alias="merchantCategoryCodes", default=None
    )
    merchant_names: Optional[List[str]] = Field(alias="merchantNames", default=None)


class UpdateCustomFieldsInput(BaseModel):
    id: str
    custom_fields: Optional[List["CustomFieldInput"]] = Field(
        alias="customFields", default=None
    )


class DeleteCustomFieldsInput(BaseModel):
    id: str


class CustomFieldInput(BaseModel):
    key: str
    value: str


class TokenizeAddressInput(BaseModel):
    street_address: Optional[str] = Field(alias="streetAddress", default=None)
    extended_address: Optional[str] = Field(alias="extendedAddress", default=None)
    postal_code: str = Field(alias="postalCode")
    region: Optional[str] = None
    locality: Optional[str] = None
    country_code_alpha_3: Optional[str] = Field(alias="countryCodeAlpha3", default=None)


class TokenizeCardPaymentMethodCardHolderInput(BaseModel):
    full_name: Optional[str] = Field(alias="fullName", default=None)
    billing_address: Optional["TokenizeAddressInput"] = Field(
        alias="billingAddress", default=None
    )


class TokenizeCardPaymentMethodInput(BaseModel):
    payment_card: "PaymentCardInput" = Field(alias="paymentCard")
    card_holder: Optional["TokenizeCardPaymentMethodCardHolderInput"] = Field(
        alias="cardHolder", default=None
    )


class ValidateAddressInput(BaseModel):
    address: "AddressInput"
    idempotency_key: Any = Field(alias="idempotencyKey")


class PaymentInstructionInput(BaseModel):
    financial_account_id: str = Field(alias="financialAccountId")
    disbursement_percent: Optional[int] = Field(
        alias="disbursementPercent", default=None
    )
    disbursement_amount: Optional["AmountInput"] = Field(
        alias="disbursementAmount", default=None
    )


class CatalogPaymentOrderItemInput(BaseModel):
    id: str
    name: Optional[str] = None
    description: Optional[str] = None
    amount_per_item: Optional["AmountInput"] = Field(
        alias="amountPerItem", default=None
    )
    payment_instructions: Optional[List["PaymentInstructionInput"]] = Field(
        alias="paymentInstructions", default=None
    )
    quantity: Any
    external_identifier: Optional[str] = Field(alias="externalIdentifier", default=None)


class CustomPaymentOrderItemInput(BaseModel):
    name: str
    description: Optional[str] = None
    amount_per_item: "AmountInput" = Field(alias="amountPerItem")
    payment_instructions: Optional[List["PaymentInstructionInput"]] = Field(
        alias="paymentInstructions", default=None
    )
    quantity: Any
    external_identifier: Optional[str] = Field(alias="externalIdentifier", default=None)


class CreatePaymentOrderInput(BaseModel):
    catalog_items: Optional[List["CatalogPaymentOrderItemInput"]] = Field(
        alias="catalogItems", default=None
    )
    custom_items: Optional[List["CustomPaymentOrderItemInput"]] = Field(
        alias="customItems", default=None
    )
    idempotency_key: Optional[Any] = Field(alias="idempotencyKey", default=None)


MinimalUSAuthorizedPersonInput.model_rebuild()
CreateMinimalUSBusinessAccountHolderInput.model_rebuild()
InitiateUSBusinessProfileRequestedIdentityUpdateInput.model_rebuild()
InitiateUSBusinessAuthorizedPersonRequestedIdentityUpdateInput.model_rebuild()
InitiateUSBusinessUltimateBeneficialOwnerRequestedIdentityUpdateInput.model_rebuild()
DenyCreditProductApplicationUnderwritingInput.model_rebuild()
AcceptCounterOfferInput.model_rebuild()
ApproveCreditProductApplicationUnderwritingInput.model_rebuild()
ConfirmVerificationOfCreditProductApplicationForFraudAlertInput.model_rebuild()
CreateUSPersonAccountHolderInput.model_rebuild()
CreateUSPersonAuthorizedUserInput.model_rebuild()
USPersonAccountHolderInput.model_rebuild()
USPersonAuthorizedUserInput.model_rebuild()
CreateUSBusinessAccountHolderInput.model_rebuild()
USAuthorizedPersonInput.model_rebuild()
USAuthorizedPersonUpdateInput.model_rebuild()
MinimalUSBusinessProfileInput.model_rebuild()
USBusinessProfileInput.model_rebuild()
USBusinessProfileUpdateInput.model_rebuild()
MinimalUSUltimateBeneficialOwnerInput.model_rebuild()
USUltimateBeneficialOwnerInput.model_rebuild()
USUltimateBeneficialOwnerUpdateInput.model_rebuild()
CreateAccountHolderCardProductApplicationInput.model_rebuild()
CreateAuthorizedUserCardProductApplicationInput.model_rebuild()
ConsentInput.model_rebuild()
CreditRiskAttributesInput.model_rebuild()
BusinessCreditRiskAttributesInput.model_rebuild()
PersonCreditRiskAttributesInput.model_rebuild()
USIdentificationDocumentInput.model_rebuild()
USBusinessIdentificationDocumentInput.model_rebuild()
UpdateUSPersonAccountHolderBillingAddressInput.model_rebuild()
UpdateUSPersonAccountHolderPhoneInput.model_rebuild()
UpdateUSPersonAuthorizedUserBillingAddressInput.model_rebuild()
UpdateUSPersonAuthorizedUserPhoneInput.model_rebuild()
UpdateUSBusinessAccountHolderBillingAddressInput.model_rebuild()
UpdateUSBusinessAccountHolderPhoneInput.model_rebuild()
UpdateUSBusinessAccountHolderCreditRiskAttributeInput.model_rebuild()
UpdateUSPersonAccountHolderCreditRiskAttributeInput.model_rebuild()
UpdateUSAssociatedPersonAccountHolderHomeAddressInput.model_rebuild()
UpdateUSAssociatedPersonAccountHolderPhoneInput.model_rebuild()
AccountHolderCardProductApplicationOfferFilterByInput.model_rebuild()
PaymentCardTransactionDisputesFilterInput.model_rebuild()
PaymentCardTransactionChargebacksFilterInput.model_rebuild()
CardProductPaymentCardTransactionDisputesFilterInput.model_rebuild()
CardProductPaymentCardTransactionChargebacksFilterInput.model_rebuild()
FinancialAccountPaymentCardTransactionDisputesFilterInput.model_rebuild()
FinancialAccountPaymentCardTransactionChargebacksFilterInput.model_rebuild()
CreateGlobalNoteInput.model_rebuild()
CreateCreditLimitChangeRequestInput.model_rebuild()
CreditLimitChangeRequestDetailsInput.model_rebuild()
ApproveCreditLimitIncreaseInput.model_rebuild()
DenyCreditLimitIncreaseInput.model_rebuild()
ApproveCreditLimitDecreaseInput.model_rebuild()
DenyCreditLimitDecreaseInput.model_rebuild()
CreditLimitChangeRequestCustomerDetailsInput.model_rebuild()
CreateSecretAPIKeyInput.model_rebuild()
AddExternalBankAccountFromTokenInput.model_rebuild()
AddExternalBankAccountVerifiedThroughPlaidInput.model_rebuild()
AddExternalBankAccountVerifiedThroughFinicityInput.model_rebuild()
ExternalTokenFinicityInput.model_rebuild()
FinicityProduct.model_rebuild()
IssuePaymentCardForApplicationInput.model_rebuild()
IssuePaymentCardForAuthorizedUserApplicationInput.model_rebuild()
IssuePaymentCardForFinancialAccountInput.model_rebuild()
IssueFinancialAccountForApplicationInput.model_rebuild()
ReissuePaymentCardInput.model_rebuild()
ReissuePaymentCardOptionsInput.model_rebuild()
ATMLocationRadiusInput.model_rebuild()
ATMLocationViewportInput.model_rebuild()
CreateCardProductInput.model_rebuild()
InitiateFinancialAccountPseudoBalanceUpdateInput.model_rebuild()
CreateCardProductWithTemplateInput.model_rebuild()
AssignPaymentCardToFinancialAccountInput.model_rebuild()
SimulateRefundInput.model_rebuild()
SimulateReversalInput.model_rebuild()
SimulateClearingInput.model_rebuild()
SimulateVisaFleetClearingInput.model_rebuild()
VisaFleetL2TransactionDataInput.model_rebuild()
SimulateVisaFleetAuthorizationAdviceInput.model_rebuild()
SimulateAuthorizationInput.model_rebuild()
SimulateSingleStepAuthAndClearInput.model_rebuild()
SimulateVisaFleetAuthorizationInput.model_rebuild()
MerchantDetailsInput.model_rebuild()
VerificationOverridesInput.model_rebuild()
SimulateVisaFleetL3EnhancedDataDiscountInput.model_rebuild()
SimulateVisaFleetL3EnhancedDataDutyInput.model_rebuild()
SimulateVisaFleetL3EnhancedDataInvoiceInput.model_rebuild()
SimulateVisaFleetL3EnhancedDataShippingInput.model_rebuild()
SimulateVisaFleetL3EnhancedDataInput.model_rebuild()
SimulateVisaFleetL3EnhancedDataLineItemInput.model_rebuild()
VisaFleetL2FuelLineItemInput.model_rebuild()
SimulateMastercardFleetAuthorizationInput.model_rebuild()
SimulateMastercardFleetAuthorizationAdviceInput.model_rebuild()
SimulateMastercardFleetClearingInput.model_rebuild()
SimulateMastercardFleetEnhancedDataInput.model_rebuild()
SimulateMastercardFleetAuthorizationDataInput.model_rebuild()
SimulateMastercardFleetAuthorizationDataFuelProductInput.model_rebuild()
SimulateMastercardFleetAuthorizationDataNonFuelProductInput.model_rebuild()
AddFundsToPaymentCardInput.model_rebuild()
OrderPhysicalPaymentCardInput.model_rebuild()
OrderPhysicalPaymentCardWithValidatedAddressInput.model_rebuild()
PaymentCardDeliveryDetailsInput.model_rebuild()
PaymentCardDeliveryDetailsWithValidatedAddressInput.model_rebuild()
PaymentCardPersonalizationInput.model_rebuild()
CreatePhysicalCardGroupOrderInput.model_rebuild()
CreatePhysicalCardGroupOrderWithValidatedAddressInput.model_rebuild()
OrderPhysicalPaymentCardForGroupInput.model_rebuild()
PhysicalPaymentCardOrderFilterInput.model_rebuild()
PaymentCardFilterInput.model_rebuild()
PhysicalCardGroupOrderFilterInput.model_rebuild()
PhysicalPaymentCardGroupOrderFilterInput.model_rebuild()
IntegratorInitiatedACHTransferFilterInput.model_rebuild()
ExternallyInitiatedACHTransferFilterInput.model_rebuild()
OriginatedAchTransferFilterInput.model_rebuild()
NonOriginatedAchTransferFilterInput.model_rebuild()
CardProductPaymentCardsFilterInput.model_rebuild()
AccountHolderPaymentCardsFilterInput.model_rebuild()
AuthorizedUserPaymentCardsFilterInput.model_rebuild()
InterFinancialAccountTransferFilterInput.model_rebuild()
AccountHolderFinancialAccountsFilterInput.model_rebuild()
BusinessAccountHolderFilterInput.model_rebuild()
BusinessAccountHolderPrimaryAuthorizedPersonFilterInput.model_rebuild()
BusinessAccountHolderPrimaryAuthorizedAddressFilterInput.model_rebuild()
BusinessAccountHolderPrimaryAuthorizedPersonNameFilterInput.model_rebuild()
BusinessAccountHolderBusinessProfileFilterInput.model_rebuild()
BusinessAccountHolderBusinessNameFilterInput.model_rebuild()
PersonAccountHolderFilterInput.model_rebuild()
PersonAccountHolderNameFilterInput.model_rebuild()
PersonAuthorizedUserFilterInput.model_rebuild()
PersonAuthorizedUserNameFilterInput.model_rebuild()
CardProductApplicationFilterInput.model_rebuild()
PhoneFilterInput.model_rebuild()
AddressFilterInput.model_rebuild()
MerchantDetailsFilterInput.model_rebuild()
TransactionEventsFilterInput.model_rebuild()
CardProductTransactionEventsFilterInput.model_rebuild()
PaymentCardTransactionEventsFilterInput.model_rebuild()
LedgerEntriesFilterInput.model_rebuild()
DateFilterInput.model_rebuild()
MoneyFilterInput.model_rebuild()
TimestampFilterInput.model_rebuild()
FinancialAccountPaymentCardsFilterInput.model_rebuild()
FeeTransferEventFilterInput.model_rebuild()
CustomFieldsFilterInput.model_rebuild()
NotificationTimestampFilterInput.model_rebuild()
NotificationEventsFilterInput.model_rebuild()
WebhookNotificationTargetEventFilterInput.model_rebuild()
InitiatePayrollAdvanceInput.model_rebuild()
InitiateFundPaymentCardFinancialAccountTransferInput.model_rebuild()
InitiateTransferFromFundingFinancialAccountToPaymentCardFinancialAccountInput.model_rebuild()
InitiateTransferBetweenFinancialAccountsInput.model_rebuild()
InitiateTransferFromPaymentCardFinancialAccountToFundingFinancialAccountInput.model_rebuild()
InitiateFinancialAccountCreditLimitUpdateFromProductFundingInput.model_rebuild()
InitiateFundsWithdrawalACHTransferInput.model_rebuild()
InitiateFundsDepositACHTransferInput.model_rebuild()
InitiateSecureDepositACHTransferInput.model_rebuild()
SimulateExternallyInitiatedACHTransferInput.model_rebuild()
CreateOneTimeACHTransferInput.model_rebuild()
CreateRecurringACHTransferInput.model_rebuild()
AmountStrategyInput.model_rebuild()
TransferAgreementConsentInput.model_rebuild()
SimulateDepositInput.model_rebuild()
InitiateAchTransferInput.model_rebuild()
SimulateNonOriginatedAchTransferInput.model_rebuild()
FinancialAccountActivitiesFilterInput.model_rebuild()
CreateRewardMerchantCategoryEarnRuleInput.model_rebuild()
CreateRewardDefaultEarnRuleInput.model_rebuild()
AttachRewardEarnRuleToProductInput.model_rebuild()
CreateRewardRedemptionConfigurationInput.model_rebuild()
AttachRewardRedemptionConfigurationToProductInput.model_rebuild()
RedeemRewardsForStatementCreditInput.model_rebuild()
FinancialAccountStatementFilterInput.model_rebuild()
FinancialAccountStatementEntriesFilterInput.model_rebuild()
InitiateCustomerCardTransactionDisputeInput.model_rebuild()
CustomerContactInput.model_rebuild()
SimulateInitiateCardTransactionDisputeInput.model_rebuild()
SimulateInitiateCardTransactionChargebackInput.model_rebuild()
SimulateResolvePaymentCardTransactionChargebackInput.model_rebuild()
SimulateCreateApplicationDocumentsUploadSessionsInput.model_rebuild()
AddPaymentCardToGooglePayByDevicePushProvisioningInput.model_rebuild()
AttachSpendRuleToFinancialAccountInput.model_rebuild()
DetachSpendRuleFromFinancialAccountInput.model_rebuild()
AttachVelocityRuleToFinancialAccountInput.model_rebuild()
DetachVelocityRuleFromFinancialAccountInput.model_rebuild()
AttachSpendRuleToCardProductInput.model_rebuild()
DetachSpendRuleFromCardProductInput.model_rebuild()
AttachSpendRuleToPaymentCardInput.model_rebuild()
DetachSpendRuleFromPaymentCardInput.model_rebuild()
CreateAmountLimitSpendRuleInput.model_rebuild()
CreateDepositAmountLimitSpendRuleInput.model_rebuild()
UpdateAmountLimitSpendRuleInput.model_rebuild()
UpdateDepositAmountLimitSpendRuleInput.model_rebuild()
CreateVelocityRuleInput.model_rebuild()
AttachPaymentCardVelocityRuleInput.model_rebuild()
DetachPaymentCardVelocityRuleInput.model_rebuild()
AttachCardProductVelocityRuleInput.model_rebuild()
DetachCardProductVelocityRuleInput.model_rebuild()
CreateRevolvingCreditCardProductConfigurationInput.model_rebuild()
CreateChargeCreditCardProductConfigurationInput.model_rebuild()
CreditMinimumPaymentCardProductConfigurationInput.model_rebuild()
BillingCycleFilterInput.model_rebuild()
SimulateCreateAndActivateFeeScheduleInput.model_rebuild()
SimulateFeeConfigurationInput.model_rebuild()
SimulatedFeeAmountInput.model_rebuild()
FeeScheduleFilterInput.model_rebuild()
InitiateOrganizationReportInput.model_rebuild()
ReportParametersInput.model_rebuild()
ReportFilterInput.model_rebuild()
FilteredCardProfileSetsInput.model_rebuild()
FilteredCardProductCardProfileSetsInput.model_rebuild()
PaymentTransactionFilterInput.model_rebuild()
CardHolderInput.model_rebuild()
AuthorizePaymentCardInput.model_rebuild()
AuthorizePaymentMethodTokenInput.model_rebuild()
CapturePaymentTransactionInput.model_rebuild()
CancelPaymentTransactionInput.model_rebuild()
RefundPaymentTransactionInput.model_rebuild()
VerifyPaymentCardInput.model_rebuild()
ChargePaymentCardInput.model_rebuild()
ChargePaymentOrderPaymentMethodTokenInput.model_rebuild()
ChargePaymentOrderInput.model_rebuild()
ChargePaymentMethodTokenInput.model_rebuild()
CardProductApplicationBusinessMetricFilterInput.model_rebuild()
PaymentCardTransactionBusinessMetricFilterInput.model_rebuild()
UpdateCustomFieldsInput.model_rebuild()
TokenizeCardPaymentMethodCardHolderInput.model_rebuild()
TokenizeCardPaymentMethodInput.model_rebuild()
ValidateAddressInput.model_rebuild()
PaymentInstructionInput.model_rebuild()
CatalogPaymentOrderItemInput.model_rebuild()
CustomPaymentOrderItemInput.model_rebuild()
CreatePaymentOrderInput.model_rebuild()
