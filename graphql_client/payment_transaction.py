# Generated by ariadne-codegen
# Source: queries.gql

from typing import Annotated, Any, List, Literal, Optional, Union

from pydantic import Field

from .base_model import BaseModel
from .enums import (
    AccountingDirection,
    AcquiringPaymentCardBrand,
    PaymentTransactionAddressCodeResponseCode,
    PaymentTransactionPostalCodeResponseCode,
    PaymentTransactionResponseCodeProcessorResponseCode,
    PaymentTransactionSecurityCodeResponseCode,
    PaymentTransactionStatus,
)


class PaymentTransaction(BaseModel):
    payment_transactions: Optional["PaymentTransactionPaymentTransactions"] = Field(
        alias="paymentTransactions"
    )


class PaymentTransactionPaymentTransactions(BaseModel):
    typename__: Literal["PaymentTransactionsConnection"] = Field(alias="__typename")
    page_info: "PaymentTransactionPaymentTransactionsPageInfo" = Field(alias="pageInfo")
    edges: Optional[List["PaymentTransactionPaymentTransactionsEdges"]]


class PaymentTransactionPaymentTransactionsPageInfo(BaseModel):
    has_next_page: bool = Field(alias="hasNextPage")
    has_previous_page: bool = Field(alias="hasPreviousPage")
    start_cursor: str = Field(alias="startCursor")
    end_cursor: str = Field(alias="endCursor")


class PaymentTransactionPaymentTransactionsEdges(BaseModel):
    cursor: str
    node: Optional[
        Annotated[
            Union[
                "PaymentTransactionPaymentTransactionsEdgesNodePaymentTransaction",
                "PaymentTransactionPaymentTransactionsEdgesNodePaymentCreditTransaction",
                "PaymentTransactionPaymentTransactionsEdgesNodePaymentDebitTransaction",
            ],
            Field(discriminator="typename__"),
        ]
    ]


class PaymentTransactionPaymentTransactionsEdgesNodePaymentTransaction(BaseModel):
    typename__: Literal["PaymentTransaction"] = Field(alias="__typename")
    id: str
    created_at: Optional[str] = Field(alias="createdAt")
    updated_at: Optional[str] = Field(alias="updatedAt")
    steps: Optional[
        List["PaymentTransactionPaymentTransactionsEdgesNodePaymentTransactionSteps"]
    ]
    status: Optional[PaymentTransactionStatus]
    accounting_direction: Optional[AccountingDirection] = Field(
        alias="accountingDirection"
    )
    authorized_amount: Optional[
        "PaymentTransactionPaymentTransactionsEdgesNodePaymentTransactionAuthorizedAmount"
    ] = Field(alias="authorizedAmount")
    authorized_amount: Optional[
        "PaymentTransactionPaymentTransactionsEdgesNodePaymentTransactionAuthorizedAmount"
    ] = Field(alias="authorizedAmount")
    settled_amount: Optional[
        "PaymentTransactionPaymentTransactionsEdgesNodePaymentTransactionSettledAmount"
    ] = Field(alias="settledAmount")
    disbursed_amount: Optional[
        "PaymentTransactionPaymentTransactionsEdgesNodePaymentTransactionDisbursedAmount"
    ] = Field(alias="disbursedAmount")
    canceled_amount: Optional[
        "PaymentTransactionPaymentTransactionsEdgesNodePaymentTransactionCanceledAmount"
    ] = Field(alias="canceledAmount")
    refunded_amount: Optional[
        "PaymentTransactionPaymentTransactionsEdgesNodePaymentTransactionRefundedAmount"
    ] = Field(alias="refundedAmount")
    response_code: Optional[
        "PaymentTransactionPaymentTransactionsEdgesNodePaymentTransactionResponseCode"
    ] = Field(alias="responseCode")
    instrument: Optional[
        Annotated[
            Union[
                "PaymentTransactionPaymentTransactionsEdgesNodePaymentTransactionInstrumentPaymentCardInstrument",
            ],
            Field(discriminator="typename__"),
        ]
    ]


class PaymentTransactionPaymentTransactionsEdgesNodePaymentTransactionSteps(BaseModel):
    typename__: Literal[
        "CardAuthorizationAndCaptureStep",
        "CardAuthorizationStep",
        "CardAuthorizedStep",
        "CardCaptureStep",
        "CardCapturedStep",
        "CardCreditStep",
        "CardCreditedStep",
        "CardIncrementalAuthorizationStep",
        "CardIncrementalAuthorizedStep",
        "CardReversalStep",
        "CardReversedStep",
        "PaymentTransactionLifecycleStep",
    ] = Field(alias="__typename")
    created_at: Optional[str] = Field(alias="createdAt")
    amount: Optional[
        "PaymentTransactionPaymentTransactionsEdgesNodePaymentTransactionStepsAmount"
    ]
    events: Optional[
        List[
            "PaymentTransactionPaymentTransactionsEdgesNodePaymentTransactionStepsEvents"
        ]
    ]


class PaymentTransactionPaymentTransactionsEdgesNodePaymentTransactionStepsAmount(
    BaseModel
):
    value: Optional[Any]
    currency_code: Optional[str] = Field(alias="currencyCode")


class PaymentTransactionPaymentTransactionsEdgesNodePaymentTransactionStepsEvents(
    BaseModel
):
    typename__: Literal[
        "CardPaymentAuthorizationDeclinedEvent",
        "CardPaymentAuthorizedEvent",
        "CardPaymentCaptureDeclinedEvent",
        "CardPaymentCapturedEvent",
        "CardPaymentCapturingEvent",
        "CardPaymentDisbursedEvent",
        "CardPaymentIncrementalAuthorizationDeclinedEvent",
        "CardPaymentIncrementalAuthorizedEvent",
        "CardPaymentPartialReversedEvent",
        "CardPaymentReversalDeclinedEvent",
        "CardPaymentReversedEvent",
        "CardPaymentSettledEvent",
        "PaymentTransactionEvent",
    ] = Field(alias="__typename")
    created_at: Optional[str] = Field(alias="createdAt")
    updated_at: Optional[str] = Field(alias="updatedAt")
    amount: Optional[
        "PaymentTransactionPaymentTransactionsEdgesNodePaymentTransactionStepsEventsAmount"
    ]


class PaymentTransactionPaymentTransactionsEdgesNodePaymentTransactionStepsEventsAmount(
    BaseModel
):
    value: Optional[Any]
    currency_code: Optional[str] = Field(alias="currencyCode")


class PaymentTransactionPaymentTransactionsEdgesNodePaymentTransactionAuthorizedAmount(
    BaseModel
):
    value: Optional[Any]
    currency_code: Optional[str] = Field(alias="currencyCode")


class PaymentTransactionPaymentTransactionsEdgesNodePaymentTransactionSettledAmount(
    BaseModel
):
    value: Optional[Any]
    currency_code: Optional[str] = Field(alias="currencyCode")


class PaymentTransactionPaymentTransactionsEdgesNodePaymentTransactionDisbursedAmount(
    BaseModel
):
    value: Optional[Any]
    currency_code: Optional[str] = Field(alias="currencyCode")


class PaymentTransactionPaymentTransactionsEdgesNodePaymentTransactionCanceledAmount(
    BaseModel
):
    value: Optional[Any]
    currency_code: Optional[str] = Field(alias="currencyCode")


class PaymentTransactionPaymentTransactionsEdgesNodePaymentTransactionRefundedAmount(
    BaseModel
):
    value: Optional[Any]
    currency_code: Optional[str] = Field(alias="currencyCode")


class PaymentTransactionPaymentTransactionsEdgesNodePaymentTransactionResponseCode(
    BaseModel
):
    processor_response_code: Optional[
        PaymentTransactionResponseCodeProcessorResponseCode
    ] = Field(alias="processorResponseCode")
    address_code: Optional[PaymentTransactionAddressCodeResponseCode] = Field(
        alias="addressCode"
    )
    postal_code: Optional[PaymentTransactionPostalCodeResponseCode] = Field(
        alias="postalCode"
    )
    security_code: Optional[PaymentTransactionSecurityCodeResponseCode] = Field(
        alias="securityCode"
    )


class PaymentTransactionPaymentTransactionsEdgesNodePaymentTransactionInstrumentPaymentCardInstrument(
    BaseModel
):
    typename__: Literal["PaymentCardInstrument"] = Field(alias="__typename")
    created_at: Optional[str] = Field(alias="createdAt")
    last_4: Optional[str] = Field(alias="last4")
    expiry_year: Optional[str] = Field(alias="expiryYear")
    expiry_month: Optional[str] = Field(alias="expiryMonth")
    brand: Optional[AcquiringPaymentCardBrand]


class PaymentTransactionPaymentTransactionsEdgesNodePaymentCreditTransaction(BaseModel):
    typename__: Literal["PaymentCreditTransaction"] = Field(alias="__typename")
    id: str
    created_at: Optional[str] = Field(alias="createdAt")
    updated_at: Optional[str] = Field(alias="updatedAt")
    steps: Optional[
        List[
            "PaymentTransactionPaymentTransactionsEdgesNodePaymentCreditTransactionSteps"
        ]
    ]
    status: Optional[PaymentTransactionStatus]
    accounting_direction: Optional[AccountingDirection] = Field(
        alias="accountingDirection"
    )
    authorized_amount: Optional[
        "PaymentTransactionPaymentTransactionsEdgesNodePaymentCreditTransactionAuthorizedAmount"
    ] = Field(alias="authorizedAmount")
    authorized_amount: Optional[
        "PaymentTransactionPaymentTransactionsEdgesNodePaymentCreditTransactionAuthorizedAmount"
    ] = Field(alias="authorizedAmount")
    settled_amount: Optional[
        "PaymentTransactionPaymentTransactionsEdgesNodePaymentCreditTransactionSettledAmount"
    ] = Field(alias="settledAmount")
    disbursed_amount: Optional[
        "PaymentTransactionPaymentTransactionsEdgesNodePaymentCreditTransactionDisbursedAmount"
    ] = Field(alias="disbursedAmount")
    canceled_amount: Optional[
        "PaymentTransactionPaymentTransactionsEdgesNodePaymentCreditTransactionCanceledAmount"
    ] = Field(alias="canceledAmount")
    refunded_amount: Optional[
        "PaymentTransactionPaymentTransactionsEdgesNodePaymentCreditTransactionRefundedAmount"
    ] = Field(alias="refundedAmount")
    response_code: Optional[
        "PaymentTransactionPaymentTransactionsEdgesNodePaymentCreditTransactionResponseCode"
    ] = Field(alias="responseCode")
    instrument: Optional[
        Annotated[
            Union[
                "PaymentTransactionPaymentTransactionsEdgesNodePaymentCreditTransactionInstrumentPaymentCardInstrument",
            ],
            Field(discriminator="typename__"),
        ]
    ]
    originated_payment_transaction: Optional[
        "PaymentTransactionPaymentTransactionsEdgesNodePaymentCreditTransactionOriginatedPaymentTransaction"
    ] = Field(alias="originatedPaymentTransaction")


class PaymentTransactionPaymentTransactionsEdgesNodePaymentCreditTransactionSteps(
    BaseModel
):
    typename__: Literal[
        "CardAuthorizationAndCaptureStep",
        "CardAuthorizationStep",
        "CardAuthorizedStep",
        "CardCaptureStep",
        "CardCapturedStep",
        "CardCreditStep",
        "CardCreditedStep",
        "CardIncrementalAuthorizationStep",
        "CardIncrementalAuthorizedStep",
        "CardReversalStep",
        "CardReversedStep",
        "PaymentTransactionLifecycleStep",
    ] = Field(alias="__typename")
    created_at: Optional[str] = Field(alias="createdAt")
    amount: Optional[
        "PaymentTransactionPaymentTransactionsEdgesNodePaymentCreditTransactionStepsAmount"
    ]
    events: Optional[
        List[
            "PaymentTransactionPaymentTransactionsEdgesNodePaymentCreditTransactionStepsEvents"
        ]
    ]


class PaymentTransactionPaymentTransactionsEdgesNodePaymentCreditTransactionStepsAmount(
    BaseModel
):
    value: Optional[Any]
    currency_code: Optional[str] = Field(alias="currencyCode")


class PaymentTransactionPaymentTransactionsEdgesNodePaymentCreditTransactionStepsEvents(
    BaseModel
):
    typename__: Literal[
        "CardPaymentAuthorizationDeclinedEvent",
        "CardPaymentAuthorizedEvent",
        "CardPaymentCaptureDeclinedEvent",
        "CardPaymentCapturedEvent",
        "CardPaymentCapturingEvent",
        "CardPaymentDisbursedEvent",
        "CardPaymentIncrementalAuthorizationDeclinedEvent",
        "CardPaymentIncrementalAuthorizedEvent",
        "CardPaymentPartialReversedEvent",
        "CardPaymentReversalDeclinedEvent",
        "CardPaymentReversedEvent",
        "CardPaymentSettledEvent",
        "PaymentTransactionEvent",
    ] = Field(alias="__typename")
    created_at: Optional[str] = Field(alias="createdAt")
    updated_at: Optional[str] = Field(alias="updatedAt")
    amount: Optional[
        "PaymentTransactionPaymentTransactionsEdgesNodePaymentCreditTransactionStepsEventsAmount"
    ]


class PaymentTransactionPaymentTransactionsEdgesNodePaymentCreditTransactionStepsEventsAmount(
    BaseModel
):
    value: Optional[Any]
    currency_code: Optional[str] = Field(alias="currencyCode")


class PaymentTransactionPaymentTransactionsEdgesNodePaymentCreditTransactionAuthorizedAmount(
    BaseModel
):
    value: Optional[Any]
    currency_code: Optional[str] = Field(alias="currencyCode")


class PaymentTransactionPaymentTransactionsEdgesNodePaymentCreditTransactionSettledAmount(
    BaseModel
):
    value: Optional[Any]
    currency_code: Optional[str] = Field(alias="currencyCode")


class PaymentTransactionPaymentTransactionsEdgesNodePaymentCreditTransactionDisbursedAmount(
    BaseModel
):
    value: Optional[Any]
    currency_code: Optional[str] = Field(alias="currencyCode")


class PaymentTransactionPaymentTransactionsEdgesNodePaymentCreditTransactionCanceledAmount(
    BaseModel
):
    value: Optional[Any]
    currency_code: Optional[str] = Field(alias="currencyCode")


class PaymentTransactionPaymentTransactionsEdgesNodePaymentCreditTransactionRefundedAmount(
    BaseModel
):
    value: Optional[Any]
    currency_code: Optional[str] = Field(alias="currencyCode")


class PaymentTransactionPaymentTransactionsEdgesNodePaymentCreditTransactionResponseCode(
    BaseModel
):
    processor_response_code: Optional[
        PaymentTransactionResponseCodeProcessorResponseCode
    ] = Field(alias="processorResponseCode")
    address_code: Optional[PaymentTransactionAddressCodeResponseCode] = Field(
        alias="addressCode"
    )
    postal_code: Optional[PaymentTransactionPostalCodeResponseCode] = Field(
        alias="postalCode"
    )
    security_code: Optional[PaymentTransactionSecurityCodeResponseCode] = Field(
        alias="securityCode"
    )


class PaymentTransactionPaymentTransactionsEdgesNodePaymentCreditTransactionInstrumentPaymentCardInstrument(
    BaseModel
):
    typename__: Literal["PaymentCardInstrument"] = Field(alias="__typename")
    created_at: Optional[str] = Field(alias="createdAt")
    last_4: Optional[str] = Field(alias="last4")
    expiry_year: Optional[str] = Field(alias="expiryYear")
    expiry_month: Optional[str] = Field(alias="expiryMonth")
    brand: Optional[AcquiringPaymentCardBrand]


class PaymentTransactionPaymentTransactionsEdgesNodePaymentCreditTransactionOriginatedPaymentTransaction(
    BaseModel
):
    typename__: Literal["PaymentDebitTransaction"] = Field(alias="__typename")
    id: str
    created_at: Optional[str] = Field(alias="createdAt")
    updated_at: Optional[str] = Field(alias="updatedAt")


class PaymentTransactionPaymentTransactionsEdgesNodePaymentDebitTransaction(BaseModel):
    typename__: Literal["PaymentDebitTransaction"] = Field(alias="__typename")
    id: str
    created_at: Optional[str] = Field(alias="createdAt")
    updated_at: Optional[str] = Field(alias="updatedAt")
    steps: Optional[
        List[
            "PaymentTransactionPaymentTransactionsEdgesNodePaymentDebitTransactionSteps"
        ]
    ]
    status: Optional[PaymentTransactionStatus]
    accounting_direction: Optional[AccountingDirection] = Field(
        alias="accountingDirection"
    )
    authorized_amount: Optional[
        "PaymentTransactionPaymentTransactionsEdgesNodePaymentDebitTransactionAuthorizedAmount"
    ] = Field(alias="authorizedAmount")
    authorized_amount: Optional[
        "PaymentTransactionPaymentTransactionsEdgesNodePaymentDebitTransactionAuthorizedAmount"
    ] = Field(alias="authorizedAmount")
    settled_amount: Optional[
        "PaymentTransactionPaymentTransactionsEdgesNodePaymentDebitTransactionSettledAmount"
    ] = Field(alias="settledAmount")
    disbursed_amount: Optional[
        "PaymentTransactionPaymentTransactionsEdgesNodePaymentDebitTransactionDisbursedAmount"
    ] = Field(alias="disbursedAmount")
    canceled_amount: Optional[
        "PaymentTransactionPaymentTransactionsEdgesNodePaymentDebitTransactionCanceledAmount"
    ] = Field(alias="canceledAmount")
    refunded_amount: Optional[
        "PaymentTransactionPaymentTransactionsEdgesNodePaymentDebitTransactionRefundedAmount"
    ] = Field(alias="refundedAmount")
    response_code: Optional[
        "PaymentTransactionPaymentTransactionsEdgesNodePaymentDebitTransactionResponseCode"
    ] = Field(alias="responseCode")
    instrument: Optional[
        Annotated[
            Union[
                "PaymentTransactionPaymentTransactionsEdgesNodePaymentDebitTransactionInstrumentPaymentCardInstrument",
            ],
            Field(discriminator="typename__"),
        ]
    ]
    refunds: Optional[
        List[
            "PaymentTransactionPaymentTransactionsEdgesNodePaymentDebitTransactionRefunds"
        ]
    ]


class PaymentTransactionPaymentTransactionsEdgesNodePaymentDebitTransactionSteps(
    BaseModel
):
    typename__: Literal[
        "CardAuthorizationAndCaptureStep",
        "CardAuthorizationStep",
        "CardAuthorizedStep",
        "CardCaptureStep",
        "CardCapturedStep",
        "CardCreditStep",
        "CardCreditedStep",
        "CardIncrementalAuthorizationStep",
        "CardIncrementalAuthorizedStep",
        "CardReversalStep",
        "CardReversedStep",
        "PaymentTransactionLifecycleStep",
    ] = Field(alias="__typename")
    created_at: Optional[str] = Field(alias="createdAt")
    amount: Optional[
        "PaymentTransactionPaymentTransactionsEdgesNodePaymentDebitTransactionStepsAmount"
    ]
    events: Optional[
        List[
            "PaymentTransactionPaymentTransactionsEdgesNodePaymentDebitTransactionStepsEvents"
        ]
    ]


class PaymentTransactionPaymentTransactionsEdgesNodePaymentDebitTransactionStepsAmount(
    BaseModel
):
    value: Optional[Any]
    currency_code: Optional[str] = Field(alias="currencyCode")


class PaymentTransactionPaymentTransactionsEdgesNodePaymentDebitTransactionStepsEvents(
    BaseModel
):
    typename__: Literal[
        "CardPaymentAuthorizationDeclinedEvent",
        "CardPaymentAuthorizedEvent",
        "CardPaymentCaptureDeclinedEvent",
        "CardPaymentCapturedEvent",
        "CardPaymentCapturingEvent",
        "CardPaymentDisbursedEvent",
        "CardPaymentIncrementalAuthorizationDeclinedEvent",
        "CardPaymentIncrementalAuthorizedEvent",
        "CardPaymentPartialReversedEvent",
        "CardPaymentReversalDeclinedEvent",
        "CardPaymentReversedEvent",
        "CardPaymentSettledEvent",
        "PaymentTransactionEvent",
    ] = Field(alias="__typename")
    created_at: Optional[str] = Field(alias="createdAt")
    updated_at: Optional[str] = Field(alias="updatedAt")
    amount: Optional[
        "PaymentTransactionPaymentTransactionsEdgesNodePaymentDebitTransactionStepsEventsAmount"
    ]


class PaymentTransactionPaymentTransactionsEdgesNodePaymentDebitTransactionStepsEventsAmount(
    BaseModel
):
    value: Optional[Any]
    currency_code: Optional[str] = Field(alias="currencyCode")


class PaymentTransactionPaymentTransactionsEdgesNodePaymentDebitTransactionAuthorizedAmount(
    BaseModel
):
    value: Optional[Any]
    currency_code: Optional[str] = Field(alias="currencyCode")


class PaymentTransactionPaymentTransactionsEdgesNodePaymentDebitTransactionSettledAmount(
    BaseModel
):
    value: Optional[Any]
    currency_code: Optional[str] = Field(alias="currencyCode")


class PaymentTransactionPaymentTransactionsEdgesNodePaymentDebitTransactionDisbursedAmount(
    BaseModel
):
    value: Optional[Any]
    currency_code: Optional[str] = Field(alias="currencyCode")


class PaymentTransactionPaymentTransactionsEdgesNodePaymentDebitTransactionCanceledAmount(
    BaseModel
):
    value: Optional[Any]
    currency_code: Optional[str] = Field(alias="currencyCode")


class PaymentTransactionPaymentTransactionsEdgesNodePaymentDebitTransactionRefundedAmount(
    BaseModel
):
    value: Optional[Any]
    currency_code: Optional[str] = Field(alias="currencyCode")


class PaymentTransactionPaymentTransactionsEdgesNodePaymentDebitTransactionResponseCode(
    BaseModel
):
    processor_response_code: Optional[
        PaymentTransactionResponseCodeProcessorResponseCode
    ] = Field(alias="processorResponseCode")
    address_code: Optional[PaymentTransactionAddressCodeResponseCode] = Field(
        alias="addressCode"
    )
    postal_code: Optional[PaymentTransactionPostalCodeResponseCode] = Field(
        alias="postalCode"
    )
    security_code: Optional[PaymentTransactionSecurityCodeResponseCode] = Field(
        alias="securityCode"
    )


class PaymentTransactionPaymentTransactionsEdgesNodePaymentDebitTransactionInstrumentPaymentCardInstrument(
    BaseModel
):
    typename__: Literal["PaymentCardInstrument"] = Field(alias="__typename")
    created_at: Optional[str] = Field(alias="createdAt")
    last_4: Optional[str] = Field(alias="last4")
    expiry_year: Optional[str] = Field(alias="expiryYear")
    expiry_month: Optional[str] = Field(alias="expiryMonth")
    brand: Optional[AcquiringPaymentCardBrand]


class PaymentTransactionPaymentTransactionsEdgesNodePaymentDebitTransactionRefunds(
    BaseModel
):
    typename__: Literal["PaymentCreditTransaction"] = Field(alias="__typename")
    id: str
    created_at: Optional[str] = Field(alias="createdAt")
    updated_at: Optional[str] = Field(alias="updatedAt")


PaymentTransaction.model_rebuild()
PaymentTransactionPaymentTransactions.model_rebuild()
PaymentTransactionPaymentTransactionsEdges.model_rebuild()
PaymentTransactionPaymentTransactionsEdgesNodePaymentTransaction.model_rebuild()
PaymentTransactionPaymentTransactionsEdgesNodePaymentTransactionSteps.model_rebuild()
PaymentTransactionPaymentTransactionsEdgesNodePaymentTransactionStepsEvents.model_rebuild()
PaymentTransactionPaymentTransactionsEdgesNodePaymentCreditTransaction.model_rebuild()
PaymentTransactionPaymentTransactionsEdgesNodePaymentCreditTransactionSteps.model_rebuild()
PaymentTransactionPaymentTransactionsEdgesNodePaymentCreditTransactionStepsEvents.model_rebuild()
PaymentTransactionPaymentTransactionsEdgesNodePaymentDebitTransaction.model_rebuild()
PaymentTransactionPaymentTransactionsEdgesNodePaymentDebitTransactionSteps.model_rebuild()
PaymentTransactionPaymentTransactionsEdgesNodePaymentDebitTransactionStepsEvents.model_rebuild()
