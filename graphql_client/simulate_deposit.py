# Generated by ariadne-codegen
# Source: queries.gql

from typing import Annotated, List, Literal, Optional, Union

from pydantic import Field

from .base_model import BaseModel
from .enums import TransferStatus


class SimulateDeposit(BaseModel):
    simulate_deposit: Optional[
        Annotated[
            Union[
                "SimulateDepositSimulateDepositTransfer",
                "SimulateDepositSimulateDepositWireTransfer",
                "SimulateDepositSimulateDepositUserError",
                "SimulateDepositSimulateDepositAccessDeniedError",
            ],
            Field(discriminator="typename__"),
        ]
    ] = Field(alias="simulateDeposit")


class SimulateDepositSimulateDepositTransfer(BaseModel):
    typename__: Literal["Transfer"] = Field(alias="__typename")
    id: str
    status: Optional[TransferStatus]


class SimulateDepositSimulateDepositWireTransfer(BaseModel):
    typename__: Literal["WireTransfer"] = Field(alias="__typename")


class SimulateDepositSimulateDepositUserError(BaseModel):
    typename__: Literal["UserError"] = Field(alias="__typename")
    errors: Optional[List["SimulateDepositSimulateDepositUserErrorErrors"]]


class SimulateDepositSimulateDepositUserErrorErrors(BaseModel):
    path: Optional[List[str]]
    code: Optional[str]
    description: Optional[str]


class SimulateDepositSimulateDepositAccessDeniedError(BaseModel):
    typename__: Literal["AccessDeniedError"] = Field(alias="__typename")
    message: str


SimulateDeposit.model_rebuild()
SimulateDepositSimulateDepositUserError.model_rebuild()
